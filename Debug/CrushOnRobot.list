
CrushOnRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08009990  08009990  00019990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e1c  08009e1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e24  08009e24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001e0  0800a00c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  0800a00c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019386  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9b  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8d1  00000000  00000000  0003e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cb9  00000000  00000000  0006ac71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010db06  00000000  00000000  0008092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  0018e484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009974 	.word	0x08009974

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08009974 	.word	0x08009974

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_GPIO_Init+0xb0>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f001 f979 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 ffd8 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f60:	2302      	movs	r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xb4>)
 8000f74:	f000 ffc8 	bl	8001f08 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001c00 	.word	0x48001c00

08000f88 <__io_putchar>:
int __io_putchar(int ch);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	while(HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000) != HAL_OK){}
 8000f90:	bf00      	nop
 8000f92:	1d39      	adds	r1, r7, #4
 8000f94:	f247 5330 	movw	r3, #30000	; 0x7530
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <__io_putchar+0x28>)
 8000f9c:	f003 ff5c 	bl	8004e58 <HAL_UART_Transmit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f5      	bne.n	8000f92 <__io_putchar+0xa>
	return ch;
 8000fa6:	687b      	ldr	r3, [r7, #4]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000340 	.word	0x20000340

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 fdaa 	bl	8001b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f85f 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f7ff ff85 	bl	8000ed0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fc6:	f000 fcc9 	bl	800195c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fca:	f000 fa85 	bl	80014d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fce:	f000 faff 	bl	80015d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fd2:	f000 fb63 	bl	800169c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &rx_data, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4922      	ldr	r1, [pc, #136]	; (8001064 <main+0xb0>)
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <main+0xb4>)
 8000fdc:	f003 ffd4 	bl	8004f88 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4822      	ldr	r0, [pc, #136]	; (800106c <main+0xb8>)
 8000fe4:	f002 ff4a 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4820      	ldr	r0, [pc, #128]	; (800106c <main+0xb8>)
 8000fec:	f002 ff46 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <main+0xb8>)
 8000ff4:	f002 ff42 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ff8:	210c      	movs	r1, #12
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <main+0xb8>)
 8000ffc:	f002 ff3e 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <main+0xbc>)
 8001004:	f002 ff3a 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001008:	210c      	movs	r1, #12
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <main+0xbc>)
 800100c:	f002 ff36 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //servo
 8001010:	2108      	movs	r1, #8
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <main+0xc0>)
 8001014:	f002 ff32 	bl	8003e7c <HAL_TIM_PWM_Start>

  printf("Initial setup finished\n");
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <main+0xc4>)
 800101a:	f006 fc3b 	bl	8007894 <puts>
  while (1)
  {
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

//	  TIM4->CCR3 = ccr1;
	  for(int i = 0; i < 120; i++){
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	e00a      	b.n	800103a <main+0x86>
		  TIM4->CCR3 = 40+i;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <main+0xc8>)
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f000 fda8 	bl	8001b84 <HAL_Delay>
	  for(int i = 0; i < 120; i++){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b77      	cmp	r3, #119	; 0x77
 800103e:	ddf1      	ble.n	8001024 <main+0x70>
	  }
	  for(int i = 120; i > 0; i--){
 8001040:	2378      	movs	r3, #120	; 0x78
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	e00a      	b.n	800105c <main+0xa8>
		  TIM4->CCR3 = 40+i;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <main+0xc8>)
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f000 fd97 	bl	8001b84 <HAL_Delay>
	  for(int i = 120; i > 0; i--){
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dcf1      	bgt.n	8001046 <main+0x92>
	  for(int i = 0; i < 120; i++){
 8001062:	e7dc      	b.n	800101e <main+0x6a>
 8001064:	2000020c 	.word	0x2000020c
 8001068:	20000340 	.word	0x20000340
 800106c:	200002f4 	.word	0x200002f4
 8001070:	200002a8 	.word	0x200002a8
 8001074:	2000025c 	.word	0x2000025c
 8001078:	08009990 	.word	0x08009990
 800107c:	40000800 	.word	0x40000800

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	; 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 ff08 	bl	8006ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f001 f8fa 	bl	800229c <HAL_PWREx_ControlVoltageScaling>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010ae:	f000 f87b 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010b2:	2310      	movs	r3, #16
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010ce:	233c      	movs	r3, #60	; 0x3c
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f97e 	bl	80023e4 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ee:	f000 f85b 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fd90 	bl	8002c30 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001116:	f000 f847 	bl	80011a8 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_UART_RxCpltCallback+0x44>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d114      	bne.n	8001160 <HAL_UART_RxCpltCallback+0x3c>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &rx_data, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <HAL_UART_RxCpltCallback+0x48>)
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_UART_RxCpltCallback+0x4c>)
 800113c:	f003 ff24 	bl	8004f88 <HAL_UART_Receive_IT>
		isSameMode = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_UART_RxCpltCallback+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
		mode = rx_data;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_UART_RxCpltCallback+0x48>)
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_UART_RxCpltCallback+0x54>)
 800114c:	701a      	strb	r2, [r3, #0]
		printf("====mode changed====\n");
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <HAL_UART_RxCpltCallback+0x58>)
 8001150:	f006 fba0 	bl	8007894 <puts>
		printf("mode = %c\n", mode);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_UART_RxCpltCallback+0x54>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_UART_RxCpltCallback+0x5c>)
 800115c:	f006 fb14 	bl	8007788 <iprintf>
	}
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013800 	.word	0x40013800
 800116c:	2000020c 	.word	0x2000020c
 8001170:	20000340 	.word	0x20000340
 8001174:	200001fc 	.word	0x200001fc
 8001178:	20000000 	.word	0x20000000
 800117c:	080099a8 	.word	0x080099a8
 8001180:	080099c0 	.word	0x080099c0

08001184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001196:	f000 fcd5 	bl	8001b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012c00 	.word	0x40012c00

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6613      	str	r3, [r2, #96]	; 0x60
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2019      	movs	r0, #25
 8001212:	f000 fd93 	bl	8001d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001216:	2019      	movs	r0, #25
 8001218:	f000 fdac 	bl	8001d74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_InitTick+0x9c>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_InitTick+0x9c>)
 8001222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001226:	6613      	str	r3, [r2, #96]	; 0x60
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_InitTick+0x9c>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001234:	f107 0210 	add.w	r2, r7, #16
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fee6 	bl	8003010 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001244:	f001 fece 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 8001248:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_InitTick+0xa0>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	3b01      	subs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_InitTick+0xa4>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <HAL_InitTick+0xa8>)
 800125c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_InitTick+0xa4>)
 8001260:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001264:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_InitTick+0xa4>)
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_InitTick+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_InitTick+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <HAL_InitTick+0xa4>)
 800127a:	f002 fcd5 	bl	8003c28 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d104      	bne.n	800128e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <HAL_InitTick+0xa4>)
 8001286:	f002 fd31 	bl	8003cec <HAL_TIM_Base_Start_IT>
 800128a:	4603      	mov	r3, r0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3730      	adds	r7, #48	; 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	431bde83 	.word	0x431bde83
 80012a0:	20000210 	.word	0x20000210
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001306:	f002 febf 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000210 	.word	0x20000210

08001314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <USART1_IRQHandler+0x10>)
 800131a:	f003 fe8b 	bl	8005034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000340 	.word	0x20000340

08001328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	return 1;
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_kill>:

int _kill(int pid, int sig)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001342:	f005 fd85 	bl	8006e50 <__errno>
 8001346:	4603      	mov	r3, r0
 8001348:	2216      	movs	r2, #22
 800134a:	601a      	str	r2, [r3, #0]
	return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_exit>:

void _exit (int status)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffe7 	bl	8001338 <_kill>
	while (1) {}		/* Make sure we hang here */
 800136a:	e7fe      	b.n	800136a <_exit+0x12>

0800136c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
	}

return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e009      	b.n	80013cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fde1 	bl	8000f88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf1      	blt.n	80013b8 <_write+0x12>
	}
	return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_close>:

int _close(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001406:	605a      	str	r2, [r3, #4]
	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_isatty>:

int _isatty(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return 1;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f005 fcea 	bl	8006e50 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200a0000 	.word	0x200a0000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	20000200 	.word	0x20000200
 80014b0:	200003e8 	.word	0x200003e8

080014b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <MX_TIM2_Init+0xf4>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001506:	2277      	movs	r2, #119	; 0x77
 8001508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_TIM2_Init+0xf4>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <MX_TIM2_Init+0xf4>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001524:	4829      	ldr	r0, [pc, #164]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001526:	f002 fc51 	bl	8003dcc <HAL_TIM_PWM_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001530:	f7ff fe3a 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001544:	f003 fb92 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800154e:	f7ff fe2b 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001552:	2360      	movs	r3, #96	; 0x60
 8001554:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 799;
 8001556:	f240 331f 	movw	r3, #799	; 0x31f
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <MX_TIM2_Init+0xf4>)
 800156c:	f002 feac 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001576:	f7ff fe17 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4812      	ldr	r0, [pc, #72]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001582:	f002 fea1 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800158c:	f7ff fe0c 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	2208      	movs	r2, #8
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM2_Init+0xf4>)
 8001598:	f002 fe96 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80015a2:	f7ff fe01 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	220c      	movs	r2, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM2_Init+0xf4>)
 80015ae:	f002 fe8b 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80015b8:	f7ff fdf6 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM2_Init+0xf4>)
 80015be:	f000 f931 	bl	8001824 <HAL_TIM_MspPostInit>

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002f4 	.word	0x200002f4

080015d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <MX_TIM3_Init+0xc4>)
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <MX_TIM3_Init+0xc8>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_TIM3_Init+0xc4>)
 80015fc:	2277      	movs	r2, #119	; 0x77
 80015fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800161a:	481e      	ldr	r0, [pc, #120]	; (8001694 <MX_TIM3_Init+0xc4>)
 800161c:	f002 fbd6 	bl	8003dcc <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001626:	f7ff fdbf 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <MX_TIM3_Init+0xc4>)
 800163a:	f003 fb17 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001644:	f7ff fdb0 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 799;
 800164c:	f240 331f 	movw	r3, #799	; 0x31f
 8001650:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001662:	f002 fe31 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800166c:	f7ff fd9c 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	220c      	movs	r2, #12
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001678:	f002 fe26 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001682:	f7ff fd91 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM3_Init+0xc4>)
 8001688:	f000 f8cc 	bl	8001824 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002a8 	.word	0x200002a8
 8001698:	40000400 	.word	0x40000400

0800169c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ae:	463b      	mov	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_TIM4_Init+0xb0>)
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <MX_TIM4_Init+0xb4>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_TIM4_Init+0xb0>)
 80016c8:	f240 42af 	movw	r2, #1199	; 0x4af
 80016cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_TIM4_Init+0xb0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM4_Init+0xb0>)
 80016d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM4_Init+0xb0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM4_Init+0xb0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM4_Init+0xb0>)
 80016ea:	f002 fb6f 	bl	8003dcc <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f7ff fd58 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_TIM4_Init+0xb0>)
 8001708:	f003 fab0 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001712:	f7ff fd49 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2208      	movs	r2, #8
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM4_Init+0xb0>)
 800172e:	f002 fdcb 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001738:	f7ff fd36 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM4_Init+0xb0>)
 800173e:	f000 f871 	bl	8001824 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000025c 	.word	0x2000025c
 8001750:	40000800 	.word	0x40000800

08001754 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d10c      	bne.n	8001790 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800178e:	e03f      	b.n	8001810 <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_TIM_PWM_MspInit+0xc8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d129      	bne.n	80017ee <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017da:	2302      	movs	r3, #2
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f000 fb8e 	bl	8001f08 <HAL_GPIO_Init>
}
 80017ec:	e010      	b.n	8001810 <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM4)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_TIM_PWM_MspInit+0xcc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d10b      	bne.n	8001810 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_TIM_PWM_MspInit+0xc4>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	bf00      	nop
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40000400 	.word	0x40000400
 8001820:	40000800 	.word	0x40000800

08001824 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d11d      	bne.n	8001882 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a40      	ldr	r2, [pc, #256]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800185e:	230f      	movs	r3, #15
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186e:	2301      	movs	r3, #1
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 fb44 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001880:	e060      	b.n	8001944 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a32      	ldr	r2, [pc, #200]	; (8001950 <HAL_TIM_MspPostInit+0x12c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d139      	bne.n	8001900 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a2e      	ldr	r2, [pc, #184]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018bc:	2340      	movs	r3, #64	; 0x40
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018cc:	2302      	movs	r3, #2
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f000 fb15 	bl	8001f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018de:	2302      	movs	r3, #2
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <HAL_TIM_MspPostInit+0x130>)
 80018fa:	f000 fb05 	bl	8001f08 <HAL_GPIO_Init>
}
 80018fe:	e021      	b.n	8001944 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_TIM_MspPostInit+0x134>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d11c      	bne.n	8001944 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_TIM_MspPostInit+0x128>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001934:	2302      	movs	r3, #2
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_TIM_MspPostInit+0x130>)
 8001940:	f000 fae2 	bl	8001f08 <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	40000400 	.word	0x40000400
 8001954:	48000400 	.word	0x48000400
 8001958:	40000800 	.word	0x40000800

0800195c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <MX_USART1_UART_Init+0x94>)
 8001964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019a6:	f003 fa07 	bl	8004db8 <HAL_UART_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019b0:	f7ff fbfa 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019b8:	f005 f97f 	bl	8006cba <HAL_UARTEx_SetTxFifoThreshold>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019c2:	f7ff fbf1 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019ca:	f005 f9b4 	bl	8006d36 <HAL_UARTEx_SetRxFifoThreshold>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019d4:	f7ff fbe8 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019da:	f005 f935 	bl	8006c48 <HAL_UARTEx_DisableFifoMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019e4:	f7ff fbe0 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000340 	.word	0x20000340
 80019f0:	40013800 	.word	0x40013800

080019f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0ae      	sub	sp, #184	; 0xb8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2294      	movs	r2, #148	; 0x94
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 fa45 	bl	8006ea4 <memset>
  if(uartHandle->Instance==USART1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_UART_MspInit+0xc0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d142      	bne.n	8001aaa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fbe1 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a3c:	f7ff fbb4 	bl	80011a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0xc4>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <HAL_UART_MspInit+0xc8>)
 8001a96:	f000 fa37 	bl	8001f08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2107      	movs	r1, #7
 8001a9e:	2025      	movs	r0, #37	; 0x25
 8001aa0:	f000 f94c 	bl	8001d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa4:	2025      	movs	r0, #37	; 0x25
 8001aa6:	f000 f965 	bl	8001d74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001aaa:	bf00      	nop
 8001aac:	37b8      	adds	r7, #184	; 0xb8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000400 	.word	0x48000400

08001ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac4:	f7ff fcf6 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <LoopForever+0x6>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	; (8001b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <LoopForever+0xe>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	; (8001b0c <LoopForever+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aee:	f005 f9b5 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af2:	f7ff fa5f 	bl	8000fb4 <main>

08001af6 <LoopForever>:

LoopForever:
    b LoopForever
 8001af6:	e7fe      	b.n	8001af6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b04:	08009e2c 	.word	0x08009e2c
  ldr r2, =_sbss
 8001b08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b0c:	200003e4 	.word	0x200003e4

08001b10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC1_IRQHandler>

08001b12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f902 	bl	8001d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b22:	200f      	movs	r0, #15
 8001b24:	f7ff fb6a 	bl	80011fc <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	e001      	b.n	8001b38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b34:	f7ff fb3e 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	200003d0 	.word	0x200003d0

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200003d0 	.word	0x200003d0

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000000c 	.word	0x2000000c

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <__NVIC_EnableIRQ+0x38>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff4c 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4e:	f7ff ff61 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	6978      	ldr	r0, [r7, #20]
 8001d5a:	f7ff ffb1 	bl	8001cc0 <NVIC_EncodePriority>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff80 	bl	8001c6c <__NVIC_SetPriority>
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff54 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2204      	movs	r2, #4
 8001dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e040      	b.n	8001e3c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 020e 	bic.w	r2, r2, #14
 8001dc8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f003 021c 	and.w	r2, r3, #28
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e06:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00c      	beq.n	8001e2a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e28:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d005      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2204      	movs	r2, #4
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e047      	b.n	8001efc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 020e 	bic.w	r2, r2, #14
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f003 021c 	and.w	r2, r3, #28
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eda:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    }
  }
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e166      	b.n	80021e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8158 	beq.w	80021e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_GPIO_Init+0x40>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d130      	bne.n	8001faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f7e:	2201      	movs	r2, #1
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 0201 	and.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d017      	beq.n	8001fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d123      	bne.n	800203a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80b2 	beq.w	80021e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207c:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 800207e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002080:	4a60      	ldr	r2, [pc, #384]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6613      	str	r3, [r2, #96]	; 0x60
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 800208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002094:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_Init+0x300>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020be:	d02b      	beq.n	8002118 <HAL_GPIO_Init+0x210>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_GPIO_Init+0x304>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d025      	beq.n	8002114 <HAL_GPIO_Init+0x20c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_GPIO_Init+0x308>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01f      	beq.n	8002110 <HAL_GPIO_Init+0x208>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x30c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_GPIO_Init+0x204>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4f      	ldr	r2, [pc, #316]	; (8002218 <HAL_GPIO_Init+0x310>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x200>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_GPIO_Init+0x314>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1fc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x318>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <HAL_GPIO_Init+0x31c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1f4>
 80020f8:	2307      	movs	r3, #7
 80020fa:	e00e      	b.n	800211a <HAL_GPIO_Init+0x212>
 80020fc:	2308      	movs	r3, #8
 80020fe:	e00c      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002100:	2306      	movs	r3, #6
 8002102:	e00a      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002104:	2305      	movs	r3, #5
 8002106:	e008      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002108:	2304      	movs	r3, #4
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x212>
 800210c:	2303      	movs	r3, #3
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002118:	2300      	movs	r3, #0
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800212a:	4937      	ldr	r1, [pc, #220]	; (8002208 <HAL_GPIO_Init+0x300>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_GPIO_Init+0x320>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_GPIO_Init+0x320>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_GPIO_Init+0x320>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f ae91 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	48000400 	.word	0x48000400
 8002210:	48000800 	.word	0x48000800
 8002214:	48000c00 	.word	0x48000c00
 8002218:	48001000 	.word	0x48001000
 800221c:	48001400 	.word	0x48001400
 8002220:	48001800 	.word	0x48001800
 8002224:	48001c00 	.word	0x48001c00
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002248:	e002      	b.n	8002250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d102      	bne.n	8002274 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800226e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002272:	e00b      	b.n	800228c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d102      	bne.n	800228a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	e000      	b.n	800228c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800228a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d141      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d131      	bne.n	800231c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022be:	4a46      	ldr	r2, [pc, #280]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d0:	4a41      	ldr	r2, [pc, #260]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2232      	movs	r2, #50	; 0x32
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	3301      	adds	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ee:	e002      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d102      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f2      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002316:	d158      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e057      	b.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800232c:	e04d      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002334:	d141      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d131      	bne.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2232      	movs	r2, #50	; 0x32
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	3301      	adds	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800237a:	e002      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d102      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f2      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a2:	d112      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e011      	b.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023b8:	e007      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40007000 	.word	0x40007000
 80023dc:	20000004 	.word	0x20000004
 80023e0:	431bde83 	.word	0x431bde83

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f000 bc16 	b.w	8002c24 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f8:	4ba0      	ldr	r3, [pc, #640]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002402:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80e4 	beq.w	80025e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_RCC_OscConfig+0x4c>
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	f040 808b 	bne.w	800253e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 8087 	bne.w	800253e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x64>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e3ed      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_RCC_OscConfig+0x7e>
 8002458:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002460:	e005      	b.n	800246e <HAL_RCC_OscConfig+0x8a>
 8002462:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246e:	4293      	cmp	r3, r2
 8002470:	d223      	bcs.n	80024ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fdfc 	bl	8003074 <RCC_SetFlashLatencyFromMSIRange>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e3ce      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002486:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7c      	ldr	r2, [pc, #496]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b7a      	ldr	r3, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4977      	ldr	r1, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
 80024b8:	e025      	b.n	8002506 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6f      	ldr	r2, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	496a      	ldr	r1, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4965      	ldr	r1, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdbc 	bl	8003074 <RCC_SetFlashLatencyFromMSIRange>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e38e      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002506:	f000 fcbf 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	495a      	ldr	r1, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x29c>)
 8002518:	5ccb      	ldrb	r3, [r1, r3]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_OscConfig+0x2a0>)
 8002524:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x2a4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fe66 	bl	80011fc <HAL_InitTick>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d052      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	e372      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d032      	beq.n	80025ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002546:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002552:	f7ff fb0b 	bl	8001b6c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255a:	f7ff fb07 	bl	8001b6c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e35b      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3f      	ldr	r2, [pc, #252]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	493a      	ldr	r1, [pc, #232]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
 80025aa:	e01a      	b.n	80025e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ac:	4b33      	ldr	r3, [pc, #204]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fad8 	bl	8001b6c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c0:	f7ff fad4 	bl	8001b6c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e328      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1dc>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d073      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x21c>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d10e      	bne.n	8002618 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d10b      	bne.n	8002618 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d063      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d15f      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e305      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002620:	d106      	bne.n	8002630 <HAL_RCC_OscConfig+0x24c>
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0x288>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x270>
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x288>
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a05      	ldr	r2, [pc, #20]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff fa7a 	bl	8001b6c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	e010      	b.n	800269e <HAL_RCC_OscConfig+0x2ba>
 800267c:	40021000 	.word	0x40021000
 8002680:	080099cc 	.word	0x080099cc
 8002684:	20000004 	.word	0x20000004
 8002688:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fa6e 	bl	8001b6c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e2c2      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269e:	4baf      	ldr	r3, [pc, #700]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x2a8>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff fa5e 	bl	8001b6c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fa5a 	bl	8001b6c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e2ae      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c6:	4ba5      	ldr	r3, [pc, #660]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d0>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d060      	beq.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x310>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d116      	bne.n	8002722 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f4:	4b99      	ldr	r3, [pc, #612]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x328>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e28b      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b93      	ldr	r3, [pc, #588]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	4990      	ldr	r1, [pc, #576]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	e040      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d023      	beq.n	8002772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	4b8c      	ldr	r3, [pc, #560]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a8b      	ldr	r2, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7ff fa19 	bl	8001b6c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7ff fa15 	bl	8001b6c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e269      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	4b82      	ldr	r3, [pc, #520]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b7f      	ldr	r3, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	497c      	ldr	r1, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff f9f5 	bl	8001b6c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7ff f9f1 	bl	8001b6c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e245      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03c      	beq.n	800282a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7ff f9d0 	bl	8001b6c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7ff f9cc 	bl	8001b6c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e220      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e2:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3ec>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7ff f9b3 	bl	8001b6c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7ff f9af 	bl	8001b6c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e203      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281c:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800281e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80a6 	beq.w	8002984 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b44      	ldr	r3, [pc, #272]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	; 0x58
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d118      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287c:	f7ff f976 	bl	8001b6c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7ff f972 	bl	8001b6c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1c6      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x4d8>
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ba:	e024      	b.n	8002906 <HAL_RCC_OscConfig+0x522>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d110      	bne.n	80028e6 <HAL_RCC_OscConfig+0x502>
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e4:	e00f      	b.n	8002906 <HAL_RCC_OscConfig+0x522>
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7ff f92d 	bl	8001b6c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7ff f929 	bl	8001b6c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e17b      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ed      	beq.n	8002916 <HAL_RCC_OscConfig+0x532>
 800293a:	e01a      	b.n	8002972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7ff f916 	bl	8001b6c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7ff f912 	bl	8001b6c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d906      	bls.n	8002964 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e164      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002964:	4ba8      	ldr	r3, [pc, #672]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e8      	bne.n	8002944 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4ba3      	ldr	r3, [pc, #652]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4aa2      	ldr	r2, [pc, #648]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d03c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002998:	4b9b      	ldr	r3, [pc, #620]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 800299a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800299e:	4a9a      	ldr	r2, [pc, #616]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7ff f8e0 	bl	8001b6c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b0:	f7ff f8dc 	bl	8001b6c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e130      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029c2:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 80029c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCC_OscConfig+0x5cc>
 80029d0:	e01b      	b.n	8002a0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 80029d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029d8:	4a8b      	ldr	r2, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7ff f8c3 	bl	8001b6c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7ff f8bf 	bl	8001b6c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e113      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029fc:	4b82      	ldr	r3, [pc, #520]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 80029fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ef      	bne.n	80029ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8107 	beq.w	8002c22 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f040 80cb 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d12c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d123      	bne.n	8002a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d11b      	bne.n	8002a8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d113      	bne.n	8002a8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d109      	bne.n	8002a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	3b01      	subs	r3, #1
 8002a86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d06d      	beq.n	8002b68 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d068      	beq.n	8002b64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0ba      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aae:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aba:	f7ff f857 	bl	8001b6c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7ff f853 	bl	8001b6c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0a7      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae0:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_RCC_OscConfig+0x828>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afa:	0212      	lsls	r2, r2, #8
 8002afc:	4311      	orrs	r1, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b02:	0852      	lsrs	r2, r2, #1
 8002b04:	3a01      	subs	r2, #1
 8002b06:	0552      	lsls	r2, r2, #21
 8002b08:	4311      	orrs	r1, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0652      	lsls	r2, r2, #25
 8002b14:	4311      	orrs	r1, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b1a:	06d2      	lsls	r2, r2, #27
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	493a      	ldr	r1, [pc, #232]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7ff f816 	bl	8001b6c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7ff f812 	bl	8001b6c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e066      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b62:	e05e      	b.n	8002c22 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e05d      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d156      	bne.n	8002c22 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8c:	f7fe ffee 	bl	8001b6c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe ffea 	bl	8001b6c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e03e      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x7b0>
 8002bb2:	e036      	b.n	8002c22 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d031      	beq.n	8002c1e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_OscConfig+0x824>)
 8002be4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe ffbd 	bl	8001b6c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe ffb9 	bl	8001b6c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d905      	bls.n	8002c10 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00d      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_OscConfig+0x848>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ec      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x812>
 8002c1c:	e001      	b.n	8002c22 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e10f      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b86      	ldr	r3, [pc, #536]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 020f 	bic.w	r2, r3, #15
 8002c5e:	4984      	ldr	r1, [pc, #528]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0f7      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8089 	beq.w	8002d98 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d133      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b79      	ldr	r3, [pc, #484]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0e4      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c9e:	f000 fa43 	bl	8003128 <RCC_GetSysClockFreqFromPLLSource>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a74      	ldr	r2, [pc, #464]	; (8002e78 <HAL_RCC_ClockConfig+0x248>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d955      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e044      	b.n	8002d56 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03e      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x126>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d13a      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce8:	4a62      	ldr	r2, [pc, #392]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e02f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d115      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0ac      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0a0      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d26:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e098      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d36:	f000 f8a7 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_RCC_ClockConfig+0x248>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d909      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4a:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4944      	ldr	r1, [pc, #272]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe ff00 	bl	8001b6c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe fefc 	bl	8001b6c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e070      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 020c 	and.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1eb      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4930      	ldr	r1, [pc, #192]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
 8002db6:	e008      	b.n	8002dca <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d210      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 020f 	bic.w	r2, r3, #15
 8002de0:	4923      	ldr	r1, [pc, #140]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e036      	b.n	8002e68 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4918      	ldr	r1, [pc, #96]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4910      	ldr	r1, [pc, #64]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e38:	f000 f826 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x24c>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x250>)
 8002e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x254>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f9cd 	bl	80011fc <HAL_InitTick>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	04c4b400 	.word	0x04c4b400
 8002e7c:	080099cc 	.word	0x080099cc
 8002e80:	20000004 	.word	0x20000004
 8002e84:	20000008 	.word	0x20000008

08002e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x34>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d121      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d11e      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10d      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e004      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d134      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d003      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0xac>
 8002f2c:	e005      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f30:	617b      	str	r3, [r7, #20]
      break;
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f36:	617b      	str	r3, [r7, #20]
      break;
 8002f38:	e002      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	617b      	str	r3, [r7, #20]
      break;
 8002f3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	fb02 f203 	mul.w	r2, r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	0e5b      	lsrs	r3, r3, #25
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	3301      	adds	r3, #1
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f80:	69bb      	ldr	r3, [r7, #24]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	; 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	080099e4 	.word	0x080099e4
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200

08002fa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000004 	.word	0x20000004

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	080099dc 	.word	0x080099dc

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe8:	f7ff ffda 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0adb      	lsrs	r3, r3, #11
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4904      	ldr	r1, [pc, #16]	; (800300c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	080099dc 	.word	0x080099dc

08003010 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	220f      	movs	r2, #15
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCC_GetClockConfig+0x60>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 020f 	and.w	r2, r3, #15
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40022000 	.word	0x40022000

08003074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800308c:	f7ff f8e6 	bl	800225c <HAL_PWREx_GetVoltageRange>
 8003090:	6178      	str	r0, [r7, #20]
 8003092:	e014      	b.n	80030be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4a21      	ldr	r2, [pc, #132]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6593      	str	r3, [r2, #88]	; 0x58
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030ac:	f7ff f8d6 	bl	800225c <HAL_PWREx_GetVoltageRange>
 80030b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c4:	d10b      	bne.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d913      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2ba0      	cmp	r3, #160	; 0xa0
 80030d0:	d902      	bls.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d2:	2302      	movs	r3, #2
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e00d      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e00a      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b7f      	cmp	r3, #127	; 0x7f
 80030e2:	d902      	bls.n	80030ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030e4:	2302      	movs	r3, #2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e004      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d101      	bne.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 020f 	bic.w	r2, r3, #15
 80030fc:	4909      	ldr	r1, [pc, #36]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d118      	bne.n	8003170 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d107      	bne.n	800315a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800314c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e005      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d003      	beq.n	8003188 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d003      	beq.n	800318e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003186:	e005      	b.n	8003194 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800318a:	613b      	str	r3, [r7, #16]
    break;
 800318c:	e005      	b.n	800319a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003190:	613b      	str	r3, [r7, #16]
    break;
 8003192:	e002      	b.n	800319a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
    break;
 8003198:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	3301      	adds	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	fb02 f203 	mul.w	r2, r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	0e5b      	lsrs	r3, r3, #25
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031da:	683b      	ldr	r3, [r7, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080099e4 	.word	0x080099e4
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003210:	2b00      	cmp	r3, #0
 8003212:	d040      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d02a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d825      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003220:	2b60      	cmp	r3, #96	; 0x60
 8003222:	d026      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003224:	2b60      	cmp	r3, #96	; 0x60
 8003226:	d821      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d006      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d81d      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d010      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003238:	e018      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	4a88      	ldr	r2, [pc, #544]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003246:	e015      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fb02 	bl	8003858 <RCCEx_PLLSAI1_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003258:	e00c      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3320      	adds	r3, #32
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fbed 	bl	8003a40 <RCCEx_PLLSAI2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326a:	e003      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	74fb      	strb	r3, [r7, #19]
      break;
 8003270:	e000      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327a:	4b79      	ldr	r3, [pc, #484]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003280:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003288:	4975      	ldr	r1, [pc, #468]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003290:	e001      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d047      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032aa:	d030      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b0:	d82a      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b6:	d02a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032bc:	d824      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c2:	d008      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d81e      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d010      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032d4:	e018      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d6:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a61      	ldr	r2, [pc, #388]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e2:	e015      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fab4 	bl	8003858 <RCCEx_PLLSAI1_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f4:	e00c      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3320      	adds	r3, #32
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fb9f 	bl	8003a40 <RCCEx_PLLSAI2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003306:	e003      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	74fb      	strb	r3, [r7, #19]
      break;
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800330e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003316:	4b52      	ldr	r3, [pc, #328]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	494e      	ldr	r1, [pc, #312]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800332c:	e001      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 809f 	beq.w	800347e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3a      	ldr	r2, [pc, #232]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003382:	f7fe fbf3 	bl	8001b6c <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003388:	e009      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe fbef 	bl	8001b6c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d902      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	74fb      	strb	r3, [r7, #19]
        break;
 800339c:	e005      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ef      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d15b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01f      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d019      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fbae 	bl	8001b6c <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	e00b      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe fbaa 	bl	8001b6c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d902      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	74fb      	strb	r3, [r7, #19]
            break;
 800342a:	e006      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ec      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10c      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	74bb      	strb	r3, [r7, #18]
 800345e:	e005      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346c:	7c7b      	ldrb	r3, [r7, #17]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4ba0      	ldr	r3, [pc, #640]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a9f      	ldr	r2, [pc, #636]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348a:	4b9a      	ldr	r3, [pc, #616]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f023 0203 	bic.w	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	4996      	ldr	r1, [pc, #600]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ac:	4b91      	ldr	r3, [pc, #580]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 020c 	bic.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	498e      	ldr	r1, [pc, #568]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ce:	4b89      	ldr	r3, [pc, #548]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	4985      	ldr	r1, [pc, #532]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f0:	4b80      	ldr	r3, [pc, #512]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	497d      	ldr	r1, [pc, #500]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003512:	4b78      	ldr	r3, [pc, #480]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	4974      	ldr	r1, [pc, #464]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003534:	4b6f      	ldr	r3, [pc, #444]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	496c      	ldr	r1, [pc, #432]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003564:	4963      	ldr	r1, [pc, #396]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003578:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003586:	495b      	ldr	r1, [pc, #364]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800359a:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	4952      	ldr	r1, [pc, #328]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035bc:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	494a      	ldr	r1, [pc, #296]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	4941      	ldr	r1, [pc, #260]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003600:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003606:	f023 0203 	bic.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360e:	4939      	ldr	r1, [pc, #228]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003622:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003630:	4930      	ldr	r1, [pc, #192]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003640:	d106      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364c:	60d3      	str	r3, [r2, #12]
 800364e:	e011      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003658:	d10c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f8f9 	bl	8003858 <RCCEx_PLLSAI1_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d04d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003688:	d108      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003696:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800369a:	e012      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a2:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ca:	d106      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d6:	60d3      	str	r3, [r2, #12]
 80036d8:	e020      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e2:	d109      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a02      	ldr	r2, [pc, #8]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	60d3      	str	r3, [r2, #12]
 80036f0:	e014      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8a5 	bl	8003858 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d028      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003736:	4947      	ldr	r1, [pc, #284]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003746:	d106      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003752:	60d3      	str	r3, [r2, #12]
 8003754:	e011      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800375a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375e:	d10c      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f876 	bl	8003858 <RCCEx_PLLSAI1_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01e      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003796:	492f      	ldr	r1, [pc, #188]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f851 	bl	8003858 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d6:	f023 0204 	bic.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	491c      	ldr	r1, [pc, #112]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037fa:	f023 0218 	bic.w	r2, r3, #24
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	4913      	ldr	r1, [pc, #76]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800381e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003828:	490a      	ldr	r1, [pc, #40]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003848:	7cbb      	ldrb	r3, [r7, #18]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d103      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d142      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e03f      	b.n	8003910 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d018      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0x72>
 8003898:	2b03      	cmp	r3, #3
 800389a:	d825      	bhi.n	80038e8 <RCCEx_PLLSAI1_Config+0x90>
 800389c:	2b01      	cmp	r3, #1
 800389e:	d002      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0x4e>
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d009      	beq.n	80038b8 <RCCEx_PLLSAI1_Config+0x60>
 80038a4:	e020      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b6:	e01a      	b.n	80038ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b8:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c8:	e013      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ca:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d6:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e6:	e006      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e004      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4949      	ldr	r1, [pc, #292]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 8086 	bne.w	8003a24 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003918:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a44      	ldr	r2, [pc, #272]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fe f922 	bl	8001b6c <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800392c:	f7fe f91e 	bl	8001b6c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
        break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003940:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ef      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d168      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	0211      	lsls	r1, r2, #8
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	06d2      	lsls	r2, r2, #27
 800396c:	4311      	orrs	r1, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6852      	ldr	r2, [r2, #4]
 8003972:	3a01      	subs	r2, #1
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	430a      	orrs	r2, r1
 8003978:	492d      	ldr	r1, [pc, #180]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e02d      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d115      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	0211      	lsls	r1, r2, #8
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6912      	ldr	r2, [r2, #16]
 8003998:	0852      	lsrs	r2, r2, #1
 800399a:	3a01      	subs	r2, #1
 800399c:	0552      	lsls	r2, r2, #21
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6852      	ldr	r2, [r2, #4]
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	430a      	orrs	r2, r1
 80039aa:	4921      	ldr	r1, [pc, #132]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	610b      	str	r3, [r1, #16]
 80039b0:	e014      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	0211      	lsls	r1, r2, #8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6952      	ldr	r2, [r2, #20]
 80039c4:	0852      	lsrs	r2, r2, #1
 80039c6:	3a01      	subs	r2, #1
 80039c8:	0652      	lsls	r2, r2, #25
 80039ca:	4311      	orrs	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6852      	ldr	r2, [r2, #4]
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4916      	ldr	r1, [pc, #88]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe f8c0 	bl	8001b6c <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f0:	f7fe f8bc 	bl	8001b6c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
          break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ef      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	07ff800f 	.word	0x07ff800f
 8003a38:	ff9f800f 	.word	0xff9f800f
 8003a3c:	f9ff800f 	.word	0xf9ff800f

08003a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a4e:	4b72      	ldr	r3, [pc, #456]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00e      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a5a:	4b6f      	ldr	r3, [pc, #444]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0203 	and.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d103      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d142      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e03f      	b.n	8003af8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d018      	beq.n	8003ab2 <RCCEx_PLLSAI2_Config+0x72>
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d825      	bhi.n	8003ad0 <RCCEx_PLLSAI2_Config+0x90>
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d002      	beq.n	8003a8e <RCCEx_PLLSAI2_Config+0x4e>
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d009      	beq.n	8003aa0 <RCCEx_PLLSAI2_Config+0x60>
 8003a8c:	e020      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a8e:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11d      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e01a      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa0:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab0:	e013      	b.n	8003ada <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003abe:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ace:	e006      	b.n	8003ade <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e004      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ae6:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4949      	ldr	r1, [pc, #292]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 8086 	bne.w	8003c0c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b00:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a44      	ldr	r2, [pc, #272]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fe f82e 	bl	8001b6c <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b12:	e009      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b14:	f7fe f82a 	bl	8001b6c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d902      	bls.n	8003b28 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	73fb      	strb	r3, [r7, #15]
        break;
 8003b26:	e005      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ef      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d168      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b40:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	4b35      	ldr	r3, [pc, #212]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	06d2      	lsls	r2, r2, #27
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6852      	ldr	r2, [r2, #4]
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	492d      	ldr	r1, [pc, #180]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	614b      	str	r3, [r1, #20]
 8003b66:	e02d      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d115      	bne.n	8003b9a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	0211      	lsls	r1, r2, #8
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6912      	ldr	r2, [r2, #16]
 8003b80:	0852      	lsrs	r2, r2, #1
 8003b82:	3a01      	subs	r2, #1
 8003b84:	0552      	lsls	r2, r2, #21
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6852      	ldr	r2, [r2, #4]
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	430a      	orrs	r2, r1
 8003b92:	4921      	ldr	r1, [pc, #132]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	614b      	str	r3, [r1, #20]
 8003b98:	e014      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	0211      	lsls	r1, r2, #8
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6952      	ldr	r2, [r2, #20]
 8003bac:	0852      	lsrs	r2, r2, #1
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	0652      	lsls	r2, r2, #25
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6852      	ldr	r2, [r2, #4]
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	4916      	ldr	r1, [pc, #88]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd ffcc 	bl	8001b6c <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd6:	e009      	b.n	8003bec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd8:	f7fd ffc8 	bl	8001b6c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bea:	e005      	b.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	4904      	ldr	r1, [pc, #16]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	07ff800f 	.word	0x07ff800f
 8003c20:	ff9f800f 	.word	0xff9f800f
 8003c24:	f9ff800f 	.word	0xf9ff800f

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e049      	b.n	8003cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f841 	bl	8003cd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fc6a 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e04f      	b.n	8003da4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d018      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d115      	bne.n	8003d8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d015      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d011      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	e008      	b.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e000      	b.n	8003da2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	00010007 	.word	0x00010007

08003dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e049      	b.n	8003e72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd fcae 	bl	8001754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fb98 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_PWM_Start+0x24>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e03c      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d109      	bne.n	8003eba <HAL_TIM_PWM_Start+0x3e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e02f      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d109      	bne.n	8003ed4 <HAL_TIM_PWM_Start+0x58>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e022      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d109      	bne.n	8003eee <HAL_TIM_PWM_Start+0x72>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e015      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x8c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e008      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e09c      	b.n	800405c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xb6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	e023      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_PWM_Start+0xc6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f40:	e01b      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xd6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	e013      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xe6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	e00b      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_PWM_Start+0xf6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	e003      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fe4c 	bl	8004c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a35      	ldr	r2, [pc, #212]	; (8004064 <HAL_TIM_PWM_Start+0x1e8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_TIM_PWM_Start+0x13e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_TIM_PWM_Start+0x1ec>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIM_PWM_Start+0x13e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a32      	ldr	r2, [pc, #200]	; (800406c <HAL_TIM_PWM_Start+0x1f0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_TIM_PWM_Start+0x13e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_TIM_PWM_Start+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIM_PWM_Start+0x13e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <HAL_TIM_PWM_Start+0x1f8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x142>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_PWM_Start+0x144>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	; (8004064 <HAL_TIM_PWM_Start+0x1e8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d018      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_TIM_PWM_Start+0x1fc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_TIM_PWM_Start+0x200>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_TIM_PWM_Start+0x204>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_TIM_PWM_Start+0x1ec>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIM_PWM_Start+0x19e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_TIM_PWM_Start+0x1f0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d115      	bne.n	8004046 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_TIM_PWM_Start+0x208>)
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d015      	beq.n	8004058 <HAL_TIM_PWM_Start+0x1dc>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d011      	beq.n	8004058 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004044:	e008      	b.n	8004058 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e000      	b.n	800405a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40013400 	.word	0x40013400
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400
 8004074:	40014800 	.word	0x40014800
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	00010007 	.word	0x00010007

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0202 	mvn.w	r2, #2
 80040b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa1a 	bl	8004504 <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa0c 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa1d 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0204 	mvn.w	r2, #4
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9f0 	bl	8004504 <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9e2 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f9f3 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b08      	cmp	r3, #8
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0208 	mvn.w	r2, #8
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9c6 	bl	8004504 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f9b8 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f9c9 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b10      	cmp	r3, #16
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0210 	mvn.w	r2, #16
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2208      	movs	r2, #8
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f99c 	bl	8004504 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f98e 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f99f 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0201 	mvn.w	r2, #1
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc ffbc 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fdac 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fd9f 	bl	8004da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f94d 	bl	800452c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d10e      	bne.n	80042be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d107      	bne.n	80042be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f06f 0220 	mvn.w	r2, #32
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fd5f 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e0ff      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b14      	cmp	r3, #20
 80042f2:	f200 80f0 	bhi.w	80044d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004351 	.word	0x08004351
 8004300:	080044d7 	.word	0x080044d7
 8004304:	080044d7 	.word	0x080044d7
 8004308:	080044d7 	.word	0x080044d7
 800430c:	08004391 	.word	0x08004391
 8004310:	080044d7 	.word	0x080044d7
 8004314:	080044d7 	.word	0x080044d7
 8004318:	080044d7 	.word	0x080044d7
 800431c:	080043d3 	.word	0x080043d3
 8004320:	080044d7 	.word	0x080044d7
 8004324:	080044d7 	.word	0x080044d7
 8004328:	080044d7 	.word	0x080044d7
 800432c:	08004413 	.word	0x08004413
 8004330:	080044d7 	.word	0x080044d7
 8004334:	080044d7 	.word	0x080044d7
 8004338:	080044d7 	.word	0x080044d7
 800433c:	08004455 	.word	0x08004455
 8004340:	080044d7 	.word	0x080044d7
 8004344:	080044d7 	.word	0x080044d7
 8004348:	080044d7 	.word	0x080044d7
 800434c:	08004495 	.word	0x08004495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f98c 	bl	8004674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0208 	orr.w	r2, r2, #8
 800436a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0204 	bic.w	r2, r2, #4
 800437a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	619a      	str	r2, [r3, #24]
      break;
 800438e:	e0a5      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f9fc 	bl	8004794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6999      	ldr	r1, [r3, #24]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	021a      	lsls	r2, r3, #8
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]
      break;
 80043d0:	e084      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa65 	bl	80048a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0208 	orr.w	r2, r2, #8
 80043ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0204 	bic.w	r2, r2, #4
 80043fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	61da      	str	r2, [r3, #28]
      break;
 8004410:	e064      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 facd 	bl	80049b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69d9      	ldr	r1, [r3, #28]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	61da      	str	r2, [r3, #28]
      break;
 8004452:	e043      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fb16 	bl	8004a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004492:	e023      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb5a 	bl	8004b54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044d4:	e002      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a40      	ldr	r2, [pc, #256]	; (8004654 <TIM_Base_SetConfig+0x114>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d00f      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3d      	ldr	r2, [pc, #244]	; (8004658 <TIM_Base_SetConfig+0x118>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00b      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3c      	ldr	r2, [pc, #240]	; (800465c <TIM_Base_SetConfig+0x11c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <TIM_Base_SetConfig+0x120>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3a      	ldr	r2, [pc, #232]	; (8004664 <TIM_Base_SetConfig+0x124>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d108      	bne.n	8004592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <TIM_Base_SetConfig+0x114>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2c      	ldr	r2, [pc, #176]	; (8004658 <TIM_Base_SetConfig+0x118>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2b      	ldr	r2, [pc, #172]	; (800465c <TIM_Base_SetConfig+0x11c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <TIM_Base_SetConfig+0x120>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <TIM_Base_SetConfig+0x124>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <TIM_Base_SetConfig+0x128>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a27      	ldr	r2, [pc, #156]	; (800466c <TIM_Base_SetConfig+0x12c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <TIM_Base_SetConfig+0x130>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0xf8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <TIM_Base_SetConfig+0x124>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0xf8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <TIM_Base_SetConfig+0x128>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0xf8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <TIM_Base_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0xf8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <TIM_Base_SetConfig+0x130>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40013400 	.word	0x40013400
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 0302 	bic.w	r3, r3, #2
 80046c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <TIM_OC1_SetConfig+0x10c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00f      	beq.n	80046f4 <TIM_OC1_SetConfig+0x80>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <TIM_OC1_SetConfig+0x110>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00b      	beq.n	80046f4 <TIM_OC1_SetConfig+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <TIM_OC1_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d007      	beq.n	80046f4 <TIM_OC1_SetConfig+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a29      	ldr	r2, [pc, #164]	; (800478c <TIM_OC1_SetConfig+0x118>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC1_SetConfig+0x80>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a28      	ldr	r2, [pc, #160]	; (8004790 <TIM_OC1_SetConfig+0x11c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10c      	bne.n	800470e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0308 	bic.w	r3, r3, #8
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <TIM_OC1_SetConfig+0x10c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_OC1_SetConfig+0xc2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <TIM_OC1_SetConfig+0x110>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_OC1_SetConfig+0xc2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <TIM_OC1_SetConfig+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_OC1_SetConfig+0xc2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a18      	ldr	r2, [pc, #96]	; (800478c <TIM_OC1_SetConfig+0x118>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC1_SetConfig+0xc2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a17      	ldr	r2, [pc, #92]	; (8004790 <TIM_OC1_SetConfig+0x11c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d111      	bne.n	800475a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800

08004794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0320 	bic.w	r3, r3, #32
 80047e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a28      	ldr	r2, [pc, #160]	; (8004894 <TIM_OC2_SetConfig+0x100>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC2_SetConfig+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <TIM_OC2_SetConfig+0x104>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10d      	bne.n	800481c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <TIM_OC2_SetConfig+0x100>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC2_SetConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <TIM_OC2_SetConfig+0x104>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC2_SetConfig+0xb0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <TIM_OC2_SetConfig+0x108>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC2_SetConfig+0xb0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <TIM_OC2_SetConfig+0x10c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC2_SetConfig+0xb0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_OC2_SetConfig+0x110>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d113      	bne.n	800486c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <TIM_OC3_SetConfig+0xfc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_OC3_SetConfig+0x6a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <TIM_OC3_SetConfig+0x100>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10d      	bne.n	800492e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <TIM_OC3_SetConfig+0xfc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_OC3_SetConfig+0xae>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <TIM_OC3_SetConfig+0x100>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_OC3_SetConfig+0xae>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <TIM_OC3_SetConfig+0x104>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_OC3_SetConfig+0xae>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <TIM_OC3_SetConfig+0x108>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_OC3_SetConfig+0xae>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <TIM_OC3_SetConfig+0x10c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d113      	bne.n	800497e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800495c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40013400 	.word	0x40013400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	031b      	lsls	r3, r3, #12
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <TIM_OC4_SetConfig+0xc0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <TIM_OC4_SetConfig+0x84>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <TIM_OC4_SetConfig+0xc4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_OC4_SetConfig+0x84>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <TIM_OC4_SetConfig+0xc8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_OC4_SetConfig+0x84>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <TIM_OC4_SetConfig+0xcc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC4_SetConfig+0x84>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <TIM_OC4_SetConfig+0xd0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d109      	bne.n	8004a50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ad0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <TIM_OC5_SetConfig+0xb4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_OC5_SetConfig+0x7a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <TIM_OC5_SetConfig+0xb8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_OC5_SetConfig+0x7a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <TIM_OC5_SetConfig+0xbc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_OC5_SetConfig+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <TIM_OC5_SetConfig+0xc0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_OC5_SetConfig+0x7a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <TIM_OC5_SetConfig+0xc4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d109      	bne.n	8004b1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40013400 	.word	0x40013400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <TIM_OC6_SetConfig+0xb8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_OC6_SetConfig+0x7c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <TIM_OC6_SetConfig+0xbc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_OC6_SetConfig+0x7c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <TIM_OC6_SetConfig+0xc0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_OC6_SetConfig+0x7c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <TIM_OC6_SetConfig+0xc4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC6_SetConfig+0x7c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <TIM_OC6_SetConfig+0xc8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d109      	bne.n	8004be4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800

08004c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2201      	movs	r2, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1a      	ldr	r2, [r3, #32]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1a      	ldr	r2, [r3, #32]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e068      	b.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d018      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e042      	b.n	8004e50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fc fe09 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2224      	movs	r2, #36	; 0x24
 8004de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fc52 	bl	80056a4 <UART_SetConfig>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 ff0e 	bl	8005c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 ff95 	bl	8005d78 <UART_CheckIdleState>
 8004e4e:	4603      	mov	r3, r0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	f040 8084 	bne.w	8004f7c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Transmit+0x28>
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e07c      	b.n	8004f7e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Transmit+0x3a>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e075      	b.n	8004f7e <HAL_UART_Transmit+0x126>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2221      	movs	r2, #33	; 0x21
 8004ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eaa:	f7fc fe5f 	bl	8001b6c <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	88fa      	ldrh	r2, [r7, #6]
 8004eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d108      	bne.n	8004edc <HAL_UART_Transmit+0x84>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d104      	bne.n	8004edc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	e003      	b.n	8004ee4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004eec:	e02d      	b.n	8004f4a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 ff88 	bl	8005e0e <UART_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e03a      	b.n	8004f7e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	3302      	adds	r3, #2
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e008      	b.n	8004f38 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	3301      	adds	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1cb      	bne.n	8004eee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 ff54 	bl	8005e0e <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f7c:	2302      	movs	r3, #2
  }
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d142      	bne.n	8005026 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_UART_Receive_IT+0x24>
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e03b      	b.n	8005028 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Receive_IT+0x36>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e034      	b.n	8005028 <HAL_UART_Receive_IT+0xa0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_UART_Receive_IT+0xa8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01f      	beq.n	8005016 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	461a      	mov	r2, r3
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 ffbf 	bl	8005fa0 <UART_Start_Receive_IT>
 8005022:	4603      	mov	r3, r0
 8005024:	e000      	b.n	8005028 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40008000 	.word	0x40008000

08005034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b0ba      	sub	sp, #232	; 0xe8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800505a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800505e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005062:	4013      	ands	r3, r2
 8005064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11b      	bne.n	80050a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 82d6 	beq.w	800564a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
      }
      return;
 80050a6:	e2d0      	b.n	800564a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80050a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 811f 	beq.w	80052f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80050b6:	4b8b      	ldr	r3, [pc, #556]	; (80052e4 <HAL_UART_IRQHandler+0x2b0>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_UART_IRQHandler+0x2b4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8112 	beq.w	80052f0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d011      	beq.n	80050fc <HAL_UART_IRQHandler+0xc8>
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d011      	beq.n	800512c <HAL_UART_IRQHandler+0xf8>
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2202      	movs	r2, #2
 800511a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d011      	beq.n	800515c <HAL_UART_IRQHandler+0x128>
 8005138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2204      	movs	r2, #4
 800514a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005152:	f043 0202 	orr.w	r2, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d017      	beq.n	8005198 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005174:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005178:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <HAL_UART_IRQHandler+0x2b0>)
 800517a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2208      	movs	r2, #8
 8005186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518e:	f043 0208 	orr.w	r2, r3, #8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_UART_IRQHandler+0x196>
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 823c 	beq.w	800564e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d105      	bne.n	80051fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d005      	beq.n	800522e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800522a:	2b00      	cmp	r3, #0
 800522c:	d04f      	beq.n	80052ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 ffe0 	bl	80061f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d141      	bne.n	80052c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800526e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800527a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1d9      	bne.n	8005242 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d013      	beq.n	80052be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <HAL_UART_IRQHandler+0x2b8>)
 800529c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fc fdd0 	bl	8001e48 <HAL_DMA_Abort_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d017      	beq.n	80052de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80052b8:	4610      	mov	r0, r2
 80052ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	e00f      	b.n	80052de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9da 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	e00b      	b.n	80052de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f9d6 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	e007      	b.n	80052de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9d2 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80052dc:	e1b7      	b.n	800564e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052de:	bf00      	nop
    return;
 80052e0:	e1b5      	b.n	800564e <HAL_UART_IRQHandler+0x61a>
 80052e2:	bf00      	nop
 80052e4:	10000001 	.word	0x10000001
 80052e8:	04000120 	.word	0x04000120
 80052ec:	080062c1 	.word	0x080062c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 814a 	bne.w	800558e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8143 	beq.w	800558e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 813c 	beq.w	800558e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2210      	movs	r2, #16
 800531c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	f040 80b5 	bne.w	8005498 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800533a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8187 	beq.w	8005652 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800534a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800534e:	429a      	cmp	r2, r3
 8005350:	f080 817f 	bcs.w	8005652 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800535a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 8086 	bne.w	800547c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800539a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800539e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1da      	bne.n	8005370 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e1      	bne.n	80053ba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800541a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800541c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e3      	bne.n	80053f6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800545e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005460:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800546c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e4      	bne.n	800543c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc fc8a 	bl	8001d90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005488:	b29b      	uxth	r3, r3
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	b29b      	uxth	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8fb 	bl	800568c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005496:	e0dc      	b.n	8005652 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80ce 	beq.w	8005656 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80054ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80c9 	beq.w	8005656 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e4      	bne.n	80054c4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	623b      	str	r3, [r7, #32]
   return(result);
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005522:	633a      	str	r2, [r7, #48]	; 0x30
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e1      	bne.n	80054fa <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60fb      	str	r3, [r7, #12]
   return(result);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	617b      	str	r3, [r7, #20]
   return(result);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e4      	bne.n	800554a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f880 	bl	800568c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800558c:	e063      	b.n	8005656 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00e      	beq.n	80055b8 <HAL_UART_IRQHandler+0x584>
 800559a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fb2b 	bl	8006c0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055b6:	e051      	b.n	800565c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d014      	beq.n	80055ee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d105      	bne.n	80055dc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d03a      	beq.n	800565a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
    }
    return;
 80055ec:	e035      	b.n	800565a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_UART_IRQHandler+0x5da>
 80055fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fe70 	bl	80062ec <UART_EndTransmit_IT>
    return;
 800560c:	e026      	b.n	800565c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_UART_IRQHandler+0x5fa>
 800561a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fb04 	bl	8006c34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800562c:	e016      	b.n	800565c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_UART_IRQHandler+0x628>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	2b00      	cmp	r3, #0
 8005640:	da0c      	bge.n	800565c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 faec 	bl	8006c20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005648:	e008      	b.n	800565c <HAL_UART_IRQHandler+0x628>
      return;
 800564a:	bf00      	nop
 800564c:	e006      	b.n	800565c <HAL_UART_IRQHandler+0x628>
    return;
 800564e:	bf00      	nop
 8005650:	e004      	b.n	800565c <HAL_UART_IRQHandler+0x628>
      return;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_UART_IRQHandler+0x628>
      return;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_UART_IRQHandler+0x628>
    return;
 800565a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800565c:	37e8      	adds	r7, #232	; 0xe8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop

08005664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b5b0      	push	{r4, r5, r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4bb1      	ldr	r3, [pc, #708]	; (8005994 <UART_SetConfig+0x2f0>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4aa6      	ldr	r2, [pc, #664]	; (8005998 <UART_SetConfig+0x2f4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	4313      	orrs	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005716:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	69f9      	ldr	r1, [r7, #28]
 8005720:	430b      	orrs	r3, r1
 8005722:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	f023 010f 	bic.w	r1, r3, #15
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a97      	ldr	r2, [pc, #604]	; (800599c <UART_SetConfig+0x2f8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d120      	bne.n	8005786 <UART_SetConfig+0xe2>
 8005744:	4b96      	ldr	r3, [pc, #600]	; (80059a0 <UART_SetConfig+0x2fc>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b03      	cmp	r3, #3
 8005750:	d816      	bhi.n	8005780 <UART_SetConfig+0xdc>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0xb4>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	08005775 	.word	0x08005775
 8005760:	0800576f 	.word	0x0800576f
 8005764:	0800577b 	.word	0x0800577b
 8005768:	2301      	movs	r3, #1
 800576a:	76fb      	strb	r3, [r7, #27]
 800576c:	e0e7      	b.n	800593e <UART_SetConfig+0x29a>
 800576e:	2302      	movs	r3, #2
 8005770:	76fb      	strb	r3, [r7, #27]
 8005772:	e0e4      	b.n	800593e <UART_SetConfig+0x29a>
 8005774:	2304      	movs	r3, #4
 8005776:	76fb      	strb	r3, [r7, #27]
 8005778:	e0e1      	b.n	800593e <UART_SetConfig+0x29a>
 800577a:	2308      	movs	r3, #8
 800577c:	76fb      	strb	r3, [r7, #27]
 800577e:	e0de      	b.n	800593e <UART_SetConfig+0x29a>
 8005780:	2310      	movs	r3, #16
 8005782:	76fb      	strb	r3, [r7, #27]
 8005784:	e0db      	b.n	800593e <UART_SetConfig+0x29a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a86      	ldr	r2, [pc, #536]	; (80059a4 <UART_SetConfig+0x300>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d132      	bne.n	80057f6 <UART_SetConfig+0x152>
 8005790:	4b83      	ldr	r3, [pc, #524]	; (80059a0 <UART_SetConfig+0x2fc>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d828      	bhi.n	80057f0 <UART_SetConfig+0x14c>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x100>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057f1 	.word	0x080057f1
 80057ac:	080057f1 	.word	0x080057f1
 80057b0:	080057f1 	.word	0x080057f1
 80057b4:	080057e5 	.word	0x080057e5
 80057b8:	080057f1 	.word	0x080057f1
 80057bc:	080057f1 	.word	0x080057f1
 80057c0:	080057f1 	.word	0x080057f1
 80057c4:	080057df 	.word	0x080057df
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	080057eb 	.word	0x080057eb
 80057d8:	2300      	movs	r3, #0
 80057da:	76fb      	strb	r3, [r7, #27]
 80057dc:	e0af      	b.n	800593e <UART_SetConfig+0x29a>
 80057de:	2302      	movs	r3, #2
 80057e0:	76fb      	strb	r3, [r7, #27]
 80057e2:	e0ac      	b.n	800593e <UART_SetConfig+0x29a>
 80057e4:	2304      	movs	r3, #4
 80057e6:	76fb      	strb	r3, [r7, #27]
 80057e8:	e0a9      	b.n	800593e <UART_SetConfig+0x29a>
 80057ea:	2308      	movs	r3, #8
 80057ec:	76fb      	strb	r3, [r7, #27]
 80057ee:	e0a6      	b.n	800593e <UART_SetConfig+0x29a>
 80057f0:	2310      	movs	r3, #16
 80057f2:	76fb      	strb	r3, [r7, #27]
 80057f4:	e0a3      	b.n	800593e <UART_SetConfig+0x29a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6b      	ldr	r2, [pc, #428]	; (80059a8 <UART_SetConfig+0x304>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d120      	bne.n	8005842 <UART_SetConfig+0x19e>
 8005800:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <UART_SetConfig+0x2fc>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800580a:	2b30      	cmp	r3, #48	; 0x30
 800580c:	d013      	beq.n	8005836 <UART_SetConfig+0x192>
 800580e:	2b30      	cmp	r3, #48	; 0x30
 8005810:	d814      	bhi.n	800583c <UART_SetConfig+0x198>
 8005812:	2b20      	cmp	r3, #32
 8005814:	d009      	beq.n	800582a <UART_SetConfig+0x186>
 8005816:	2b20      	cmp	r3, #32
 8005818:	d810      	bhi.n	800583c <UART_SetConfig+0x198>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <UART_SetConfig+0x180>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d006      	beq.n	8005830 <UART_SetConfig+0x18c>
 8005822:	e00b      	b.n	800583c <UART_SetConfig+0x198>
 8005824:	2300      	movs	r3, #0
 8005826:	76fb      	strb	r3, [r7, #27]
 8005828:	e089      	b.n	800593e <UART_SetConfig+0x29a>
 800582a:	2302      	movs	r3, #2
 800582c:	76fb      	strb	r3, [r7, #27]
 800582e:	e086      	b.n	800593e <UART_SetConfig+0x29a>
 8005830:	2304      	movs	r3, #4
 8005832:	76fb      	strb	r3, [r7, #27]
 8005834:	e083      	b.n	800593e <UART_SetConfig+0x29a>
 8005836:	2308      	movs	r3, #8
 8005838:	76fb      	strb	r3, [r7, #27]
 800583a:	e080      	b.n	800593e <UART_SetConfig+0x29a>
 800583c:	2310      	movs	r3, #16
 800583e:	76fb      	strb	r3, [r7, #27]
 8005840:	e07d      	b.n	800593e <UART_SetConfig+0x29a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a59      	ldr	r2, [pc, #356]	; (80059ac <UART_SetConfig+0x308>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d120      	bne.n	800588e <UART_SetConfig+0x1ea>
 800584c:	4b54      	ldr	r3, [pc, #336]	; (80059a0 <UART_SetConfig+0x2fc>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005856:	2bc0      	cmp	r3, #192	; 0xc0
 8005858:	d013      	beq.n	8005882 <UART_SetConfig+0x1de>
 800585a:	2bc0      	cmp	r3, #192	; 0xc0
 800585c:	d814      	bhi.n	8005888 <UART_SetConfig+0x1e4>
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d009      	beq.n	8005876 <UART_SetConfig+0x1d2>
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d810      	bhi.n	8005888 <UART_SetConfig+0x1e4>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <UART_SetConfig+0x1cc>
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d006      	beq.n	800587c <UART_SetConfig+0x1d8>
 800586e:	e00b      	b.n	8005888 <UART_SetConfig+0x1e4>
 8005870:	2300      	movs	r3, #0
 8005872:	76fb      	strb	r3, [r7, #27]
 8005874:	e063      	b.n	800593e <UART_SetConfig+0x29a>
 8005876:	2302      	movs	r3, #2
 8005878:	76fb      	strb	r3, [r7, #27]
 800587a:	e060      	b.n	800593e <UART_SetConfig+0x29a>
 800587c:	2304      	movs	r3, #4
 800587e:	76fb      	strb	r3, [r7, #27]
 8005880:	e05d      	b.n	800593e <UART_SetConfig+0x29a>
 8005882:	2308      	movs	r3, #8
 8005884:	76fb      	strb	r3, [r7, #27]
 8005886:	e05a      	b.n	800593e <UART_SetConfig+0x29a>
 8005888:	2310      	movs	r3, #16
 800588a:	76fb      	strb	r3, [r7, #27]
 800588c:	e057      	b.n	800593e <UART_SetConfig+0x29a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a47      	ldr	r2, [pc, #284]	; (80059b0 <UART_SetConfig+0x30c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d125      	bne.n	80058e4 <UART_SetConfig+0x240>
 8005898:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <UART_SetConfig+0x2fc>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a6:	d017      	beq.n	80058d8 <UART_SetConfig+0x234>
 80058a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ac:	d817      	bhi.n	80058de <UART_SetConfig+0x23a>
 80058ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b2:	d00b      	beq.n	80058cc <UART_SetConfig+0x228>
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d811      	bhi.n	80058de <UART_SetConfig+0x23a>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <UART_SetConfig+0x222>
 80058be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c2:	d006      	beq.n	80058d2 <UART_SetConfig+0x22e>
 80058c4:	e00b      	b.n	80058de <UART_SetConfig+0x23a>
 80058c6:	2300      	movs	r3, #0
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e038      	b.n	800593e <UART_SetConfig+0x29a>
 80058cc:	2302      	movs	r3, #2
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e035      	b.n	800593e <UART_SetConfig+0x29a>
 80058d2:	2304      	movs	r3, #4
 80058d4:	76fb      	strb	r3, [r7, #27]
 80058d6:	e032      	b.n	800593e <UART_SetConfig+0x29a>
 80058d8:	2308      	movs	r3, #8
 80058da:	76fb      	strb	r3, [r7, #27]
 80058dc:	e02f      	b.n	800593e <UART_SetConfig+0x29a>
 80058de:	2310      	movs	r3, #16
 80058e0:	76fb      	strb	r3, [r7, #27]
 80058e2:	e02c      	b.n	800593e <UART_SetConfig+0x29a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <UART_SetConfig+0x2f4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d125      	bne.n	800593a <UART_SetConfig+0x296>
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <UART_SetConfig+0x2fc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058fc:	d017      	beq.n	800592e <UART_SetConfig+0x28a>
 80058fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005902:	d817      	bhi.n	8005934 <UART_SetConfig+0x290>
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005908:	d00b      	beq.n	8005922 <UART_SetConfig+0x27e>
 800590a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590e:	d811      	bhi.n	8005934 <UART_SetConfig+0x290>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <UART_SetConfig+0x278>
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d006      	beq.n	8005928 <UART_SetConfig+0x284>
 800591a:	e00b      	b.n	8005934 <UART_SetConfig+0x290>
 800591c:	2300      	movs	r3, #0
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	e00d      	b.n	800593e <UART_SetConfig+0x29a>
 8005922:	2302      	movs	r3, #2
 8005924:	76fb      	strb	r3, [r7, #27]
 8005926:	e00a      	b.n	800593e <UART_SetConfig+0x29a>
 8005928:	2304      	movs	r3, #4
 800592a:	76fb      	strb	r3, [r7, #27]
 800592c:	e007      	b.n	800593e <UART_SetConfig+0x29a>
 800592e:	2308      	movs	r3, #8
 8005930:	76fb      	strb	r3, [r7, #27]
 8005932:	e004      	b.n	800593e <UART_SetConfig+0x29a>
 8005934:	2310      	movs	r3, #16
 8005936:	76fb      	strb	r3, [r7, #27]
 8005938:	e001      	b.n	800593e <UART_SetConfig+0x29a>
 800593a:	2310      	movs	r3, #16
 800593c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <UART_SetConfig+0x2f4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 809f 	bne.w	8005a88 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800594a:	7efb      	ldrb	r3, [r7, #27]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d837      	bhi.n	80059c0 <UART_SetConfig+0x31c>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x2b4>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800597d 	.word	0x0800597d
 800595c:	080059c1 	.word	0x080059c1
 8005960:	08005985 	.word	0x08005985
 8005964:	080059c1 	.word	0x080059c1
 8005968:	0800598b 	.word	0x0800598b
 800596c:	080059c1 	.word	0x080059c1
 8005970:	080059c1 	.word	0x080059c1
 8005974:	080059c1 	.word	0x080059c1
 8005978:	080059b9 	.word	0x080059b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fd fb1c 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005980:	6178      	str	r0, [r7, #20]
        break;
 8005982:	e022      	b.n	80059ca <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <UART_SetConfig+0x310>)
 8005986:	617b      	str	r3, [r7, #20]
        break;
 8005988:	e01f      	b.n	80059ca <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fd fa7d 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 800598e:	6178      	str	r0, [r7, #20]
        break;
 8005990:	e01b      	b.n	80059ca <UART_SetConfig+0x326>
 8005992:	bf00      	nop
 8005994:	cfff69f3 	.word	0xcfff69f3
 8005998:	40008000 	.word	0x40008000
 800599c:	40013800 	.word	0x40013800
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40004400 	.word	0x40004400
 80059a8:	40004800 	.word	0x40004800
 80059ac:	40004c00 	.word	0x40004c00
 80059b0:	40005000 	.word	0x40005000
 80059b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059bc:	617b      	str	r3, [r7, #20]
        break;
 80059be:	e004      	b.n	80059ca <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	76bb      	strb	r3, [r7, #26]
        break;
 80059c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8119 	beq.w	8005c04 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	4a95      	ldr	r2, [pc, #596]	; (8005c2c <UART_SetConfig+0x588>)
 80059d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059dc:	461a      	mov	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d305      	bcc.n	8005a02 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d902      	bls.n	8005a08 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	76bb      	strb	r3, [r7, #26]
 8005a06:	e0fd      	b.n	8005c04 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	4a85      	ldr	r2, [pc, #532]	; (8005c2c <UART_SetConfig+0x588>)
 8005a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	f7fb f8da 	bl	8000bd8 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	020b      	lsls	r3, r1, #8
 8005a36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a3a:	0202      	lsls	r2, r0, #8
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	6849      	ldr	r1, [r1, #4]
 8005a40:	0849      	lsrs	r1, r1, #1
 8005a42:	4608      	mov	r0, r1
 8005a44:	f04f 0100 	mov.w	r1, #0
 8005a48:	1814      	adds	r4, r2, r0
 8005a4a:	eb43 0501 	adc.w	r5, r3, r1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fb f8bc 	bl	8000bd8 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d308      	bcc.n	8005a82 <UART_SetConfig+0x3de>
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d204      	bcs.n	8005a82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	e0c0      	b.n	8005c04 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	76bb      	strb	r3, [r7, #26]
 8005a86:	e0bd      	b.n	8005c04 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	d164      	bne.n	8005b5c <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005a92:	7efb      	ldrb	r3, [r7, #27]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d828      	bhi.n	8005aea <UART_SetConfig+0x446>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x3fc>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005adb 	.word	0x08005adb
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7fd fa78 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005ac8:	6178      	str	r0, [r7, #20]
        break;
 8005aca:	e013      	b.n	8005af4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fd fa8a 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	6178      	str	r0, [r7, #20]
        break;
 8005ad2:	e00f      	b.n	8005af4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <UART_SetConfig+0x58c>)
 8005ad6:	617b      	str	r3, [r7, #20]
        break;
 8005ad8:	e00c      	b.n	8005af4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fd f9d5 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8005ade:	6178      	str	r0, [r7, #20]
        break;
 8005ae0:	e008      	b.n	8005af4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	617b      	str	r3, [r7, #20]
        break;
 8005ae8:	e004      	b.n	8005af4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	76bb      	strb	r3, [r7, #26]
        break;
 8005af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8084 	beq.w	8005c04 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <UART_SetConfig+0x588>)
 8005b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b06:	461a      	mov	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0e:	005a      	lsls	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b0f      	cmp	r3, #15
 8005b26:	d916      	bls.n	8005b56 <UART_SetConfig+0x4b2>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d212      	bcs.n	8005b56 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f023 030f 	bic.w	r3, r3, #15
 8005b38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	89fa      	ldrh	r2, [r7, #14]
 8005b52:	60da      	str	r2, [r3, #12]
 8005b54:	e056      	b.n	8005c04 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	76bb      	strb	r3, [r7, #26]
 8005b5a:	e053      	b.n	8005c04 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b5c:	7efb      	ldrb	r3, [r7, #27]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d827      	bhi.n	8005bb2 <UART_SetConfig+0x50e>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0x4c4>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005b9d 	.word	0x08005b9d
 8005b74:	08005bb3 	.word	0x08005bb3
 8005b78:	08005ba3 	.word	0x08005ba3
 8005b7c:	08005bb3 	.word	0x08005bb3
 8005b80:	08005bb3 	.word	0x08005bb3
 8005b84:	08005bb3 	.word	0x08005bb3
 8005b88:	08005bab 	.word	0x08005bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fd fa14 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005b90:	6178      	str	r0, [r7, #20]
        break;
 8005b92:	e013      	b.n	8005bbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fd fa26 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 8005b98:	6178      	str	r0, [r7, #20]
        break;
 8005b9a:	e00f      	b.n	8005bbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <UART_SetConfig+0x58c>)
 8005b9e:	617b      	str	r3, [r7, #20]
        break;
 8005ba0:	e00c      	b.n	8005bbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba2:	f7fd f971 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8005ba6:	6178      	str	r0, [r7, #20]
        break;
 8005ba8:	e008      	b.n	8005bbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	617b      	str	r3, [r7, #20]
        break;
 8005bb0:	e004      	b.n	8005bbc <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	76bb      	strb	r3, [r7, #26]
        break;
 8005bba:	bf00      	nop
    }

    if (pclk != 0U)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d020      	beq.n	8005c04 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <UART_SetConfig+0x588>)
 8005bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b0f      	cmp	r3, #15
 8005bea:	d909      	bls.n	8005c00 <UART_SetConfig+0x55c>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf2:	d205      	bcs.n	8005c00 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	e001      	b.n	8005c04 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c20:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bdb0      	pop	{r4, r5, r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08009a14 	.word	0x08009a14
 8005c30:	00f42400 	.word	0x00f42400

08005c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d32:	d10a      	bne.n	8005d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d88:	f7fb fef0 	bl	8001b6c <HAL_GetTick>
 8005d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d10e      	bne.n	8005dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f82f 	bl	8005e0e <UART_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e025      	b.n	8005e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d10e      	bne.n	8005de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f819 	bl	8005e0e <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00f      	b.n	8005e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b09c      	sub	sp, #112	; 0x70
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1e:	e0a9      	b.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	f000 80a5 	beq.w	8005f74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fb fe9f 	bl	8001b6c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d140      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e54:	667b      	str	r3, [r7, #100]	; 0x64
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e6      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	663b      	str	r3, [r7, #96]	; 0x60
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e5      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e069      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d051      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ede:	d149      	bne.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e6      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f3c:	623a      	str	r2, [r7, #32]
 8005f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e5      	bne.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e010      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	f43f af46 	beq.w	8005e20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3770      	adds	r7, #112	; 0x70
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b0a3      	sub	sp, #140	; 0x8c
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d10e      	bne.n	8005ff2 <UART_Start_Receive_IT+0x52>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <UART_Start_Receive_IT+0x48>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fe2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fe6:	e02d      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	22ff      	movs	r2, #255	; 0xff
 8005fec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ff0:	e028      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <UART_Start_Receive_IT+0x76>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <UART_Start_Receive_IT+0x6c>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800600a:	e01b      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	227f      	movs	r2, #127	; 0x7f
 8006010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006014:	e016      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601e:	d10d      	bne.n	800603c <UART_Start_Receive_IT+0x9c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <UART_Start_Receive_IT+0x92>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	227f      	movs	r2, #127	; 0x7f
 800602c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006030:	e008      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	223f      	movs	r2, #63	; 0x3f
 8006036:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800603a:	e003      	b.n	8006044 <UART_Start_Receive_IT+0xa4>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2222      	movs	r2, #34	; 0x22
 8006050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3308      	adds	r3, #8
 800605a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006078:	673a      	str	r2, [r7, #112]	; 0x70
 800607a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800607e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e3      	bne.n	8006054 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006094:	d153      	bne.n	800613e <UART_Start_Receive_IT+0x19e>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800609c:	88fa      	ldrh	r2, [r7, #6]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d34d      	bcc.n	800613e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060aa:	d107      	bne.n	80060bc <UART_Start_Receive_IT+0x11c>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a4b      	ldr	r2, [pc, #300]	; (80061e4 <UART_Start_Receive_IT+0x244>)
 80060b8:	671a      	str	r2, [r3, #112]	; 0x70
 80060ba:	e002      	b.n	80060c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a4a      	ldr	r2, [pc, #296]	; (80061e8 <UART_Start_Receive_IT+0x248>)
 80060c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01a      	beq.n	8006108 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e4      	bne.n	80060d2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006128:	64ba      	str	r2, [r7, #72]	; 0x48
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_Start_Receive_IT+0x168>
 800613c:	e04a      	b.n	80061d4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d107      	bne.n	8006158 <UART_Start_Receive_IT+0x1b8>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <UART_Start_Receive_IT+0x24c>)
 8006154:	671a      	str	r2, [r3, #112]	; 0x70
 8006156:	e002      	b.n	800615e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <UART_Start_Receive_IT+0x250>)
 800615c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d019      	beq.n	80061a2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006182:	677b      	str	r3, [r7, #116]	; 0x74
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
 800618e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UART_Start_Receive_IT+0x1ce>
 80061a0:	e018      	b.n	80061d4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	613b      	str	r3, [r7, #16]
   return(result);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f043 0320 	orr.w	r3, r3, #32
 80061b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69f9      	ldr	r1, [r7, #28]
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e6      	bne.n	80061a2 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	378c      	adds	r7, #140	; 0x8c
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	08006909 	.word	0x08006909
 80061e8:	0800660d 	.word	0x0800660d
 80061ec:	080064a7 	.word	0x080064a7
 80061f0:	08006343 	.word	0x08006343

080061f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b095      	sub	sp, #84	; 0x54
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621a:	643b      	str	r3, [r7, #64]	; 0x40
 800621c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	61fb      	str	r3, [r7, #28]
   return(result);
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	64bb      	str	r3, [r7, #72]	; 0x48
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e3      	bne.n	800622e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d118      	bne.n	80062a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	60bb      	str	r3, [r7, #8]
   return(result);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	647b      	str	r3, [r7, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	613b      	str	r3, [r7, #16]
   return(result);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80062b4:	bf00      	nop
 80062b6:	3754      	adds	r7, #84	; 0x54
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff f9ca 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60bb      	str	r3, [r7, #8]
   return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	613b      	str	r3, [r7, #16]
   return(result);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff f995 	bl	8005664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800633a:	bf00      	nop
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b096      	sub	sp, #88	; 0x58
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006350:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	2b22      	cmp	r3, #34	; 0x22
 800635c:	f040 8095 	bne.w	800648a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006366:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800636a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800636e:	b2d9      	uxtb	r1, r3
 8006370:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006374:	b2da      	uxtb	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	400a      	ands	r2, r1
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d17a      	bne.n	800649e <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063bc:	653b      	str	r3, [r7, #80]	; 0x50
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c6:	647b      	str	r3, [r7, #68]	; 0x44
 80063c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063fa:	633a      	str	r2, [r7, #48]	; 0x30
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d12e      	bne.n	8006482 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	60fb      	str	r3, [r7, #12]
   return(result);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0310 	bic.w	r3, r3, #16
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	69b9      	ldr	r1, [r7, #24]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	617b      	str	r3, [r7, #20]
   return(result);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b10      	cmp	r3, #16
 8006468:	d103      	bne.n	8006472 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff f906 	bl	800568c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006480:	e00d      	b.n	800649e <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fa fe4e 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 8006488:	e009      	b.n	800649e <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	8b1b      	ldrh	r3, [r3, #24]
 8006490:	b29a      	uxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	b292      	uxth	r2, r2
 800649c:	831a      	strh	r2, [r3, #24]
}
 800649e:	bf00      	nop
 80064a0:	3758      	adds	r7, #88	; 0x58
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b096      	sub	sp, #88	; 0x58
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	2b22      	cmp	r3, #34	; 0x22
 80064c0:	f040 8095 	bne.w	80065ee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80064d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80064d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064dc:	4013      	ands	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d17a      	bne.n	8006602 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	643b      	str	r3, [r7, #64]	; 0x40
 800652c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	61fb      	str	r3, [r7, #28]
   return(result);
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800655e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d12e      	bne.n	80065e6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60bb      	str	r3, [r7, #8]
   return(result);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6979      	ldr	r1, [r7, #20]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d103      	bne.n	80065d6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2210      	movs	r2, #16
 80065d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff f854 	bl	800568c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065e4:	e00d      	b.n	8006602 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fd9c 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 80065ec:	e009      	b.n	8006602 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	8b1b      	ldrh	r3, [r3, #24]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0208 	orr.w	r2, r2, #8
 80065fe:	b292      	uxth	r2, r2
 8006600:	831a      	strh	r2, [r3, #24]
}
 8006602:	bf00      	nop
 8006604:	3758      	adds	r7, #88	; 0x58
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b0a6      	sub	sp, #152	; 0x98
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800661a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	2b22      	cmp	r3, #34	; 0x22
 8006644:	f040 814f 	bne.w	80068e6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800664e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006652:	e0f6      	b.n	8006842 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800665a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800665e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006662:	b2d9      	uxtb	r1, r3
 8006664:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	400a      	ands	r2, r1
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800669a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d053      	beq.n	800674e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d011      	beq.n	80066d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80066b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2201      	movs	r2, #1
 80066c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066cc:	f043 0201 	orr.w	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d011      	beq.n	8006706 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80066e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2202      	movs	r2, #2
 80066f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fc:	f043 0204 	orr.w	r2, r3, #4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d011      	beq.n	8006736 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006712:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2204      	movs	r2, #4
 8006724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672c:	f043 0202 	orr.w	r2, r3, #2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d006      	beq.n	800674e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fe ff99 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d173      	bne.n	8006842 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800676a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800677c:	66bb      	str	r3, [r7, #104]	; 0x68
 800677e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006782:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800678a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e4      	bne.n	800675a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80067b4:	657a      	str	r2, [r7, #84]	; 0x54
 80067b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e3      	bne.n	8006790 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d12e      	bne.n	800683c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	f023 0310 	bic.w	r3, r3, #16
 80067f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006802:	643b      	str	r3, [r7, #64]	; 0x40
 8006804:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e6      	bne.n	80067e4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b10      	cmp	r3, #16
 8006822:	d103      	bne.n	800682c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2210      	movs	r2, #16
 800682a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fe ff29 	bl	800568c <HAL_UARTEx_RxEventCallback>
 800683a:	e002      	b.n	8006842 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fa fc71 	bl	8001124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006842:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800684a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	f47f aefe 	bne.w	8006654 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800685e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006862:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006866:	2b00      	cmp	r3, #0
 8006868:	d047      	beq.n	80068fa <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006870:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006874:	429a      	cmp	r2, r3
 8006876:	d240      	bcs.n	80068fa <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800688e:	673b      	str	r3, [r7, #112]	; 0x70
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a15      	ldr	r2, [pc, #84]	; (8006904 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 80068b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f043 0320 	orr.w	r3, r3, #32
 80068c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	613b      	str	r3, [r7, #16]
   return(result);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068e4:	e009      	b.n	80068fa <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	8b1b      	ldrh	r3, [r3, #24]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	b292      	uxth	r2, r2
 80068f8:	831a      	strh	r2, [r3, #24]
}
 80068fa:	bf00      	nop
 80068fc:	3798      	adds	r7, #152	; 0x98
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006343 	.word	0x08006343

08006908 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b0a8      	sub	sp, #160	; 0xa0
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006916:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	2b22      	cmp	r3, #34	; 0x22
 8006940:	f040 8153 	bne.w	8006bea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800694a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800694e:	e0fa      	b.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006956:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006962:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006966:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800696a:	4013      	ands	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006972:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	1c9a      	adds	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800699a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d053      	beq.n	8006a4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d011      	beq.n	80069d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80069b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2201      	movs	r2, #1
 80069c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80069e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2202      	movs	r2, #2
 80069f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	f043 0204 	orr.w	r2, r3, #4
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2204      	movs	r2, #4
 8006a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a2c:	f043 0202 	orr.w	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fe fe19 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d175      	bne.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a7e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e4      	bne.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e1      	bne.n	8006a90 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12e      	bne.n	8006b40 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	f023 0310 	bic.w	r3, r3, #16
 8006afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d103      	bne.n	8006b30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fe fda7 	bl	800568c <HAL_UARTEx_RxEventCallback>
 8006b3e:	e002      	b.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fa faef 	bl	8001124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d006      	beq.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0x254>
 8006b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f47f aefa 	bne.w	8006950 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b62:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d047      	beq.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b74:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d240      	bcs.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b92:	677b      	str	r3, [r7, #116]	; 0x74
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b9c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8006bb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f043 0320 	orr.w	r3, r3, #32
 8006bca:	673b      	str	r3, [r7, #112]	; 0x70
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	617b      	str	r3, [r7, #20]
   return(result);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e6      	bne.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006be8:	e009      	b.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	8b1b      	ldrh	r3, [r3, #24]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	b292      	uxth	r2, r2
 8006bfc:	831a      	strh	r2, [r3, #24]
}
 8006bfe:	bf00      	nop
 8006c00:	37a0      	adds	r7, #160	; 0xa0
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	080064a7 	.word	0x080064a7

08006c0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e027      	b.n	8006cae <HAL_UARTEx_DisableFifoMode+0x66>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2224      	movs	r2, #36	; 0x24
 8006c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e02d      	b.n	8006d2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f850 	bl	8006db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e02d      	b.n	8006daa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2224      	movs	r2, #36	; 0x24
 8006d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f812 	bl	8006db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d108      	bne.n	8006dd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dd4:	e031      	b.n	8006e3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dda:	2308      	movs	r3, #8
 8006ddc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	0e5b      	lsrs	r3, r3, #25
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	0f5b      	lsrs	r3, r3, #29
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	7b3a      	ldrb	r2, [r7, #12]
 8006e02:	4911      	ldr	r1, [pc, #68]	; (8006e48 <UARTEx_SetNbDataToProcess+0x94>)
 8006e04:	5c8a      	ldrb	r2, [r1, r2]
 8006e06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e0a:	7b3a      	ldrb	r2, [r7, #12]
 8006e0c:	490f      	ldr	r1, [pc, #60]	; (8006e4c <UARTEx_SetNbDataToProcess+0x98>)
 8006e0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	7b7a      	ldrb	r2, [r7, #13]
 8006e20:	4909      	ldr	r1, [pc, #36]	; (8006e48 <UARTEx_SetNbDataToProcess+0x94>)
 8006e22:	5c8a      	ldrb	r2, [r1, r2]
 8006e24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e28:	7b7a      	ldrb	r2, [r7, #13]
 8006e2a:	4908      	ldr	r1, [pc, #32]	; (8006e4c <UARTEx_SetNbDataToProcess+0x98>)
 8006e2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	08009a2c 	.word	0x08009a2c
 8006e4c:	08009a34 	.word	0x08009a34

08006e50 <__errno>:
 8006e50:	4b01      	ldr	r3, [pc, #4]	; (8006e58 <__errno+0x8>)
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000010 	.word	0x20000010

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f002 fd80 	bl	8009974 <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08009e24 	.word	0x08009e24
 8006e98:	08009e24 	.word	0x08009e24
 8006e9c:	08009e24 	.word	0x08009e24
 8006ea0:	08009e28 	.word	0x08009e28

08006ea4 <memset>:
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d100      	bne.n	8006eae <memset+0xa>
 8006eac:	4770      	bx	lr
 8006eae:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb2:	e7f9      	b.n	8006ea8 <memset+0x4>

08006eb4 <__cvt>:
 8006eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	ec55 4b10 	vmov	r4, r5, d0
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	bfbb      	ittet	lt
 8006ec6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eca:	461d      	movlt	r5, r3
 8006ecc:	2300      	movge	r3, #0
 8006ece:	232d      	movlt	r3, #45	; 0x2d
 8006ed0:	700b      	strb	r3, [r1, #0]
 8006ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ed8:	4691      	mov	r9, r2
 8006eda:	f023 0820 	bic.w	r8, r3, #32
 8006ede:	bfbc      	itt	lt
 8006ee0:	4622      	movlt	r2, r4
 8006ee2:	4614      	movlt	r4, r2
 8006ee4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ee8:	d005      	beq.n	8006ef6 <__cvt+0x42>
 8006eea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006eee:	d100      	bne.n	8006ef2 <__cvt+0x3e>
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	e000      	b.n	8006ef8 <__cvt+0x44>
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	ab02      	add	r3, sp, #8
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	ec45 4b10 	vmov	d0, r4, r5
 8006f04:	4653      	mov	r3, sl
 8006f06:	4632      	mov	r2, r6
 8006f08:	f000 fe1a 	bl	8007b40 <_dtoa_r>
 8006f0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f10:	4607      	mov	r7, r0
 8006f12:	d102      	bne.n	8006f1a <__cvt+0x66>
 8006f14:	f019 0f01 	tst.w	r9, #1
 8006f18:	d022      	beq.n	8006f60 <__cvt+0xac>
 8006f1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f1e:	eb07 0906 	add.w	r9, r7, r6
 8006f22:	d110      	bne.n	8006f46 <__cvt+0x92>
 8006f24:	783b      	ldrb	r3, [r7, #0]
 8006f26:	2b30      	cmp	r3, #48	; 0x30
 8006f28:	d10a      	bne.n	8006f40 <__cvt+0x8c>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 fde1 	bl	8000af8 <__aeabi_dcmpeq>
 8006f36:	b918      	cbnz	r0, 8006f40 <__cvt+0x8c>
 8006f38:	f1c6 0601 	rsb	r6, r6, #1
 8006f3c:	f8ca 6000 	str.w	r6, [sl]
 8006f40:	f8da 3000 	ldr.w	r3, [sl]
 8006f44:	4499      	add	r9, r3
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7f9 fdd3 	bl	8000af8 <__aeabi_dcmpeq>
 8006f52:	b108      	cbz	r0, 8006f58 <__cvt+0xa4>
 8006f54:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f58:	2230      	movs	r2, #48	; 0x30
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	454b      	cmp	r3, r9
 8006f5e:	d307      	bcc.n	8006f70 <__cvt+0xbc>
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f64:	1bdb      	subs	r3, r3, r7
 8006f66:	4638      	mov	r0, r7
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	b004      	add	sp, #16
 8006f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e7f0      	b.n	8006f5a <__cvt+0xa6>

08006f78 <__exponent>:
 8006f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	bfb8      	it	lt
 8006f80:	4249      	neglt	r1, r1
 8006f82:	f803 2b02 	strb.w	r2, [r3], #2
 8006f86:	bfb4      	ite	lt
 8006f88:	222d      	movlt	r2, #45	; 0x2d
 8006f8a:	222b      	movge	r2, #43	; 0x2b
 8006f8c:	2909      	cmp	r1, #9
 8006f8e:	7042      	strb	r2, [r0, #1]
 8006f90:	dd2a      	ble.n	8006fe8 <__exponent+0x70>
 8006f92:	f10d 0407 	add.w	r4, sp, #7
 8006f96:	46a4      	mov	ip, r4
 8006f98:	270a      	movs	r7, #10
 8006f9a:	46a6      	mov	lr, r4
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fa2:	fb07 1516 	mls	r5, r7, r6, r1
 8006fa6:	3530      	adds	r5, #48	; 0x30
 8006fa8:	2a63      	cmp	r2, #99	; 0x63
 8006faa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	dcf1      	bgt.n	8006f9a <__exponent+0x22>
 8006fb6:	3130      	adds	r1, #48	; 0x30
 8006fb8:	f1ae 0502 	sub.w	r5, lr, #2
 8006fbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fc0:	1c44      	adds	r4, r0, #1
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4561      	cmp	r1, ip
 8006fc6:	d30a      	bcc.n	8006fde <__exponent+0x66>
 8006fc8:	f10d 0209 	add.w	r2, sp, #9
 8006fcc:	eba2 020e 	sub.w	r2, r2, lr
 8006fd0:	4565      	cmp	r5, ip
 8006fd2:	bf88      	it	hi
 8006fd4:	2200      	movhi	r2, #0
 8006fd6:	4413      	add	r3, r2
 8006fd8:	1a18      	subs	r0, r3, r0
 8006fda:	b003      	add	sp, #12
 8006fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fe2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fe6:	e7ed      	b.n	8006fc4 <__exponent+0x4c>
 8006fe8:	2330      	movs	r3, #48	; 0x30
 8006fea:	3130      	adds	r1, #48	; 0x30
 8006fec:	7083      	strb	r3, [r0, #2]
 8006fee:	70c1      	strb	r1, [r0, #3]
 8006ff0:	1d03      	adds	r3, r0, #4
 8006ff2:	e7f1      	b.n	8006fd8 <__exponent+0x60>

08006ff4 <_printf_float>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	ed2d 8b02 	vpush	{d8}
 8006ffc:	b08d      	sub	sp, #52	; 0x34
 8006ffe:	460c      	mov	r4, r1
 8007000:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007004:	4616      	mov	r6, r2
 8007006:	461f      	mov	r7, r3
 8007008:	4605      	mov	r5, r0
 800700a:	f001 fd3d 	bl	8008a88 <_localeconv_r>
 800700e:	f8d0 a000 	ldr.w	sl, [r0]
 8007012:	4650      	mov	r0, sl
 8007014:	f7f9 f8f4 	bl	8000200 <strlen>
 8007018:	2300      	movs	r3, #0
 800701a:	930a      	str	r3, [sp, #40]	; 0x28
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	9305      	str	r3, [sp, #20]
 8007020:	f8d8 3000 	ldr.w	r3, [r8]
 8007024:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007028:	3307      	adds	r3, #7
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	f103 0208 	add.w	r2, r3, #8
 8007032:	f8c8 2000 	str.w	r2, [r8]
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800703e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007042:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007046:	9307      	str	r3, [sp, #28]
 8007048:	f8cd 8018 	str.w	r8, [sp, #24]
 800704c:	ee08 0a10 	vmov	s16, r0
 8007050:	4b9f      	ldr	r3, [pc, #636]	; (80072d0 <_printf_float+0x2dc>)
 8007052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	f7f9 fd7f 	bl	8000b5c <__aeabi_dcmpun>
 800705e:	bb88      	cbnz	r0, 80070c4 <_printf_float+0xd0>
 8007060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007064:	4b9a      	ldr	r3, [pc, #616]	; (80072d0 <_printf_float+0x2dc>)
 8007066:	f04f 32ff 	mov.w	r2, #4294967295
 800706a:	f7f9 fd59 	bl	8000b20 <__aeabi_dcmple>
 800706e:	bb48      	cbnz	r0, 80070c4 <_printf_float+0xd0>
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 fd48 	bl	8000b0c <__aeabi_dcmplt>
 800707c:	b110      	cbz	r0, 8007084 <_printf_float+0x90>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007084:	4b93      	ldr	r3, [pc, #588]	; (80072d4 <_printf_float+0x2e0>)
 8007086:	4894      	ldr	r0, [pc, #592]	; (80072d8 <_printf_float+0x2e4>)
 8007088:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800708c:	bf94      	ite	ls
 800708e:	4698      	movls	r8, r3
 8007090:	4680      	movhi	r8, r0
 8007092:	2303      	movs	r3, #3
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	9b05      	ldr	r3, [sp, #20]
 8007098:	f023 0204 	bic.w	r2, r3, #4
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	f04f 0900 	mov.w	r9, #0
 80070a2:	9700      	str	r7, [sp, #0]
 80070a4:	4633      	mov	r3, r6
 80070a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 f9d8 	bl	8007460 <_printf_common>
 80070b0:	3001      	adds	r0, #1
 80070b2:	f040 8090 	bne.w	80071d6 <_printf_float+0x1e2>
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	b00d      	add	sp, #52	; 0x34
 80070bc:	ecbd 8b02 	vpop	{d8}
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	4649      	mov	r1, r9
 80070cc:	f7f9 fd46 	bl	8000b5c <__aeabi_dcmpun>
 80070d0:	b140      	cbz	r0, 80070e4 <_printf_float+0xf0>
 80070d2:	464b      	mov	r3, r9
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bfbc      	itt	lt
 80070d8:	232d      	movlt	r3, #45	; 0x2d
 80070da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070de:	487f      	ldr	r0, [pc, #508]	; (80072dc <_printf_float+0x2e8>)
 80070e0:	4b7f      	ldr	r3, [pc, #508]	; (80072e0 <_printf_float+0x2ec>)
 80070e2:	e7d1      	b.n	8007088 <_printf_float+0x94>
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070ea:	9206      	str	r2, [sp, #24]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	d13f      	bne.n	8007170 <_printf_float+0x17c>
 80070f0:	2306      	movs	r3, #6
 80070f2:	6063      	str	r3, [r4, #4]
 80070f4:	9b05      	ldr	r3, [sp, #20]
 80070f6:	6861      	ldr	r1, [r4, #4]
 80070f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070fc:	2300      	movs	r3, #0
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	ab0a      	add	r3, sp, #40	; 0x28
 8007102:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007106:	ab09      	add	r3, sp, #36	; 0x24
 8007108:	ec49 8b10 	vmov	d0, r8, r9
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff fecd 	bl	8006eb4 <__cvt>
 800711a:	9b06      	ldr	r3, [sp, #24]
 800711c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800711e:	2b47      	cmp	r3, #71	; 0x47
 8007120:	4680      	mov	r8, r0
 8007122:	d108      	bne.n	8007136 <_printf_float+0x142>
 8007124:	1cc8      	adds	r0, r1, #3
 8007126:	db02      	blt.n	800712e <_printf_float+0x13a>
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	4299      	cmp	r1, r3
 800712c:	dd41      	ble.n	80071b2 <_printf_float+0x1be>
 800712e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007132:	fa5f fb8b 	uxtb.w	fp, fp
 8007136:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800713a:	d820      	bhi.n	800717e <_printf_float+0x18a>
 800713c:	3901      	subs	r1, #1
 800713e:	465a      	mov	r2, fp
 8007140:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007144:	9109      	str	r1, [sp, #36]	; 0x24
 8007146:	f7ff ff17 	bl	8006f78 <__exponent>
 800714a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800714c:	1813      	adds	r3, r2, r0
 800714e:	2a01      	cmp	r2, #1
 8007150:	4681      	mov	r9, r0
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	dc02      	bgt.n	800715c <_printf_float+0x168>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	07d2      	lsls	r2, r2, #31
 800715a:	d501      	bpl.n	8007160 <_printf_float+0x16c>
 800715c:	3301      	adds	r3, #1
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007164:	2b00      	cmp	r3, #0
 8007166:	d09c      	beq.n	80070a2 <_printf_float+0xae>
 8007168:	232d      	movs	r3, #45	; 0x2d
 800716a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800716e:	e798      	b.n	80070a2 <_printf_float+0xae>
 8007170:	9a06      	ldr	r2, [sp, #24]
 8007172:	2a47      	cmp	r2, #71	; 0x47
 8007174:	d1be      	bne.n	80070f4 <_printf_float+0x100>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1bc      	bne.n	80070f4 <_printf_float+0x100>
 800717a:	2301      	movs	r3, #1
 800717c:	e7b9      	b.n	80070f2 <_printf_float+0xfe>
 800717e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007182:	d118      	bne.n	80071b6 <_printf_float+0x1c2>
 8007184:	2900      	cmp	r1, #0
 8007186:	6863      	ldr	r3, [r4, #4]
 8007188:	dd0b      	ble.n	80071a2 <_printf_float+0x1ae>
 800718a:	6121      	str	r1, [r4, #16]
 800718c:	b913      	cbnz	r3, 8007194 <_printf_float+0x1a0>
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	07d0      	lsls	r0, r2, #31
 8007192:	d502      	bpl.n	800719a <_printf_float+0x1a6>
 8007194:	3301      	adds	r3, #1
 8007196:	440b      	add	r3, r1
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	65a1      	str	r1, [r4, #88]	; 0x58
 800719c:	f04f 0900 	mov.w	r9, #0
 80071a0:	e7de      	b.n	8007160 <_printf_float+0x16c>
 80071a2:	b913      	cbnz	r3, 80071aa <_printf_float+0x1b6>
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	07d2      	lsls	r2, r2, #31
 80071a8:	d501      	bpl.n	80071ae <_printf_float+0x1ba>
 80071aa:	3302      	adds	r3, #2
 80071ac:	e7f4      	b.n	8007198 <_printf_float+0x1a4>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e7f2      	b.n	8007198 <_printf_float+0x1a4>
 80071b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	4299      	cmp	r1, r3
 80071ba:	db05      	blt.n	80071c8 <_printf_float+0x1d4>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	6121      	str	r1, [r4, #16]
 80071c0:	07d8      	lsls	r0, r3, #31
 80071c2:	d5ea      	bpl.n	800719a <_printf_float+0x1a6>
 80071c4:	1c4b      	adds	r3, r1, #1
 80071c6:	e7e7      	b.n	8007198 <_printf_float+0x1a4>
 80071c8:	2900      	cmp	r1, #0
 80071ca:	bfd4      	ite	le
 80071cc:	f1c1 0202 	rsble	r2, r1, #2
 80071d0:	2201      	movgt	r2, #1
 80071d2:	4413      	add	r3, r2
 80071d4:	e7e0      	b.n	8007198 <_printf_float+0x1a4>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	055a      	lsls	r2, r3, #21
 80071da:	d407      	bmi.n	80071ec <_printf_float+0x1f8>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	4642      	mov	r2, r8
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	d12c      	bne.n	8007244 <_printf_float+0x250>
 80071ea:	e764      	b.n	80070b6 <_printf_float+0xc2>
 80071ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071f0:	f240 80e0 	bls.w	80073b4 <_printf_float+0x3c0>
 80071f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071f8:	2200      	movs	r2, #0
 80071fa:	2300      	movs	r3, #0
 80071fc:	f7f9 fc7c 	bl	8000af8 <__aeabi_dcmpeq>
 8007200:	2800      	cmp	r0, #0
 8007202:	d034      	beq.n	800726e <_printf_float+0x27a>
 8007204:	4a37      	ldr	r2, [pc, #220]	; (80072e4 <_printf_float+0x2f0>)
 8007206:	2301      	movs	r3, #1
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f af51 	beq.w	80070b6 <_printf_float+0xc2>
 8007214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007218:	429a      	cmp	r2, r3
 800721a:	db02      	blt.n	8007222 <_printf_float+0x22e>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	07d8      	lsls	r0, r3, #31
 8007220:	d510      	bpl.n	8007244 <_printf_float+0x250>
 8007222:	ee18 3a10 	vmov	r3, s16
 8007226:	4652      	mov	r2, sl
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f af41 	beq.w	80070b6 <_printf_float+0xc2>
 8007234:	f04f 0800 	mov.w	r8, #0
 8007238:	f104 091a 	add.w	r9, r4, #26
 800723c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	4543      	cmp	r3, r8
 8007242:	dc09      	bgt.n	8007258 <_printf_float+0x264>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	079b      	lsls	r3, r3, #30
 8007248:	f100 8105 	bmi.w	8007456 <_printf_float+0x462>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e730      	b.n	80070ba <_printf_float+0xc6>
 8007258:	2301      	movs	r3, #1
 800725a:	464a      	mov	r2, r9
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af27 	beq.w	80070b6 <_printf_float+0xc2>
 8007268:	f108 0801 	add.w	r8, r8, #1
 800726c:	e7e6      	b.n	800723c <_printf_float+0x248>
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	dc39      	bgt.n	80072e8 <_printf_float+0x2f4>
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <_printf_float+0x2f0>)
 8007276:	2301      	movs	r3, #1
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af19 	beq.w	80070b6 <_printf_float+0xc2>
 8007284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007288:	4313      	orrs	r3, r2
 800728a:	d102      	bne.n	8007292 <_printf_float+0x29e>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	07d9      	lsls	r1, r3, #31
 8007290:	d5d8      	bpl.n	8007244 <_printf_float+0x250>
 8007292:	ee18 3a10 	vmov	r3, s16
 8007296:	4652      	mov	r2, sl
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af09 	beq.w	80070b6 <_printf_float+0xc2>
 80072a4:	f04f 0900 	mov.w	r9, #0
 80072a8:	f104 0a1a 	add.w	sl, r4, #26
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	425b      	negs	r3, r3
 80072b0:	454b      	cmp	r3, r9
 80072b2:	dc01      	bgt.n	80072b8 <_printf_float+0x2c4>
 80072b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b6:	e792      	b.n	80071de <_printf_float+0x1ea>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f aef7 	beq.w	80070b6 <_printf_float+0xc2>
 80072c8:	f109 0901 	add.w	r9, r9, #1
 80072cc:	e7ee      	b.n	80072ac <_printf_float+0x2b8>
 80072ce:	bf00      	nop
 80072d0:	7fefffff 	.word	0x7fefffff
 80072d4:	08009a40 	.word	0x08009a40
 80072d8:	08009a44 	.word	0x08009a44
 80072dc:	08009a4c 	.word	0x08009a4c
 80072e0:	08009a48 	.word	0x08009a48
 80072e4:	08009a50 	.word	0x08009a50
 80072e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ec:	429a      	cmp	r2, r3
 80072ee:	bfa8      	it	ge
 80072f0:	461a      	movge	r2, r3
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	4691      	mov	r9, r2
 80072f6:	dc37      	bgt.n	8007368 <_printf_float+0x374>
 80072f8:	f04f 0b00 	mov.w	fp, #0
 80072fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007300:	f104 021a 	add.w	r2, r4, #26
 8007304:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	eba3 0309 	sub.w	r3, r3, r9
 800730c:	455b      	cmp	r3, fp
 800730e:	dc33      	bgt.n	8007378 <_printf_float+0x384>
 8007310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007314:	429a      	cmp	r2, r3
 8007316:	db3b      	blt.n	8007390 <_printf_float+0x39c>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	07da      	lsls	r2, r3, #31
 800731c:	d438      	bmi.n	8007390 <_printf_float+0x39c>
 800731e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	eba2 0901 	sub.w	r9, r2, r1
 800732a:	4599      	cmp	r9, r3
 800732c:	bfa8      	it	ge
 800732e:	4699      	movge	r9, r3
 8007330:	f1b9 0f00 	cmp.w	r9, #0
 8007334:	dc35      	bgt.n	80073a2 <_printf_float+0x3ae>
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800733e:	f104 0a1a 	add.w	sl, r4, #26
 8007342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	eba3 0309 	sub.w	r3, r3, r9
 800734c:	4543      	cmp	r3, r8
 800734e:	f77f af79 	ble.w	8007244 <_printf_float+0x250>
 8007352:	2301      	movs	r3, #1
 8007354:	4652      	mov	r2, sl
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f aeaa 	beq.w	80070b6 <_printf_float+0xc2>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	e7ec      	b.n	8007342 <_printf_float+0x34e>
 8007368:	4613      	mov	r3, r2
 800736a:	4631      	mov	r1, r6
 800736c:	4642      	mov	r2, r8
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	d1c0      	bne.n	80072f8 <_printf_float+0x304>
 8007376:	e69e      	b.n	80070b6 <_printf_float+0xc2>
 8007378:	2301      	movs	r3, #1
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	9205      	str	r2, [sp, #20]
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f ae97 	beq.w	80070b6 <_printf_float+0xc2>
 8007388:	9a05      	ldr	r2, [sp, #20]
 800738a:	f10b 0b01 	add.w	fp, fp, #1
 800738e:	e7b9      	b.n	8007304 <_printf_float+0x310>
 8007390:	ee18 3a10 	vmov	r3, s16
 8007394:	4652      	mov	r2, sl
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	3001      	adds	r0, #1
 800739e:	d1be      	bne.n	800731e <_printf_float+0x32a>
 80073a0:	e689      	b.n	80070b6 <_printf_float+0xc2>
 80073a2:	9a05      	ldr	r2, [sp, #20]
 80073a4:	464b      	mov	r3, r9
 80073a6:	4442      	add	r2, r8
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	d1c1      	bne.n	8007336 <_printf_float+0x342>
 80073b2:	e680      	b.n	80070b6 <_printf_float+0xc2>
 80073b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b6:	2a01      	cmp	r2, #1
 80073b8:	dc01      	bgt.n	80073be <_printf_float+0x3ca>
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d538      	bpl.n	8007430 <_printf_float+0x43c>
 80073be:	2301      	movs	r3, #1
 80073c0:	4642      	mov	r2, r8
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae74 	beq.w	80070b6 <_printf_float+0xc2>
 80073ce:	ee18 3a10 	vmov	r3, s16
 80073d2:	4652      	mov	r2, sl
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f ae6b 	beq.w	80070b6 <_printf_float+0xc2>
 80073e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073e4:	2200      	movs	r2, #0
 80073e6:	2300      	movs	r3, #0
 80073e8:	f7f9 fb86 	bl	8000af8 <__aeabi_dcmpeq>
 80073ec:	b9d8      	cbnz	r0, 8007426 <_printf_float+0x432>
 80073ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f0:	f108 0201 	add.w	r2, r8, #1
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	d10e      	bne.n	800741e <_printf_float+0x42a>
 8007400:	e659      	b.n	80070b6 <_printf_float+0xc2>
 8007402:	2301      	movs	r3, #1
 8007404:	4652      	mov	r2, sl
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	f43f ae52 	beq.w	80070b6 <_printf_float+0xc2>
 8007412:	f108 0801 	add.w	r8, r8, #1
 8007416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007418:	3b01      	subs	r3, #1
 800741a:	4543      	cmp	r3, r8
 800741c:	dcf1      	bgt.n	8007402 <_printf_float+0x40e>
 800741e:	464b      	mov	r3, r9
 8007420:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007424:	e6dc      	b.n	80071e0 <_printf_float+0x1ec>
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	f104 0a1a 	add.w	sl, r4, #26
 800742e:	e7f2      	b.n	8007416 <_printf_float+0x422>
 8007430:	2301      	movs	r3, #1
 8007432:	4642      	mov	r2, r8
 8007434:	e7df      	b.n	80073f6 <_printf_float+0x402>
 8007436:	2301      	movs	r3, #1
 8007438:	464a      	mov	r2, r9
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f ae38 	beq.w	80070b6 <_printf_float+0xc2>
 8007446:	f108 0801 	add.w	r8, r8, #1
 800744a:	68e3      	ldr	r3, [r4, #12]
 800744c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800744e:	1a5b      	subs	r3, r3, r1
 8007450:	4543      	cmp	r3, r8
 8007452:	dcf0      	bgt.n	8007436 <_printf_float+0x442>
 8007454:	e6fa      	b.n	800724c <_printf_float+0x258>
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	f104 0919 	add.w	r9, r4, #25
 800745e:	e7f4      	b.n	800744a <_printf_float+0x456>

08007460 <_printf_common>:
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	4616      	mov	r6, r2
 8007466:	4699      	mov	r9, r3
 8007468:	688a      	ldr	r2, [r1, #8]
 800746a:	690b      	ldr	r3, [r1, #16]
 800746c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007470:	4293      	cmp	r3, r2
 8007472:	bfb8      	it	lt
 8007474:	4613      	movlt	r3, r2
 8007476:	6033      	str	r3, [r6, #0]
 8007478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800747c:	4607      	mov	r7, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b10a      	cbz	r2, 8007486 <_printf_common+0x26>
 8007482:	3301      	adds	r3, #1
 8007484:	6033      	str	r3, [r6, #0]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	0699      	lsls	r1, r3, #26
 800748a:	bf42      	ittt	mi
 800748c:	6833      	ldrmi	r3, [r6, #0]
 800748e:	3302      	addmi	r3, #2
 8007490:	6033      	strmi	r3, [r6, #0]
 8007492:	6825      	ldr	r5, [r4, #0]
 8007494:	f015 0506 	ands.w	r5, r5, #6
 8007498:	d106      	bne.n	80074a8 <_printf_common+0x48>
 800749a:	f104 0a19 	add.w	sl, r4, #25
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	6832      	ldr	r2, [r6, #0]
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dc26      	bgt.n	80074f6 <_printf_common+0x96>
 80074a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074ac:	1e13      	subs	r3, r2, #0
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	bf18      	it	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	0692      	lsls	r2, r2, #26
 80074b6:	d42b      	bmi.n	8007510 <_printf_common+0xb0>
 80074b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074bc:	4649      	mov	r1, r9
 80074be:	4638      	mov	r0, r7
 80074c0:	47c0      	blx	r8
 80074c2:	3001      	adds	r0, #1
 80074c4:	d01e      	beq.n	8007504 <_printf_common+0xa4>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	68e5      	ldr	r5, [r4, #12]
 80074ca:	6832      	ldr	r2, [r6, #0]
 80074cc:	f003 0306 	and.w	r3, r3, #6
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	bf08      	it	eq
 80074d4:	1aad      	subeq	r5, r5, r2
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	6922      	ldr	r2, [r4, #16]
 80074da:	bf0c      	ite	eq
 80074dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e0:	2500      	movne	r5, #0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	bfc4      	itt	gt
 80074e6:	1a9b      	subgt	r3, r3, r2
 80074e8:	18ed      	addgt	r5, r5, r3
 80074ea:	2600      	movs	r6, #0
 80074ec:	341a      	adds	r4, #26
 80074ee:	42b5      	cmp	r5, r6
 80074f0:	d11a      	bne.n	8007528 <_printf_common+0xc8>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e008      	b.n	8007508 <_printf_common+0xa8>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4652      	mov	r2, sl
 80074fa:	4649      	mov	r1, r9
 80074fc:	4638      	mov	r0, r7
 80074fe:	47c0      	blx	r8
 8007500:	3001      	adds	r0, #1
 8007502:	d103      	bne.n	800750c <_printf_common+0xac>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750c:	3501      	adds	r5, #1
 800750e:	e7c6      	b.n	800749e <_printf_common+0x3e>
 8007510:	18e1      	adds	r1, r4, r3
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	2030      	movs	r0, #48	; 0x30
 8007516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800751a:	4422      	add	r2, r4
 800751c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007524:	3302      	adds	r3, #2
 8007526:	e7c7      	b.n	80074b8 <_printf_common+0x58>
 8007528:	2301      	movs	r3, #1
 800752a:	4622      	mov	r2, r4
 800752c:	4649      	mov	r1, r9
 800752e:	4638      	mov	r0, r7
 8007530:	47c0      	blx	r8
 8007532:	3001      	adds	r0, #1
 8007534:	d0e6      	beq.n	8007504 <_printf_common+0xa4>
 8007536:	3601      	adds	r6, #1
 8007538:	e7d9      	b.n	80074ee <_printf_common+0x8e>
	...

0800753c <_printf_i>:
 800753c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	460c      	mov	r4, r1
 8007542:	4691      	mov	r9, r2
 8007544:	7e27      	ldrb	r7, [r4, #24]
 8007546:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007548:	2f78      	cmp	r7, #120	; 0x78
 800754a:	4680      	mov	r8, r0
 800754c:	469a      	mov	sl, r3
 800754e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007552:	d807      	bhi.n	8007564 <_printf_i+0x28>
 8007554:	2f62      	cmp	r7, #98	; 0x62
 8007556:	d80a      	bhi.n	800756e <_printf_i+0x32>
 8007558:	2f00      	cmp	r7, #0
 800755a:	f000 80d8 	beq.w	800770e <_printf_i+0x1d2>
 800755e:	2f58      	cmp	r7, #88	; 0x58
 8007560:	f000 80a3 	beq.w	80076aa <_printf_i+0x16e>
 8007564:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800756c:	e03a      	b.n	80075e4 <_printf_i+0xa8>
 800756e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007572:	2b15      	cmp	r3, #21
 8007574:	d8f6      	bhi.n	8007564 <_printf_i+0x28>
 8007576:	a001      	add	r0, pc, #4	; (adr r0, 800757c <_printf_i+0x40>)
 8007578:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800757c:	080075d5 	.word	0x080075d5
 8007580:	080075e9 	.word	0x080075e9
 8007584:	08007565 	.word	0x08007565
 8007588:	08007565 	.word	0x08007565
 800758c:	08007565 	.word	0x08007565
 8007590:	08007565 	.word	0x08007565
 8007594:	080075e9 	.word	0x080075e9
 8007598:	08007565 	.word	0x08007565
 800759c:	08007565 	.word	0x08007565
 80075a0:	08007565 	.word	0x08007565
 80075a4:	08007565 	.word	0x08007565
 80075a8:	080076f5 	.word	0x080076f5
 80075ac:	08007619 	.word	0x08007619
 80075b0:	080076d7 	.word	0x080076d7
 80075b4:	08007565 	.word	0x08007565
 80075b8:	08007565 	.word	0x08007565
 80075bc:	08007717 	.word	0x08007717
 80075c0:	08007565 	.word	0x08007565
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007565 	.word	0x08007565
 80075cc:	08007565 	.word	0x08007565
 80075d0:	080076df 	.word	0x080076df
 80075d4:	680b      	ldr	r3, [r1, #0]
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	600a      	str	r2, [r1, #0]
 80075dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0a3      	b.n	8007730 <_printf_i+0x1f4>
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	6808      	ldr	r0, [r1, #0]
 80075ec:	062e      	lsls	r6, r5, #24
 80075ee:	f100 0304 	add.w	r3, r0, #4
 80075f2:	d50a      	bpl.n	800760a <_printf_i+0xce>
 80075f4:	6805      	ldr	r5, [r0, #0]
 80075f6:	600b      	str	r3, [r1, #0]
 80075f8:	2d00      	cmp	r5, #0
 80075fa:	da03      	bge.n	8007604 <_printf_i+0xc8>
 80075fc:	232d      	movs	r3, #45	; 0x2d
 80075fe:	426d      	negs	r5, r5
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007604:	485e      	ldr	r0, [pc, #376]	; (8007780 <_printf_i+0x244>)
 8007606:	230a      	movs	r3, #10
 8007608:	e019      	b.n	800763e <_printf_i+0x102>
 800760a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800760e:	6805      	ldr	r5, [r0, #0]
 8007610:	600b      	str	r3, [r1, #0]
 8007612:	bf18      	it	ne
 8007614:	b22d      	sxthne	r5, r5
 8007616:	e7ef      	b.n	80075f8 <_printf_i+0xbc>
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	6825      	ldr	r5, [r4, #0]
 800761c:	1d18      	adds	r0, r3, #4
 800761e:	6008      	str	r0, [r1, #0]
 8007620:	0628      	lsls	r0, r5, #24
 8007622:	d501      	bpl.n	8007628 <_printf_i+0xec>
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	e002      	b.n	800762e <_printf_i+0xf2>
 8007628:	0669      	lsls	r1, r5, #25
 800762a:	d5fb      	bpl.n	8007624 <_printf_i+0xe8>
 800762c:	881d      	ldrh	r5, [r3, #0]
 800762e:	4854      	ldr	r0, [pc, #336]	; (8007780 <_printf_i+0x244>)
 8007630:	2f6f      	cmp	r7, #111	; 0x6f
 8007632:	bf0c      	ite	eq
 8007634:	2308      	moveq	r3, #8
 8007636:	230a      	movne	r3, #10
 8007638:	2100      	movs	r1, #0
 800763a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800763e:	6866      	ldr	r6, [r4, #4]
 8007640:	60a6      	str	r6, [r4, #8]
 8007642:	2e00      	cmp	r6, #0
 8007644:	bfa2      	ittt	ge
 8007646:	6821      	ldrge	r1, [r4, #0]
 8007648:	f021 0104 	bicge.w	r1, r1, #4
 800764c:	6021      	strge	r1, [r4, #0]
 800764e:	b90d      	cbnz	r5, 8007654 <_printf_i+0x118>
 8007650:	2e00      	cmp	r6, #0
 8007652:	d04d      	beq.n	80076f0 <_printf_i+0x1b4>
 8007654:	4616      	mov	r6, r2
 8007656:	fbb5 f1f3 	udiv	r1, r5, r3
 800765a:	fb03 5711 	mls	r7, r3, r1, r5
 800765e:	5dc7      	ldrb	r7, [r0, r7]
 8007660:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007664:	462f      	mov	r7, r5
 8007666:	42bb      	cmp	r3, r7
 8007668:	460d      	mov	r5, r1
 800766a:	d9f4      	bls.n	8007656 <_printf_i+0x11a>
 800766c:	2b08      	cmp	r3, #8
 800766e:	d10b      	bne.n	8007688 <_printf_i+0x14c>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	07df      	lsls	r7, r3, #31
 8007674:	d508      	bpl.n	8007688 <_printf_i+0x14c>
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	4299      	cmp	r1, r3
 800767c:	bfde      	ittt	le
 800767e:	2330      	movle	r3, #48	; 0x30
 8007680:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007684:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007688:	1b92      	subs	r2, r2, r6
 800768a:	6122      	str	r2, [r4, #16]
 800768c:	f8cd a000 	str.w	sl, [sp]
 8007690:	464b      	mov	r3, r9
 8007692:	aa03      	add	r2, sp, #12
 8007694:	4621      	mov	r1, r4
 8007696:	4640      	mov	r0, r8
 8007698:	f7ff fee2 	bl	8007460 <_printf_common>
 800769c:	3001      	adds	r0, #1
 800769e:	d14c      	bne.n	800773a <_printf_i+0x1fe>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	b004      	add	sp, #16
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	4835      	ldr	r0, [pc, #212]	; (8007780 <_printf_i+0x244>)
 80076ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	680e      	ldr	r6, [r1, #0]
 80076b4:	061f      	lsls	r7, r3, #24
 80076b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ba:	600e      	str	r6, [r1, #0]
 80076bc:	d514      	bpl.n	80076e8 <_printf_i+0x1ac>
 80076be:	07d9      	lsls	r1, r3, #31
 80076c0:	bf44      	itt	mi
 80076c2:	f043 0320 	orrmi.w	r3, r3, #32
 80076c6:	6023      	strmi	r3, [r4, #0]
 80076c8:	b91d      	cbnz	r5, 80076d2 <_printf_i+0x196>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f023 0320 	bic.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	2310      	movs	r3, #16
 80076d4:	e7b0      	b.n	8007638 <_printf_i+0xfc>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f043 0320 	orr.w	r3, r3, #32
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	2378      	movs	r3, #120	; 0x78
 80076e0:	4828      	ldr	r0, [pc, #160]	; (8007784 <_printf_i+0x248>)
 80076e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076e6:	e7e3      	b.n	80076b0 <_printf_i+0x174>
 80076e8:	065e      	lsls	r6, r3, #25
 80076ea:	bf48      	it	mi
 80076ec:	b2ad      	uxthmi	r5, r5
 80076ee:	e7e6      	b.n	80076be <_printf_i+0x182>
 80076f0:	4616      	mov	r6, r2
 80076f2:	e7bb      	b.n	800766c <_printf_i+0x130>
 80076f4:	680b      	ldr	r3, [r1, #0]
 80076f6:	6826      	ldr	r6, [r4, #0]
 80076f8:	6960      	ldr	r0, [r4, #20]
 80076fa:	1d1d      	adds	r5, r3, #4
 80076fc:	600d      	str	r5, [r1, #0]
 80076fe:	0635      	lsls	r5, r6, #24
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	d501      	bpl.n	8007708 <_printf_i+0x1cc>
 8007704:	6018      	str	r0, [r3, #0]
 8007706:	e002      	b.n	800770e <_printf_i+0x1d2>
 8007708:	0671      	lsls	r1, r6, #25
 800770a:	d5fb      	bpl.n	8007704 <_printf_i+0x1c8>
 800770c:	8018      	strh	r0, [r3, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	4616      	mov	r6, r2
 8007714:	e7ba      	b.n	800768c <_printf_i+0x150>
 8007716:	680b      	ldr	r3, [r1, #0]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	600a      	str	r2, [r1, #0]
 800771c:	681e      	ldr	r6, [r3, #0]
 800771e:	6862      	ldr	r2, [r4, #4]
 8007720:	2100      	movs	r1, #0
 8007722:	4630      	mov	r0, r6
 8007724:	f7f8 fd74 	bl	8000210 <memchr>
 8007728:	b108      	cbz	r0, 800772e <_printf_i+0x1f2>
 800772a:	1b80      	subs	r0, r0, r6
 800772c:	6060      	str	r0, [r4, #4]
 800772e:	6863      	ldr	r3, [r4, #4]
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	2300      	movs	r3, #0
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007738:	e7a8      	b.n	800768c <_printf_i+0x150>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d0ab      	beq.n	80076a0 <_printf_i+0x164>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	079b      	lsls	r3, r3, #30
 800774c:	d413      	bmi.n	8007776 <_printf_i+0x23a>
 800774e:	68e0      	ldr	r0, [r4, #12]
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	4298      	cmp	r0, r3
 8007754:	bfb8      	it	lt
 8007756:	4618      	movlt	r0, r3
 8007758:	e7a4      	b.n	80076a4 <_printf_i+0x168>
 800775a:	2301      	movs	r3, #1
 800775c:	4632      	mov	r2, r6
 800775e:	4649      	mov	r1, r9
 8007760:	4640      	mov	r0, r8
 8007762:	47d0      	blx	sl
 8007764:	3001      	adds	r0, #1
 8007766:	d09b      	beq.n	80076a0 <_printf_i+0x164>
 8007768:	3501      	adds	r5, #1
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	9903      	ldr	r1, [sp, #12]
 800776e:	1a5b      	subs	r3, r3, r1
 8007770:	42ab      	cmp	r3, r5
 8007772:	dcf2      	bgt.n	800775a <_printf_i+0x21e>
 8007774:	e7eb      	b.n	800774e <_printf_i+0x212>
 8007776:	2500      	movs	r5, #0
 8007778:	f104 0619 	add.w	r6, r4, #25
 800777c:	e7f5      	b.n	800776a <_printf_i+0x22e>
 800777e:	bf00      	nop
 8007780:	08009a52 	.word	0x08009a52
 8007784:	08009a63 	.word	0x08009a63

08007788 <iprintf>:
 8007788:	b40f      	push	{r0, r1, r2, r3}
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <iprintf+0x2c>)
 800778c:	b513      	push	{r0, r1, r4, lr}
 800778e:	681c      	ldr	r4, [r3, #0]
 8007790:	b124      	cbz	r4, 800779c <iprintf+0x14>
 8007792:	69a3      	ldr	r3, [r4, #24]
 8007794:	b913      	cbnz	r3, 800779c <iprintf+0x14>
 8007796:	4620      	mov	r0, r4
 8007798:	f001 f8d8 	bl	800894c <__sinit>
 800779c:	ab05      	add	r3, sp, #20
 800779e:	9a04      	ldr	r2, [sp, #16]
 80077a0:	68a1      	ldr	r1, [r4, #8]
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	4620      	mov	r0, r4
 80077a6:	f001 fe53 	bl	8009450 <_vfiprintf_r>
 80077aa:	b002      	add	sp, #8
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	b004      	add	sp, #16
 80077b2:	4770      	bx	lr
 80077b4:	20000010 	.word	0x20000010

080077b8 <_puts_r>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	460e      	mov	r6, r1
 80077bc:	4605      	mov	r5, r0
 80077be:	b118      	cbz	r0, 80077c8 <_puts_r+0x10>
 80077c0:	6983      	ldr	r3, [r0, #24]
 80077c2:	b90b      	cbnz	r3, 80077c8 <_puts_r+0x10>
 80077c4:	f001 f8c2 	bl	800894c <__sinit>
 80077c8:	69ab      	ldr	r3, [r5, #24]
 80077ca:	68ac      	ldr	r4, [r5, #8]
 80077cc:	b913      	cbnz	r3, 80077d4 <_puts_r+0x1c>
 80077ce:	4628      	mov	r0, r5
 80077d0:	f001 f8bc 	bl	800894c <__sinit>
 80077d4:	4b2c      	ldr	r3, [pc, #176]	; (8007888 <_puts_r+0xd0>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d120      	bne.n	800781c <_puts_r+0x64>
 80077da:	686c      	ldr	r4, [r5, #4]
 80077dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077de:	07db      	lsls	r3, r3, #31
 80077e0:	d405      	bmi.n	80077ee <_puts_r+0x36>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	0598      	lsls	r0, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_puts_r+0x36>
 80077e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ea:	f001 f952 	bl	8008a92 <__retarget_lock_acquire_recursive>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	0719      	lsls	r1, r3, #28
 80077f2:	d51d      	bpl.n	8007830 <_puts_r+0x78>
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	b1db      	cbz	r3, 8007830 <_puts_r+0x78>
 80077f8:	3e01      	subs	r6, #1
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007800:	3b01      	subs	r3, #1
 8007802:	60a3      	str	r3, [r4, #8]
 8007804:	bb39      	cbnz	r1, 8007856 <_puts_r+0x9e>
 8007806:	2b00      	cmp	r3, #0
 8007808:	da38      	bge.n	800787c <_puts_r+0xc4>
 800780a:	4622      	mov	r2, r4
 800780c:	210a      	movs	r1, #10
 800780e:	4628      	mov	r0, r5
 8007810:	f000 f848 	bl	80078a4 <__swbuf_r>
 8007814:	3001      	adds	r0, #1
 8007816:	d011      	beq.n	800783c <_puts_r+0x84>
 8007818:	250a      	movs	r5, #10
 800781a:	e011      	b.n	8007840 <_puts_r+0x88>
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <_puts_r+0xd4>)
 800781e:	429c      	cmp	r4, r3
 8007820:	d101      	bne.n	8007826 <_puts_r+0x6e>
 8007822:	68ac      	ldr	r4, [r5, #8]
 8007824:	e7da      	b.n	80077dc <_puts_r+0x24>
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <_puts_r+0xd8>)
 8007828:	429c      	cmp	r4, r3
 800782a:	bf08      	it	eq
 800782c:	68ec      	ldreq	r4, [r5, #12]
 800782e:	e7d5      	b.n	80077dc <_puts_r+0x24>
 8007830:	4621      	mov	r1, r4
 8007832:	4628      	mov	r0, r5
 8007834:	f000 f888 	bl	8007948 <__swsetup_r>
 8007838:	2800      	cmp	r0, #0
 800783a:	d0dd      	beq.n	80077f8 <_puts_r+0x40>
 800783c:	f04f 35ff 	mov.w	r5, #4294967295
 8007840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007842:	07da      	lsls	r2, r3, #31
 8007844:	d405      	bmi.n	8007852 <_puts_r+0x9a>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	059b      	lsls	r3, r3, #22
 800784a:	d402      	bmi.n	8007852 <_puts_r+0x9a>
 800784c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800784e:	f001 f921 	bl	8008a94 <__retarget_lock_release_recursive>
 8007852:	4628      	mov	r0, r5
 8007854:	bd70      	pop	{r4, r5, r6, pc}
 8007856:	2b00      	cmp	r3, #0
 8007858:	da04      	bge.n	8007864 <_puts_r+0xac>
 800785a:	69a2      	ldr	r2, [r4, #24]
 800785c:	429a      	cmp	r2, r3
 800785e:	dc06      	bgt.n	800786e <_puts_r+0xb6>
 8007860:	290a      	cmp	r1, #10
 8007862:	d004      	beq.n	800786e <_puts_r+0xb6>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	7019      	strb	r1, [r3, #0]
 800786c:	e7c5      	b.n	80077fa <_puts_r+0x42>
 800786e:	4622      	mov	r2, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f817 	bl	80078a4 <__swbuf_r>
 8007876:	3001      	adds	r0, #1
 8007878:	d1bf      	bne.n	80077fa <_puts_r+0x42>
 800787a:	e7df      	b.n	800783c <_puts_r+0x84>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	250a      	movs	r5, #10
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	6022      	str	r2, [r4, #0]
 8007884:	701d      	strb	r5, [r3, #0]
 8007886:	e7db      	b.n	8007840 <_puts_r+0x88>
 8007888:	08009b28 	.word	0x08009b28
 800788c:	08009b48 	.word	0x08009b48
 8007890:	08009b08 	.word	0x08009b08

08007894 <puts>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <puts+0xc>)
 8007896:	4601      	mov	r1, r0
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f7ff bf8d 	b.w	80077b8 <_puts_r>
 800789e:	bf00      	nop
 80078a0:	20000010 	.word	0x20000010

080078a4 <__swbuf_r>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	460e      	mov	r6, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	4605      	mov	r5, r0
 80078ac:	b118      	cbz	r0, 80078b6 <__swbuf_r+0x12>
 80078ae:	6983      	ldr	r3, [r0, #24]
 80078b0:	b90b      	cbnz	r3, 80078b6 <__swbuf_r+0x12>
 80078b2:	f001 f84b 	bl	800894c <__sinit>
 80078b6:	4b21      	ldr	r3, [pc, #132]	; (800793c <__swbuf_r+0x98>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d12b      	bne.n	8007914 <__swbuf_r+0x70>
 80078bc:	686c      	ldr	r4, [r5, #4]
 80078be:	69a3      	ldr	r3, [r4, #24]
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	071a      	lsls	r2, r3, #28
 80078c6:	d52f      	bpl.n	8007928 <__swbuf_r+0x84>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	b36b      	cbz	r3, 8007928 <__swbuf_r+0x84>
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	1ac0      	subs	r0, r0, r3
 80078d2:	6963      	ldr	r3, [r4, #20]
 80078d4:	b2f6      	uxtb	r6, r6
 80078d6:	4283      	cmp	r3, r0
 80078d8:	4637      	mov	r7, r6
 80078da:	dc04      	bgt.n	80078e6 <__swbuf_r+0x42>
 80078dc:	4621      	mov	r1, r4
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 ffa0 	bl	8008824 <_fflush_r>
 80078e4:	bb30      	cbnz	r0, 8007934 <__swbuf_r+0x90>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	60a3      	str	r3, [r4, #8]
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	6022      	str	r2, [r4, #0]
 80078f2:	701e      	strb	r6, [r3, #0]
 80078f4:	6963      	ldr	r3, [r4, #20]
 80078f6:	3001      	adds	r0, #1
 80078f8:	4283      	cmp	r3, r0
 80078fa:	d004      	beq.n	8007906 <__swbuf_r+0x62>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	07db      	lsls	r3, r3, #31
 8007900:	d506      	bpl.n	8007910 <__swbuf_r+0x6c>
 8007902:	2e0a      	cmp	r6, #10
 8007904:	d104      	bne.n	8007910 <__swbuf_r+0x6c>
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 ff8b 	bl	8008824 <_fflush_r>
 800790e:	b988      	cbnz	r0, 8007934 <__swbuf_r+0x90>
 8007910:	4638      	mov	r0, r7
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <__swbuf_r+0x9c>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d101      	bne.n	800791e <__swbuf_r+0x7a>
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	e7cf      	b.n	80078be <__swbuf_r+0x1a>
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <__swbuf_r+0xa0>)
 8007920:	429c      	cmp	r4, r3
 8007922:	bf08      	it	eq
 8007924:	68ec      	ldreq	r4, [r5, #12]
 8007926:	e7ca      	b.n	80078be <__swbuf_r+0x1a>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f000 f80c 	bl	8007948 <__swsetup_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0cb      	beq.n	80078cc <__swbuf_r+0x28>
 8007934:	f04f 37ff 	mov.w	r7, #4294967295
 8007938:	e7ea      	b.n	8007910 <__swbuf_r+0x6c>
 800793a:	bf00      	nop
 800793c:	08009b28 	.word	0x08009b28
 8007940:	08009b48 	.word	0x08009b48
 8007944:	08009b08 	.word	0x08009b08

08007948 <__swsetup_r>:
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <__swsetup_r+0xcc>)
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	681d      	ldr	r5, [r3, #0]
 800794e:	4606      	mov	r6, r0
 8007950:	460c      	mov	r4, r1
 8007952:	b125      	cbz	r5, 800795e <__swsetup_r+0x16>
 8007954:	69ab      	ldr	r3, [r5, #24]
 8007956:	b913      	cbnz	r3, 800795e <__swsetup_r+0x16>
 8007958:	4628      	mov	r0, r5
 800795a:	f000 fff7 	bl	800894c <__sinit>
 800795e:	4b2e      	ldr	r3, [pc, #184]	; (8007a18 <__swsetup_r+0xd0>)
 8007960:	429c      	cmp	r4, r3
 8007962:	d10f      	bne.n	8007984 <__swsetup_r+0x3c>
 8007964:	686c      	ldr	r4, [r5, #4]
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800796c:	0719      	lsls	r1, r3, #28
 800796e:	d42c      	bmi.n	80079ca <__swsetup_r+0x82>
 8007970:	06dd      	lsls	r5, r3, #27
 8007972:	d411      	bmi.n	8007998 <__swsetup_r+0x50>
 8007974:	2309      	movs	r3, #9
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	e03e      	b.n	8007a02 <__swsetup_r+0xba>
 8007984:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <__swsetup_r+0xd4>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d101      	bne.n	800798e <__swsetup_r+0x46>
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	e7eb      	b.n	8007966 <__swsetup_r+0x1e>
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <__swsetup_r+0xd8>)
 8007990:	429c      	cmp	r4, r3
 8007992:	bf08      	it	eq
 8007994:	68ec      	ldreq	r4, [r5, #12]
 8007996:	e7e6      	b.n	8007966 <__swsetup_r+0x1e>
 8007998:	0758      	lsls	r0, r3, #29
 800799a:	d512      	bpl.n	80079c2 <__swsetup_r+0x7a>
 800799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799e:	b141      	cbz	r1, 80079b2 <__swsetup_r+0x6a>
 80079a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <__swsetup_r+0x66>
 80079a8:	4630      	mov	r0, r6
 80079aa:	f001 fc7d 	bl	80092a8 <_free_r>
 80079ae:	2300      	movs	r3, #0
 80079b0:	6363      	str	r3, [r4, #52]	; 0x34
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f043 0308 	orr.w	r3, r3, #8
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	b94b      	cbnz	r3, 80079e2 <__swsetup_r+0x9a>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d8:	d003      	beq.n	80079e2 <__swsetup_r+0x9a>
 80079da:	4621      	mov	r1, r4
 80079dc:	4630      	mov	r0, r6
 80079de:	f001 f87f 	bl	8008ae0 <__smakebuf_r>
 80079e2:	89a0      	ldrh	r0, [r4, #12]
 80079e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e8:	f010 0301 	ands.w	r3, r0, #1
 80079ec:	d00a      	beq.n	8007a04 <__swsetup_r+0xbc>
 80079ee:	2300      	movs	r3, #0
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	6963      	ldr	r3, [r4, #20]
 80079f4:	425b      	negs	r3, r3
 80079f6:	61a3      	str	r3, [r4, #24]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	b943      	cbnz	r3, 8007a0e <__swsetup_r+0xc6>
 80079fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a00:	d1ba      	bne.n	8007978 <__swsetup_r+0x30>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	0781      	lsls	r1, r0, #30
 8007a06:	bf58      	it	pl
 8007a08:	6963      	ldrpl	r3, [r4, #20]
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	e7f4      	b.n	80079f8 <__swsetup_r+0xb0>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e7f7      	b.n	8007a02 <__swsetup_r+0xba>
 8007a12:	bf00      	nop
 8007a14:	20000010 	.word	0x20000010
 8007a18:	08009b28 	.word	0x08009b28
 8007a1c:	08009b48 	.word	0x08009b48
 8007a20:	08009b08 	.word	0x08009b08

08007a24 <quorem>:
 8007a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	6903      	ldr	r3, [r0, #16]
 8007a2a:	690c      	ldr	r4, [r1, #16]
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	4607      	mov	r7, r0
 8007a30:	f2c0 8081 	blt.w	8007b36 <quorem+0x112>
 8007a34:	3c01      	subs	r4, #1
 8007a36:	f101 0814 	add.w	r8, r1, #20
 8007a3a:	f100 0514 	add.w	r5, r0, #20
 8007a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a58:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a5c:	d331      	bcc.n	8007ac2 <quorem+0x9e>
 8007a5e:	f04f 0e00 	mov.w	lr, #0
 8007a62:	4640      	mov	r0, r8
 8007a64:	46ac      	mov	ip, r5
 8007a66:	46f2      	mov	sl, lr
 8007a68:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a6c:	b293      	uxth	r3, r2
 8007a6e:	fb06 e303 	mla	r3, r6, r3, lr
 8007a72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ebaa 0303 	sub.w	r3, sl, r3
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	f8dc a000 	ldr.w	sl, [ip]
 8007a82:	fb06 e202 	mla	r2, r6, r2, lr
 8007a86:	fa13 f38a 	uxtah	r3, r3, sl
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	fa1f fa82 	uxth.w	sl, r2
 8007a92:	f8dc 2000 	ldr.w	r2, [ip]
 8007a96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa4:	4581      	cmp	r9, r0
 8007aa6:	f84c 3b04 	str.w	r3, [ip], #4
 8007aaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aae:	d2db      	bcs.n	8007a68 <quorem+0x44>
 8007ab0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ab4:	b92b      	cbnz	r3, 8007ac2 <quorem+0x9e>
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	3b04      	subs	r3, #4
 8007aba:	429d      	cmp	r5, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	d32e      	bcc.n	8007b1e <quorem+0xfa>
 8007ac0:	613c      	str	r4, [r7, #16]
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f001 fae0 	bl	8009088 <__mcmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	db24      	blt.n	8007b16 <quorem+0xf2>
 8007acc:	3601      	adds	r6, #1
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f04f 0c00 	mov.w	ip, #0
 8007ad4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ad8:	f8d0 e000 	ldr.w	lr, [r0]
 8007adc:	b293      	uxth	r3, r2
 8007ade:	ebac 0303 	sub.w	r3, ip, r3
 8007ae2:	0c12      	lsrs	r2, r2, #16
 8007ae4:	fa13 f38e 	uxtah	r3, r3, lr
 8007ae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af6:	45c1      	cmp	r9, r8
 8007af8:	f840 3b04 	str.w	r3, [r0], #4
 8007afc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b00:	d2e8      	bcs.n	8007ad4 <quorem+0xb0>
 8007b02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b0a:	b922      	cbnz	r2, 8007b16 <quorem+0xf2>
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	429d      	cmp	r5, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	d30a      	bcc.n	8007b2a <quorem+0x106>
 8007b14:	613c      	str	r4, [r7, #16]
 8007b16:	4630      	mov	r0, r6
 8007b18:	b003      	add	sp, #12
 8007b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	d1cc      	bne.n	8007ac0 <quorem+0x9c>
 8007b26:	3c01      	subs	r4, #1
 8007b28:	e7c7      	b.n	8007aba <quorem+0x96>
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d1f0      	bne.n	8007b14 <quorem+0xf0>
 8007b32:	3c01      	subs	r4, #1
 8007b34:	e7eb      	b.n	8007b0e <quorem+0xea>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e7ee      	b.n	8007b18 <quorem+0xf4>
 8007b3a:	0000      	movs	r0, r0
 8007b3c:	0000      	movs	r0, r0
	...

08007b40 <_dtoa_r>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	ed2d 8b02 	vpush	{d8}
 8007b48:	ec57 6b10 	vmov	r6, r7, d0
 8007b4c:	b095      	sub	sp, #84	; 0x54
 8007b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b54:	9105      	str	r1, [sp, #20]
 8007b56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b60:	b975      	cbnz	r5, 8007b80 <_dtoa_r+0x40>
 8007b62:	2010      	movs	r0, #16
 8007b64:	f000 fffc 	bl	8008b60 <malloc>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b6c:	b920      	cbnz	r0, 8007b78 <_dtoa_r+0x38>
 8007b6e:	4bb2      	ldr	r3, [pc, #712]	; (8007e38 <_dtoa_r+0x2f8>)
 8007b70:	21ea      	movs	r1, #234	; 0xea
 8007b72:	48b2      	ldr	r0, [pc, #712]	; (8007e3c <_dtoa_r+0x2fc>)
 8007b74:	f001 fe02 	bl	800977c <__assert_func>
 8007b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b7c:	6005      	str	r5, [r0, #0]
 8007b7e:	60c5      	str	r5, [r0, #12]
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	b151      	cbz	r1, 8007b9c <_dtoa_r+0x5c>
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	604a      	str	r2, [r1, #4]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4093      	lsls	r3, r2
 8007b8e:	608b      	str	r3, [r1, #8]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 f83b 	bl	8008c0c <_Bfree>
 8007b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	1e3b      	subs	r3, r7, #0
 8007b9e:	bfb9      	ittee	lt
 8007ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	9303      	strlt	r3, [sp, #12]
 8007ba6:	2300      	movge	r3, #0
 8007ba8:	f8c8 3000 	strge.w	r3, [r8]
 8007bac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007bb0:	4ba3      	ldr	r3, [pc, #652]	; (8007e40 <_dtoa_r+0x300>)
 8007bb2:	bfbc      	itt	lt
 8007bb4:	2201      	movlt	r2, #1
 8007bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8007bba:	ea33 0309 	bics.w	r3, r3, r9
 8007bbe:	d11b      	bne.n	8007bf8 <_dtoa_r+0xb8>
 8007bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bcc:	4333      	orrs	r3, r6
 8007bce:	f000 857a 	beq.w	80086c6 <_dtoa_r+0xb86>
 8007bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd4:	b963      	cbnz	r3, 8007bf0 <_dtoa_r+0xb0>
 8007bd6:	4b9b      	ldr	r3, [pc, #620]	; (8007e44 <_dtoa_r+0x304>)
 8007bd8:	e024      	b.n	8007c24 <_dtoa_r+0xe4>
 8007bda:	4b9b      	ldr	r3, [pc, #620]	; (8007e48 <_dtoa_r+0x308>)
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	9800      	ldr	r0, [sp, #0]
 8007be6:	b015      	add	sp, #84	; 0x54
 8007be8:	ecbd 8b02 	vpop	{d8}
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	4b94      	ldr	r3, [pc, #592]	; (8007e44 <_dtoa_r+0x304>)
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	e7f3      	b.n	8007be0 <_dtoa_r+0xa0>
 8007bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	ec51 0b17 	vmov	r0, r1, d7
 8007c02:	2300      	movs	r3, #0
 8007c04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c08:	f7f8 ff76 	bl	8000af8 <__aeabi_dcmpeq>
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	b158      	cbz	r0, 8007c28 <_dtoa_r+0xe8>
 8007c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c12:	2301      	movs	r3, #1
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8551 	beq.w	80086c0 <_dtoa_r+0xb80>
 8007c1e:	488b      	ldr	r0, [pc, #556]	; (8007e4c <_dtoa_r+0x30c>)
 8007c20:	6018      	str	r0, [r3, #0]
 8007c22:	1e43      	subs	r3, r0, #1
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	e7dd      	b.n	8007be4 <_dtoa_r+0xa4>
 8007c28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c2c:	aa12      	add	r2, sp, #72	; 0x48
 8007c2e:	a913      	add	r1, sp, #76	; 0x4c
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 facd 	bl	80091d0 <__d2b>
 8007c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c3a:	4683      	mov	fp, r0
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	d07c      	beq.n	8007d3a <_dtoa_r+0x1fa>
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c5a:	4b7d      	ldr	r3, [pc, #500]	; (8007e50 <_dtoa_r+0x310>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4639      	mov	r1, r7
 8007c62:	f7f8 fb29 	bl	80002b8 <__aeabi_dsub>
 8007c66:	a36e      	add	r3, pc, #440	; (adr r3, 8007e20 <_dtoa_r+0x2e0>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fcdc 	bl	8000628 <__aeabi_dmul>
 8007c70:	a36d      	add	r3, pc, #436	; (adr r3, 8007e28 <_dtoa_r+0x2e8>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fb21 	bl	80002bc <__adddf3>
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	460f      	mov	r7, r1
 8007c80:	f7f8 fc68 	bl	8000554 <__aeabi_i2d>
 8007c84:	a36a      	add	r3, pc, #424	; (adr r3, 8007e30 <_dtoa_r+0x2f0>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fccd 	bl	8000628 <__aeabi_dmul>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fb11 	bl	80002bc <__adddf3>
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	f7f8 ff73 	bl	8000b88 <__aeabi_d2iz>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 ff2e 	bl	8000b0c <__aeabi_dcmplt>
 8007cb0:	b148      	cbz	r0, 8007cc6 <_dtoa_r+0x186>
 8007cb2:	4650      	mov	r0, sl
 8007cb4:	f7f8 fc4e 	bl	8000554 <__aeabi_i2d>
 8007cb8:	4632      	mov	r2, r6
 8007cba:	463b      	mov	r3, r7
 8007cbc:	f7f8 ff1c 	bl	8000af8 <__aeabi_dcmpeq>
 8007cc0:	b908      	cbnz	r0, 8007cc6 <_dtoa_r+0x186>
 8007cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc6:	f1ba 0f16 	cmp.w	sl, #22
 8007cca:	d854      	bhi.n	8007d76 <_dtoa_r+0x236>
 8007ccc:	4b61      	ldr	r3, [pc, #388]	; (8007e54 <_dtoa_r+0x314>)
 8007cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cda:	f7f8 ff17 	bl	8000b0c <__aeabi_dcmplt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d04b      	beq.n	8007d7a <_dtoa_r+0x23a>
 8007ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cec:	1b5d      	subs	r5, r3, r5
 8007cee:	1e6b      	subs	r3, r5, #1
 8007cf0:	9304      	str	r3, [sp, #16]
 8007cf2:	bf43      	ittte	mi
 8007cf4:	2300      	movmi	r3, #0
 8007cf6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007cfa:	9304      	strmi	r3, [sp, #16]
 8007cfc:	f04f 0800 	movpl.w	r8, #0
 8007d00:	f1ba 0f00 	cmp.w	sl, #0
 8007d04:	db3b      	blt.n	8007d7e <_dtoa_r+0x23e>
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d0c:	4453      	add	r3, sl
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9306      	str	r3, [sp, #24]
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d869      	bhi.n	8007dee <_dtoa_r+0x2ae>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	9305      	strgt	r3, [sp, #20]
 8007d22:	9b05      	ldr	r3, [sp, #20]
 8007d24:	f1a3 0302 	sub.w	r3, r3, #2
 8007d28:	bfcc      	ite	gt
 8007d2a:	2500      	movgt	r5, #0
 8007d2c:	2501      	movle	r5, #1
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d869      	bhi.n	8007e06 <_dtoa_r+0x2c6>
 8007d32:	e8df f003 	tbb	[pc, r3]
 8007d36:	4e2c      	.short	0x4e2c
 8007d38:	5a4c      	.short	0x5a4c
 8007d3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d3e:	441d      	add	r5, r3
 8007d40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	bfc1      	itttt	gt
 8007d48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d50:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d58:	bfda      	itte	le
 8007d5a:	f1c3 0320 	rsble	r3, r3, #32
 8007d5e:	fa06 f003 	lslle.w	r0, r6, r3
 8007d62:	4318      	orrgt	r0, r3
 8007d64:	f7f8 fbe6 	bl	8000534 <__aeabi_ui2d>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d70:	3d01      	subs	r5, #1
 8007d72:	9310      	str	r3, [sp, #64]	; 0x40
 8007d74:	e771      	b.n	8007c5a <_dtoa_r+0x11a>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7b6      	b.n	8007ce8 <_dtoa_r+0x1a8>
 8007d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8007d7c:	e7b5      	b.n	8007cea <_dtoa_r+0x1aa>
 8007d7e:	f1ca 0300 	rsb	r3, sl, #0
 8007d82:	9306      	str	r3, [sp, #24]
 8007d84:	2300      	movs	r3, #0
 8007d86:	eba8 080a 	sub.w	r8, r8, sl
 8007d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d8c:	e7c2      	b.n	8007d14 <_dtoa_r+0x1d4>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dc39      	bgt.n	8007e0c <_dtoa_r+0x2cc>
 8007d98:	f04f 0901 	mov.w	r9, #1
 8007d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007da0:	464b      	mov	r3, r9
 8007da2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007da8:	2200      	movs	r2, #0
 8007daa:	6042      	str	r2, [r0, #4]
 8007dac:	2204      	movs	r2, #4
 8007dae:	f102 0614 	add.w	r6, r2, #20
 8007db2:	429e      	cmp	r6, r3
 8007db4:	6841      	ldr	r1, [r0, #4]
 8007db6:	d92f      	bls.n	8007e18 <_dtoa_r+0x2d8>
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fee7 	bl	8008b8c <_Balloc>
 8007dbe:	9000      	str	r0, [sp, #0]
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d14b      	bne.n	8007e5c <_dtoa_r+0x31c>
 8007dc4:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <_dtoa_r+0x318>)
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dcc:	e6d1      	b.n	8007b72 <_dtoa_r+0x32>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e7de      	b.n	8007d90 <_dtoa_r+0x250>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9308      	str	r3, [sp, #32]
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	eb0a 0903 	add.w	r9, sl, r3
 8007ddc:	f109 0301 	add.w	r3, r9, #1
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	bfb8      	it	lt
 8007de6:	2301      	movlt	r3, #1
 8007de8:	e7dd      	b.n	8007da6 <_dtoa_r+0x266>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7f2      	b.n	8007dd4 <_dtoa_r+0x294>
 8007dee:	2501      	movs	r5, #1
 8007df0:	2300      	movs	r3, #0
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	9508      	str	r5, [sp, #32]
 8007df6:	f04f 39ff 	mov.w	r9, #4294967295
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e00:	2312      	movs	r3, #18
 8007e02:	9209      	str	r2, [sp, #36]	; 0x24
 8007e04:	e7cf      	b.n	8007da6 <_dtoa_r+0x266>
 8007e06:	2301      	movs	r3, #1
 8007e08:	9308      	str	r3, [sp, #32]
 8007e0a:	e7f4      	b.n	8007df6 <_dtoa_r+0x2b6>
 8007e0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e14:	464b      	mov	r3, r9
 8007e16:	e7c6      	b.n	8007da6 <_dtoa_r+0x266>
 8007e18:	3101      	adds	r1, #1
 8007e1a:	6041      	str	r1, [r0, #4]
 8007e1c:	0052      	lsls	r2, r2, #1
 8007e1e:	e7c6      	b.n	8007dae <_dtoa_r+0x26e>
 8007e20:	636f4361 	.word	0x636f4361
 8007e24:	3fd287a7 	.word	0x3fd287a7
 8007e28:	8b60c8b3 	.word	0x8b60c8b3
 8007e2c:	3fc68a28 	.word	0x3fc68a28
 8007e30:	509f79fb 	.word	0x509f79fb
 8007e34:	3fd34413 	.word	0x3fd34413
 8007e38:	08009a81 	.word	0x08009a81
 8007e3c:	08009a98 	.word	0x08009a98
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	08009a7d 	.word	0x08009a7d
 8007e48:	08009a74 	.word	0x08009a74
 8007e4c:	08009a51 	.word	0x08009a51
 8007e50:	3ff80000 	.word	0x3ff80000
 8007e54:	08009bf0 	.word	0x08009bf0
 8007e58:	08009af7 	.word	0x08009af7
 8007e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5e:	9a00      	ldr	r2, [sp, #0]
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	2b0e      	cmp	r3, #14
 8007e66:	f200 80ad 	bhi.w	8007fc4 <_dtoa_r+0x484>
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	f000 80aa 	beq.w	8007fc4 <_dtoa_r+0x484>
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	dd36      	ble.n	8007ee4 <_dtoa_r+0x3a4>
 8007e76:	4ac3      	ldr	r2, [pc, #780]	; (8008184 <_dtoa_r+0x644>)
 8007e78:	f00a 030f 	and.w	r3, sl, #15
 8007e7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e80:	ed93 7b00 	vldr	d7, [r3]
 8007e84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8007e90:	eef0 8a67 	vmov.f32	s17, s15
 8007e94:	d016      	beq.n	8007ec4 <_dtoa_r+0x384>
 8007e96:	4bbc      	ldr	r3, [pc, #752]	; (8008188 <_dtoa_r+0x648>)
 8007e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea0:	f7f8 fcec 	bl	800087c <__aeabi_ddiv>
 8007ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea8:	f007 070f 	and.w	r7, r7, #15
 8007eac:	2503      	movs	r5, #3
 8007eae:	4eb6      	ldr	r6, [pc, #728]	; (8008188 <_dtoa_r+0x648>)
 8007eb0:	b957      	cbnz	r7, 8007ec8 <_dtoa_r+0x388>
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	ec53 2b18 	vmov	r2, r3, d8
 8007eba:	f7f8 fcdf 	bl	800087c <__aeabi_ddiv>
 8007ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec2:	e029      	b.n	8007f18 <_dtoa_r+0x3d8>
 8007ec4:	2502      	movs	r5, #2
 8007ec6:	e7f2      	b.n	8007eae <_dtoa_r+0x36e>
 8007ec8:	07f9      	lsls	r1, r7, #31
 8007eca:	d508      	bpl.n	8007ede <_dtoa_r+0x39e>
 8007ecc:	ec51 0b18 	vmov	r0, r1, d8
 8007ed0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ed4:	f7f8 fba8 	bl	8000628 <__aeabi_dmul>
 8007ed8:	ec41 0b18 	vmov	d8, r0, r1
 8007edc:	3501      	adds	r5, #1
 8007ede:	107f      	asrs	r7, r7, #1
 8007ee0:	3608      	adds	r6, #8
 8007ee2:	e7e5      	b.n	8007eb0 <_dtoa_r+0x370>
 8007ee4:	f000 80a6 	beq.w	8008034 <_dtoa_r+0x4f4>
 8007ee8:	f1ca 0600 	rsb	r6, sl, #0
 8007eec:	4ba5      	ldr	r3, [pc, #660]	; (8008184 <_dtoa_r+0x644>)
 8007eee:	4fa6      	ldr	r7, [pc, #664]	; (8008188 <_dtoa_r+0x648>)
 8007ef0:	f006 020f 	and.w	r2, r6, #15
 8007ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f00:	f7f8 fb92 	bl	8000628 <__aeabi_dmul>
 8007f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f08:	1136      	asrs	r6, r6, #4
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2502      	movs	r5, #2
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	f040 8085 	bne.w	800801e <_dtoa_r+0x4de>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1d2      	bne.n	8007ebe <_dtoa_r+0x37e>
 8007f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 808c 	beq.w	8008038 <_dtoa_r+0x4f8>
 8007f20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f24:	4b99      	ldr	r3, [pc, #612]	; (800818c <_dtoa_r+0x64c>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f7f8 fdee 	bl	8000b0c <__aeabi_dcmplt>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f000 8081 	beq.w	8008038 <_dtoa_r+0x4f8>
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d07d      	beq.n	8008038 <_dtoa_r+0x4f8>
 8007f3c:	f1b9 0f00 	cmp.w	r9, #0
 8007f40:	dd3c      	ble.n	8007fbc <_dtoa_r+0x47c>
 8007f42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f46:	9307      	str	r3, [sp, #28]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4b91      	ldr	r3, [pc, #580]	; (8008190 <_dtoa_r+0x650>)
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 fb6a 	bl	8000628 <__aeabi_dmul>
 8007f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f58:	3501      	adds	r5, #1
 8007f5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7f8 faf6 	bl	8000554 <__aeabi_i2d>
 8007f68:	4632      	mov	r2, r6
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	f7f8 fb5c 	bl	8000628 <__aeabi_dmul>
 8007f70:	4b88      	ldr	r3, [pc, #544]	; (8008194 <_dtoa_r+0x654>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	f7f8 f9a2 	bl	80002bc <__adddf3>
 8007f78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d15c      	bne.n	8008042 <_dtoa_r+0x502>
 8007f88:	4b83      	ldr	r3, [pc, #524]	; (8008198 <_dtoa_r+0x658>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 f992 	bl	80002b8 <__aeabi_dsub>
 8007f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	f7f8 fdd4 	bl	8000b48 <__aeabi_dcmpgt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f040 8296 	bne.w	80084d2 <_dtoa_r+0x992>
 8007fa6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007faa:	4630      	mov	r0, r6
 8007fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	f7f8 fdab 	bl	8000b0c <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f040 8288 	bne.w	80084cc <_dtoa_r+0x98c>
 8007fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f2c0 8158 	blt.w	800827c <_dtoa_r+0x73c>
 8007fcc:	f1ba 0f0e 	cmp.w	sl, #14
 8007fd0:	f300 8154 	bgt.w	800827c <_dtoa_r+0x73c>
 8007fd4:	4b6b      	ldr	r3, [pc, #428]	; (8008184 <_dtoa_r+0x644>)
 8007fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f280 80e3 	bge.w	80081ac <_dtoa_r+0x66c>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f300 80df 	bgt.w	80081ac <_dtoa_r+0x66c>
 8007fee:	f040 826d 	bne.w	80084cc <_dtoa_r+0x98c>
 8007ff2:	4b69      	ldr	r3, [pc, #420]	; (8008198 <_dtoa_r+0x658>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f7f8 fb15 	bl	8000628 <__aeabi_dmul>
 8007ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008002:	f7f8 fd97 	bl	8000b34 <__aeabi_dcmpge>
 8008006:	9e01      	ldr	r6, [sp, #4]
 8008008:	4637      	mov	r7, r6
 800800a:	2800      	cmp	r0, #0
 800800c:	f040 8243 	bne.w	8008496 <_dtoa_r+0x956>
 8008010:	9d00      	ldr	r5, [sp, #0]
 8008012:	2331      	movs	r3, #49	; 0x31
 8008014:	f805 3b01 	strb.w	r3, [r5], #1
 8008018:	f10a 0a01 	add.w	sl, sl, #1
 800801c:	e23f      	b.n	800849e <_dtoa_r+0x95e>
 800801e:	07f2      	lsls	r2, r6, #31
 8008020:	d505      	bpl.n	800802e <_dtoa_r+0x4ee>
 8008022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008026:	f7f8 faff 	bl	8000628 <__aeabi_dmul>
 800802a:	3501      	adds	r5, #1
 800802c:	2301      	movs	r3, #1
 800802e:	1076      	asrs	r6, r6, #1
 8008030:	3708      	adds	r7, #8
 8008032:	e76c      	b.n	8007f0e <_dtoa_r+0x3ce>
 8008034:	2502      	movs	r5, #2
 8008036:	e76f      	b.n	8007f18 <_dtoa_r+0x3d8>
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	f8cd a01c 	str.w	sl, [sp, #28]
 800803e:	930c      	str	r3, [sp, #48]	; 0x30
 8008040:	e78d      	b.n	8007f5e <_dtoa_r+0x41e>
 8008042:	9900      	ldr	r1, [sp, #0]
 8008044:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008048:	4b4e      	ldr	r3, [pc, #312]	; (8008184 <_dtoa_r+0x644>)
 800804a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800804e:	4401      	add	r1, r0
 8008050:	9102      	str	r1, [sp, #8]
 8008052:	9908      	ldr	r1, [sp, #32]
 8008054:	eeb0 8a47 	vmov.f32	s16, s14
 8008058:	eef0 8a67 	vmov.f32	s17, s15
 800805c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008064:	2900      	cmp	r1, #0
 8008066:	d045      	beq.n	80080f4 <_dtoa_r+0x5b4>
 8008068:	494c      	ldr	r1, [pc, #304]	; (800819c <_dtoa_r+0x65c>)
 800806a:	2000      	movs	r0, #0
 800806c:	f7f8 fc06 	bl	800087c <__aeabi_ddiv>
 8008070:	ec53 2b18 	vmov	r2, r3, d8
 8008074:	f7f8 f920 	bl	80002b8 <__aeabi_dsub>
 8008078:	9d00      	ldr	r5, [sp, #0]
 800807a:	ec41 0b18 	vmov	d8, r0, r1
 800807e:	4639      	mov	r1, r7
 8008080:	4630      	mov	r0, r6
 8008082:	f7f8 fd81 	bl	8000b88 <__aeabi_d2iz>
 8008086:	900c      	str	r0, [sp, #48]	; 0x30
 8008088:	f7f8 fa64 	bl	8000554 <__aeabi_i2d>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f910 	bl	80002b8 <__aeabi_dsub>
 8008098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809a:	3330      	adds	r3, #48	; 0x30
 800809c:	f805 3b01 	strb.w	r3, [r5], #1
 80080a0:	ec53 2b18 	vmov	r2, r3, d8
 80080a4:	4606      	mov	r6, r0
 80080a6:	460f      	mov	r7, r1
 80080a8:	f7f8 fd30 	bl	8000b0c <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d165      	bne.n	800817c <_dtoa_r+0x63c>
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	4935      	ldr	r1, [pc, #212]	; (800818c <_dtoa_r+0x64c>)
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7f8 f8fe 	bl	80002b8 <__aeabi_dsub>
 80080bc:	ec53 2b18 	vmov	r2, r3, d8
 80080c0:	f7f8 fd24 	bl	8000b0c <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 80b9 	bne.w	800823c <_dtoa_r+0x6fc>
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	429d      	cmp	r5, r3
 80080ce:	f43f af75 	beq.w	8007fbc <_dtoa_r+0x47c>
 80080d2:	4b2f      	ldr	r3, [pc, #188]	; (8008190 <_dtoa_r+0x650>)
 80080d4:	ec51 0b18 	vmov	r0, r1, d8
 80080d8:	2200      	movs	r2, #0
 80080da:	f7f8 faa5 	bl	8000628 <__aeabi_dmul>
 80080de:	4b2c      	ldr	r3, [pc, #176]	; (8008190 <_dtoa_r+0x650>)
 80080e0:	ec41 0b18 	vmov	d8, r0, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 fa9d 	bl	8000628 <__aeabi_dmul>
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	e7c4      	b.n	800807e <_dtoa_r+0x53e>
 80080f4:	ec51 0b17 	vmov	r0, r1, d7
 80080f8:	f7f8 fa96 	bl	8000628 <__aeabi_dmul>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	9d00      	ldr	r5, [sp, #0]
 8008100:	930c      	str	r3, [sp, #48]	; 0x30
 8008102:	ec41 0b18 	vmov	d8, r0, r1
 8008106:	4639      	mov	r1, r7
 8008108:	4630      	mov	r0, r6
 800810a:	f7f8 fd3d 	bl	8000b88 <__aeabi_d2iz>
 800810e:	9011      	str	r0, [sp, #68]	; 0x44
 8008110:	f7f8 fa20 	bl	8000554 <__aeabi_i2d>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4630      	mov	r0, r6
 800811a:	4639      	mov	r1, r7
 800811c:	f7f8 f8cc 	bl	80002b8 <__aeabi_dsub>
 8008120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008122:	3330      	adds	r3, #48	; 0x30
 8008124:	f805 3b01 	strb.w	r3, [r5], #1
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	429d      	cmp	r5, r3
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	d134      	bne.n	80081a0 <_dtoa_r+0x660>
 8008136:	4b19      	ldr	r3, [pc, #100]	; (800819c <_dtoa_r+0x65c>)
 8008138:	ec51 0b18 	vmov	r0, r1, d8
 800813c:	f7f8 f8be 	bl	80002bc <__adddf3>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fcfe 	bl	8000b48 <__aeabi_dcmpgt>
 800814c:	2800      	cmp	r0, #0
 800814e:	d175      	bne.n	800823c <_dtoa_r+0x6fc>
 8008150:	ec53 2b18 	vmov	r2, r3, d8
 8008154:	4911      	ldr	r1, [pc, #68]	; (800819c <_dtoa_r+0x65c>)
 8008156:	2000      	movs	r0, #0
 8008158:	f7f8 f8ae 	bl	80002b8 <__aeabi_dsub>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fcd2 	bl	8000b0c <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f43f af27 	beq.w	8007fbc <_dtoa_r+0x47c>
 800816e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008170:	1e6b      	subs	r3, r5, #1
 8008172:	930c      	str	r3, [sp, #48]	; 0x30
 8008174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	d0f8      	beq.n	800816e <_dtoa_r+0x62e>
 800817c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008180:	e04a      	b.n	8008218 <_dtoa_r+0x6d8>
 8008182:	bf00      	nop
 8008184:	08009bf0 	.word	0x08009bf0
 8008188:	08009bc8 	.word	0x08009bc8
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	40240000 	.word	0x40240000
 8008194:	401c0000 	.word	0x401c0000
 8008198:	40140000 	.word	0x40140000
 800819c:	3fe00000 	.word	0x3fe00000
 80081a0:	4baf      	ldr	r3, [pc, #700]	; (8008460 <_dtoa_r+0x920>)
 80081a2:	f7f8 fa41 	bl	8000628 <__aeabi_dmul>
 80081a6:	4606      	mov	r6, r0
 80081a8:	460f      	mov	r7, r1
 80081aa:	e7ac      	b.n	8008106 <_dtoa_r+0x5c6>
 80081ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081b0:	9d00      	ldr	r5, [sp, #0]
 80081b2:	4642      	mov	r2, r8
 80081b4:	464b      	mov	r3, r9
 80081b6:	4630      	mov	r0, r6
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fb5f 	bl	800087c <__aeabi_ddiv>
 80081be:	f7f8 fce3 	bl	8000b88 <__aeabi_d2iz>
 80081c2:	9002      	str	r0, [sp, #8]
 80081c4:	f7f8 f9c6 	bl	8000554 <__aeabi_i2d>
 80081c8:	4642      	mov	r2, r8
 80081ca:	464b      	mov	r3, r9
 80081cc:	f7f8 fa2c 	bl	8000628 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f7f8 f86e 	bl	80002b8 <__aeabi_dsub>
 80081dc:	9e02      	ldr	r6, [sp, #8]
 80081de:	9f01      	ldr	r7, [sp, #4]
 80081e0:	3630      	adds	r6, #48	; 0x30
 80081e2:	f805 6b01 	strb.w	r6, [r5], #1
 80081e6:	9e00      	ldr	r6, [sp, #0]
 80081e8:	1bae      	subs	r6, r5, r6
 80081ea:	42b7      	cmp	r7, r6
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	d137      	bne.n	8008262 <_dtoa_r+0x722>
 80081f2:	f7f8 f863 	bl	80002bc <__adddf3>
 80081f6:	4642      	mov	r2, r8
 80081f8:	464b      	mov	r3, r9
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	f7f8 fca3 	bl	8000b48 <__aeabi_dcmpgt>
 8008202:	b9c8      	cbnz	r0, 8008238 <_dtoa_r+0x6f8>
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fc74 	bl	8000af8 <__aeabi_dcmpeq>
 8008210:	b110      	cbz	r0, 8008218 <_dtoa_r+0x6d8>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	07d9      	lsls	r1, r3, #31
 8008216:	d40f      	bmi.n	8008238 <_dtoa_r+0x6f8>
 8008218:	4620      	mov	r0, r4
 800821a:	4659      	mov	r1, fp
 800821c:	f000 fcf6 	bl	8008c0c <_Bfree>
 8008220:	2300      	movs	r3, #0
 8008222:	702b      	strb	r3, [r5, #0]
 8008224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008226:	f10a 0001 	add.w	r0, sl, #1
 800822a:	6018      	str	r0, [r3, #0]
 800822c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800822e:	2b00      	cmp	r3, #0
 8008230:	f43f acd8 	beq.w	8007be4 <_dtoa_r+0xa4>
 8008234:	601d      	str	r5, [r3, #0]
 8008236:	e4d5      	b.n	8007be4 <_dtoa_r+0xa4>
 8008238:	f8cd a01c 	str.w	sl, [sp, #28]
 800823c:	462b      	mov	r3, r5
 800823e:	461d      	mov	r5, r3
 8008240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008244:	2a39      	cmp	r2, #57	; 0x39
 8008246:	d108      	bne.n	800825a <_dtoa_r+0x71a>
 8008248:	9a00      	ldr	r2, [sp, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d1f7      	bne.n	800823e <_dtoa_r+0x6fe>
 800824e:	9a07      	ldr	r2, [sp, #28]
 8008250:	9900      	ldr	r1, [sp, #0]
 8008252:	3201      	adds	r2, #1
 8008254:	9207      	str	r2, [sp, #28]
 8008256:	2230      	movs	r2, #48	; 0x30
 8008258:	700a      	strb	r2, [r1, #0]
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	3201      	adds	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e78c      	b.n	800817c <_dtoa_r+0x63c>
 8008262:	4b7f      	ldr	r3, [pc, #508]	; (8008460 <_dtoa_r+0x920>)
 8008264:	2200      	movs	r2, #0
 8008266:	f7f8 f9df 	bl	8000628 <__aeabi_dmul>
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	f7f8 fc41 	bl	8000af8 <__aeabi_dcmpeq>
 8008276:	2800      	cmp	r0, #0
 8008278:	d09b      	beq.n	80081b2 <_dtoa_r+0x672>
 800827a:	e7cd      	b.n	8008218 <_dtoa_r+0x6d8>
 800827c:	9a08      	ldr	r2, [sp, #32]
 800827e:	2a00      	cmp	r2, #0
 8008280:	f000 80c4 	beq.w	800840c <_dtoa_r+0x8cc>
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	2a01      	cmp	r2, #1
 8008288:	f300 80a8 	bgt.w	80083dc <_dtoa_r+0x89c>
 800828c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800828e:	2a00      	cmp	r2, #0
 8008290:	f000 80a0 	beq.w	80083d4 <_dtoa_r+0x894>
 8008294:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008298:	9e06      	ldr	r6, [sp, #24]
 800829a:	4645      	mov	r5, r8
 800829c:	9a04      	ldr	r2, [sp, #16]
 800829e:	2101      	movs	r1, #1
 80082a0:	441a      	add	r2, r3
 80082a2:	4620      	mov	r0, r4
 80082a4:	4498      	add	r8, r3
 80082a6:	9204      	str	r2, [sp, #16]
 80082a8:	f000 fd6c 	bl	8008d84 <__i2b>
 80082ac:	4607      	mov	r7, r0
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	dd0b      	ble.n	80082ca <_dtoa_r+0x78a>
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd08      	ble.n	80082ca <_dtoa_r+0x78a>
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	bfa8      	it	ge
 80082be:	462b      	movge	r3, r5
 80082c0:	eba8 0803 	sub.w	r8, r8, r3
 80082c4:	1aed      	subs	r5, r5, r3
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	b1fb      	cbz	r3, 800830e <_dtoa_r+0x7ce>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 809f 	beq.w	8008414 <_dtoa_r+0x8d4>
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	dd11      	ble.n	80082fe <_dtoa_r+0x7be>
 80082da:	4639      	mov	r1, r7
 80082dc:	4632      	mov	r2, r6
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fe0c 	bl	8008efc <__pow5mult>
 80082e4:	465a      	mov	r2, fp
 80082e6:	4601      	mov	r1, r0
 80082e8:	4607      	mov	r7, r0
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fd60 	bl	8008db0 <__multiply>
 80082f0:	4659      	mov	r1, fp
 80082f2:	9007      	str	r0, [sp, #28]
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fc89 	bl	8008c0c <_Bfree>
 80082fa:	9b07      	ldr	r3, [sp, #28]
 80082fc:	469b      	mov	fp, r3
 80082fe:	9b06      	ldr	r3, [sp, #24]
 8008300:	1b9a      	subs	r2, r3, r6
 8008302:	d004      	beq.n	800830e <_dtoa_r+0x7ce>
 8008304:	4659      	mov	r1, fp
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fdf8 	bl	8008efc <__pow5mult>
 800830c:	4683      	mov	fp, r0
 800830e:	2101      	movs	r1, #1
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fd37 	bl	8008d84 <__i2b>
 8008316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008318:	2b00      	cmp	r3, #0
 800831a:	4606      	mov	r6, r0
 800831c:	dd7c      	ble.n	8008418 <_dtoa_r+0x8d8>
 800831e:	461a      	mov	r2, r3
 8008320:	4601      	mov	r1, r0
 8008322:	4620      	mov	r0, r4
 8008324:	f000 fdea 	bl	8008efc <__pow5mult>
 8008328:	9b05      	ldr	r3, [sp, #20]
 800832a:	2b01      	cmp	r3, #1
 800832c:	4606      	mov	r6, r0
 800832e:	dd76      	ble.n	800841e <_dtoa_r+0x8de>
 8008330:	2300      	movs	r3, #0
 8008332:	9306      	str	r3, [sp, #24]
 8008334:	6933      	ldr	r3, [r6, #16]
 8008336:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800833a:	6918      	ldr	r0, [r3, #16]
 800833c:	f000 fcd2 	bl	8008ce4 <__hi0bits>
 8008340:	f1c0 0020 	rsb	r0, r0, #32
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	4418      	add	r0, r3
 8008348:	f010 001f 	ands.w	r0, r0, #31
 800834c:	f000 8086 	beq.w	800845c <_dtoa_r+0x91c>
 8008350:	f1c0 0320 	rsb	r3, r0, #32
 8008354:	2b04      	cmp	r3, #4
 8008356:	dd7f      	ble.n	8008458 <_dtoa_r+0x918>
 8008358:	f1c0 001c 	rsb	r0, r0, #28
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	4403      	add	r3, r0
 8008360:	4480      	add	r8, r0
 8008362:	4405      	add	r5, r0
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f1b8 0f00 	cmp.w	r8, #0
 800836a:	dd05      	ble.n	8008378 <_dtoa_r+0x838>
 800836c:	4659      	mov	r1, fp
 800836e:	4642      	mov	r2, r8
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fe1d 	bl	8008fb0 <__lshift>
 8008376:	4683      	mov	fp, r0
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd05      	ble.n	800838a <_dtoa_r+0x84a>
 800837e:	4631      	mov	r1, r6
 8008380:	461a      	mov	r2, r3
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fe14 	bl	8008fb0 <__lshift>
 8008388:	4606      	mov	r6, r0
 800838a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d069      	beq.n	8008464 <_dtoa_r+0x924>
 8008390:	4631      	mov	r1, r6
 8008392:	4658      	mov	r0, fp
 8008394:	f000 fe78 	bl	8009088 <__mcmp>
 8008398:	2800      	cmp	r0, #0
 800839a:	da63      	bge.n	8008464 <_dtoa_r+0x924>
 800839c:	2300      	movs	r3, #0
 800839e:	4659      	mov	r1, fp
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 fc54 	bl	8008c50 <__multadd>
 80083a8:	9b08      	ldr	r3, [sp, #32]
 80083aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ae:	4683      	mov	fp, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 818f 	beq.w	80086d4 <_dtoa_r+0xb94>
 80083b6:	4639      	mov	r1, r7
 80083b8:	2300      	movs	r3, #0
 80083ba:	220a      	movs	r2, #10
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fc47 	bl	8008c50 <__multadd>
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	4607      	mov	r7, r0
 80083c8:	f300 808e 	bgt.w	80084e8 <_dtoa_r+0x9a8>
 80083cc:	9b05      	ldr	r3, [sp, #20]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	dc50      	bgt.n	8008474 <_dtoa_r+0x934>
 80083d2:	e089      	b.n	80084e8 <_dtoa_r+0x9a8>
 80083d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083da:	e75d      	b.n	8008298 <_dtoa_r+0x758>
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	1e5e      	subs	r6, r3, #1
 80083e0:	9b06      	ldr	r3, [sp, #24]
 80083e2:	42b3      	cmp	r3, r6
 80083e4:	bfbf      	itttt	lt
 80083e6:	9b06      	ldrlt	r3, [sp, #24]
 80083e8:	9606      	strlt	r6, [sp, #24]
 80083ea:	1af2      	sublt	r2, r6, r3
 80083ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083ee:	bfb6      	itet	lt
 80083f0:	189b      	addlt	r3, r3, r2
 80083f2:	1b9e      	subge	r6, r3, r6
 80083f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083f6:	9b01      	ldr	r3, [sp, #4]
 80083f8:	bfb8      	it	lt
 80083fa:	2600      	movlt	r6, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bfb5      	itete	lt
 8008400:	eba8 0503 	sublt.w	r5, r8, r3
 8008404:	9b01      	ldrge	r3, [sp, #4]
 8008406:	2300      	movlt	r3, #0
 8008408:	4645      	movge	r5, r8
 800840a:	e747      	b.n	800829c <_dtoa_r+0x75c>
 800840c:	9e06      	ldr	r6, [sp, #24]
 800840e:	9f08      	ldr	r7, [sp, #32]
 8008410:	4645      	mov	r5, r8
 8008412:	e74c      	b.n	80082ae <_dtoa_r+0x76e>
 8008414:	9a06      	ldr	r2, [sp, #24]
 8008416:	e775      	b.n	8008304 <_dtoa_r+0x7c4>
 8008418:	9b05      	ldr	r3, [sp, #20]
 800841a:	2b01      	cmp	r3, #1
 800841c:	dc18      	bgt.n	8008450 <_dtoa_r+0x910>
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	b9b3      	cbnz	r3, 8008450 <_dtoa_r+0x910>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008428:	b9a3      	cbnz	r3, 8008454 <_dtoa_r+0x914>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008430:	0d1b      	lsrs	r3, r3, #20
 8008432:	051b      	lsls	r3, r3, #20
 8008434:	b12b      	cbz	r3, 8008442 <_dtoa_r+0x902>
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	3301      	adds	r3, #1
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	f108 0801 	add.w	r8, r8, #1
 8008440:	2301      	movs	r3, #1
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008446:	2b00      	cmp	r3, #0
 8008448:	f47f af74 	bne.w	8008334 <_dtoa_r+0x7f4>
 800844c:	2001      	movs	r0, #1
 800844e:	e779      	b.n	8008344 <_dtoa_r+0x804>
 8008450:	2300      	movs	r3, #0
 8008452:	e7f6      	b.n	8008442 <_dtoa_r+0x902>
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	e7f4      	b.n	8008442 <_dtoa_r+0x902>
 8008458:	d085      	beq.n	8008366 <_dtoa_r+0x826>
 800845a:	4618      	mov	r0, r3
 800845c:	301c      	adds	r0, #28
 800845e:	e77d      	b.n	800835c <_dtoa_r+0x81c>
 8008460:	40240000 	.word	0x40240000
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	dc38      	bgt.n	80084dc <_dtoa_r+0x99c>
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	2b02      	cmp	r3, #2
 800846e:	dd35      	ble.n	80084dc <_dtoa_r+0x99c>
 8008470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008474:	f1b9 0f00 	cmp.w	r9, #0
 8008478:	d10d      	bne.n	8008496 <_dtoa_r+0x956>
 800847a:	4631      	mov	r1, r6
 800847c:	464b      	mov	r3, r9
 800847e:	2205      	movs	r2, #5
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fbe5 	bl	8008c50 <__multadd>
 8008486:	4601      	mov	r1, r0
 8008488:	4606      	mov	r6, r0
 800848a:	4658      	mov	r0, fp
 800848c:	f000 fdfc 	bl	8009088 <__mcmp>
 8008490:	2800      	cmp	r0, #0
 8008492:	f73f adbd 	bgt.w	8008010 <_dtoa_r+0x4d0>
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	9d00      	ldr	r5, [sp, #0]
 800849a:	ea6f 0a03 	mvn.w	sl, r3
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	4631      	mov	r1, r6
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fbb1 	bl	8008c0c <_Bfree>
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	f43f aeb4 	beq.w	8008218 <_dtoa_r+0x6d8>
 80084b0:	f1b8 0f00 	cmp.w	r8, #0
 80084b4:	d005      	beq.n	80084c2 <_dtoa_r+0x982>
 80084b6:	45b8      	cmp	r8, r7
 80084b8:	d003      	beq.n	80084c2 <_dtoa_r+0x982>
 80084ba:	4641      	mov	r1, r8
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fba5 	bl	8008c0c <_Bfree>
 80084c2:	4639      	mov	r1, r7
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 fba1 	bl	8008c0c <_Bfree>
 80084ca:	e6a5      	b.n	8008218 <_dtoa_r+0x6d8>
 80084cc:	2600      	movs	r6, #0
 80084ce:	4637      	mov	r7, r6
 80084d0:	e7e1      	b.n	8008496 <_dtoa_r+0x956>
 80084d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084d8:	4637      	mov	r7, r6
 80084da:	e599      	b.n	8008010 <_dtoa_r+0x4d0>
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80fd 	beq.w	80086e2 <_dtoa_r+0xba2>
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	dd05      	ble.n	80084f8 <_dtoa_r+0x9b8>
 80084ec:	4639      	mov	r1, r7
 80084ee:	462a      	mov	r2, r5
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fd5d 	bl	8008fb0 <__lshift>
 80084f6:	4607      	mov	r7, r0
 80084f8:	9b06      	ldr	r3, [sp, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d05c      	beq.n	80085b8 <_dtoa_r+0xa78>
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fb43 	bl	8008b8c <_Balloc>
 8008506:	4605      	mov	r5, r0
 8008508:	b928      	cbnz	r0, 8008516 <_dtoa_r+0x9d6>
 800850a:	4b80      	ldr	r3, [pc, #512]	; (800870c <_dtoa_r+0xbcc>)
 800850c:	4602      	mov	r2, r0
 800850e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008512:	f7ff bb2e 	b.w	8007b72 <_dtoa_r+0x32>
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	3202      	adds	r2, #2
 800851a:	0092      	lsls	r2, r2, #2
 800851c:	f107 010c 	add.w	r1, r7, #12
 8008520:	300c      	adds	r0, #12
 8008522:	f000 fb25 	bl	8008b70 <memcpy>
 8008526:	2201      	movs	r2, #1
 8008528:	4629      	mov	r1, r5
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fd40 	bl	8008fb0 <__lshift>
 8008530:	9b00      	ldr	r3, [sp, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	9b00      	ldr	r3, [sp, #0]
 8008538:	444b      	add	r3, r9
 800853a:	9307      	str	r3, [sp, #28]
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	46b8      	mov	r8, r7
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	4607      	mov	r7, r0
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	4631      	mov	r1, r6
 800854c:	3b01      	subs	r3, #1
 800854e:	4658      	mov	r0, fp
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	f7ff fa67 	bl	8007a24 <quorem>
 8008556:	4603      	mov	r3, r0
 8008558:	3330      	adds	r3, #48	; 0x30
 800855a:	9004      	str	r0, [sp, #16]
 800855c:	4641      	mov	r1, r8
 800855e:	4658      	mov	r0, fp
 8008560:	9308      	str	r3, [sp, #32]
 8008562:	f000 fd91 	bl	8009088 <__mcmp>
 8008566:	463a      	mov	r2, r7
 8008568:	4681      	mov	r9, r0
 800856a:	4631      	mov	r1, r6
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fda7 	bl	80090c0 <__mdiff>
 8008572:	68c2      	ldr	r2, [r0, #12]
 8008574:	9b08      	ldr	r3, [sp, #32]
 8008576:	4605      	mov	r5, r0
 8008578:	bb02      	cbnz	r2, 80085bc <_dtoa_r+0xa7c>
 800857a:	4601      	mov	r1, r0
 800857c:	4658      	mov	r0, fp
 800857e:	f000 fd83 	bl	8009088 <__mcmp>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	4602      	mov	r2, r0
 8008586:	4629      	mov	r1, r5
 8008588:	4620      	mov	r0, r4
 800858a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800858e:	f000 fb3d 	bl	8008c0c <_Bfree>
 8008592:	9b05      	ldr	r3, [sp, #20]
 8008594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008596:	9d01      	ldr	r5, [sp, #4]
 8008598:	ea43 0102 	orr.w	r1, r3, r2
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	430b      	orrs	r3, r1
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	d10d      	bne.n	80085c0 <_dtoa_r+0xa80>
 80085a4:	2b39      	cmp	r3, #57	; 0x39
 80085a6:	d029      	beq.n	80085fc <_dtoa_r+0xabc>
 80085a8:	f1b9 0f00 	cmp.w	r9, #0
 80085ac:	dd01      	ble.n	80085b2 <_dtoa_r+0xa72>
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	3331      	adds	r3, #49	; 0x31
 80085b2:	9a02      	ldr	r2, [sp, #8]
 80085b4:	7013      	strb	r3, [r2, #0]
 80085b6:	e774      	b.n	80084a2 <_dtoa_r+0x962>
 80085b8:	4638      	mov	r0, r7
 80085ba:	e7b9      	b.n	8008530 <_dtoa_r+0x9f0>
 80085bc:	2201      	movs	r2, #1
 80085be:	e7e2      	b.n	8008586 <_dtoa_r+0xa46>
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	db06      	blt.n	80085d4 <_dtoa_r+0xa94>
 80085c6:	9905      	ldr	r1, [sp, #20]
 80085c8:	ea41 0909 	orr.w	r9, r1, r9
 80085cc:	9906      	ldr	r1, [sp, #24]
 80085ce:	ea59 0101 	orrs.w	r1, r9, r1
 80085d2:	d120      	bne.n	8008616 <_dtoa_r+0xad6>
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	ddec      	ble.n	80085b2 <_dtoa_r+0xa72>
 80085d8:	4659      	mov	r1, fp
 80085da:	2201      	movs	r2, #1
 80085dc:	4620      	mov	r0, r4
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	f000 fce6 	bl	8008fb0 <__lshift>
 80085e4:	4631      	mov	r1, r6
 80085e6:	4683      	mov	fp, r0
 80085e8:	f000 fd4e 	bl	8009088 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	dc02      	bgt.n	80085f8 <_dtoa_r+0xab8>
 80085f2:	d1de      	bne.n	80085b2 <_dtoa_r+0xa72>
 80085f4:	07da      	lsls	r2, r3, #31
 80085f6:	d5dc      	bpl.n	80085b2 <_dtoa_r+0xa72>
 80085f8:	2b39      	cmp	r3, #57	; 0x39
 80085fa:	d1d8      	bne.n	80085ae <_dtoa_r+0xa6e>
 80085fc:	9a02      	ldr	r2, [sp, #8]
 80085fe:	2339      	movs	r3, #57	; 0x39
 8008600:	7013      	strb	r3, [r2, #0]
 8008602:	462b      	mov	r3, r5
 8008604:	461d      	mov	r5, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800860c:	2a39      	cmp	r2, #57	; 0x39
 800860e:	d050      	beq.n	80086b2 <_dtoa_r+0xb72>
 8008610:	3201      	adds	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e745      	b.n	80084a2 <_dtoa_r+0x962>
 8008616:	2a00      	cmp	r2, #0
 8008618:	dd03      	ble.n	8008622 <_dtoa_r+0xae2>
 800861a:	2b39      	cmp	r3, #57	; 0x39
 800861c:	d0ee      	beq.n	80085fc <_dtoa_r+0xabc>
 800861e:	3301      	adds	r3, #1
 8008620:	e7c7      	b.n	80085b2 <_dtoa_r+0xa72>
 8008622:	9a01      	ldr	r2, [sp, #4]
 8008624:	9907      	ldr	r1, [sp, #28]
 8008626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800862a:	428a      	cmp	r2, r1
 800862c:	d02a      	beq.n	8008684 <_dtoa_r+0xb44>
 800862e:	4659      	mov	r1, fp
 8008630:	2300      	movs	r3, #0
 8008632:	220a      	movs	r2, #10
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fb0b 	bl	8008c50 <__multadd>
 800863a:	45b8      	cmp	r8, r7
 800863c:	4683      	mov	fp, r0
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	f04f 020a 	mov.w	r2, #10
 8008646:	4641      	mov	r1, r8
 8008648:	4620      	mov	r0, r4
 800864a:	d107      	bne.n	800865c <_dtoa_r+0xb1c>
 800864c:	f000 fb00 	bl	8008c50 <__multadd>
 8008650:	4680      	mov	r8, r0
 8008652:	4607      	mov	r7, r0
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	3301      	adds	r3, #1
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	e775      	b.n	8008548 <_dtoa_r+0xa08>
 800865c:	f000 faf8 	bl	8008c50 <__multadd>
 8008660:	4639      	mov	r1, r7
 8008662:	4680      	mov	r8, r0
 8008664:	2300      	movs	r3, #0
 8008666:	220a      	movs	r2, #10
 8008668:	4620      	mov	r0, r4
 800866a:	f000 faf1 	bl	8008c50 <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	e7f0      	b.n	8008654 <_dtoa_r+0xb14>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	9a00      	ldr	r2, [sp, #0]
 8008678:	bfcc      	ite	gt
 800867a:	464d      	movgt	r5, r9
 800867c:	2501      	movle	r5, #1
 800867e:	4415      	add	r5, r2
 8008680:	f04f 0800 	mov.w	r8, #0
 8008684:	4659      	mov	r1, fp
 8008686:	2201      	movs	r2, #1
 8008688:	4620      	mov	r0, r4
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	f000 fc90 	bl	8008fb0 <__lshift>
 8008690:	4631      	mov	r1, r6
 8008692:	4683      	mov	fp, r0
 8008694:	f000 fcf8 	bl	8009088 <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	dcb2      	bgt.n	8008602 <_dtoa_r+0xac2>
 800869c:	d102      	bne.n	80086a4 <_dtoa_r+0xb64>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	07db      	lsls	r3, r3, #31
 80086a2:	d4ae      	bmi.n	8008602 <_dtoa_r+0xac2>
 80086a4:	462b      	mov	r3, r5
 80086a6:	461d      	mov	r5, r3
 80086a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086ac:	2a30      	cmp	r2, #48	; 0x30
 80086ae:	d0fa      	beq.n	80086a6 <_dtoa_r+0xb66>
 80086b0:	e6f7      	b.n	80084a2 <_dtoa_r+0x962>
 80086b2:	9a00      	ldr	r2, [sp, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d1a5      	bne.n	8008604 <_dtoa_r+0xac4>
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	2331      	movs	r3, #49	; 0x31
 80086be:	e779      	b.n	80085b4 <_dtoa_r+0xa74>
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <_dtoa_r+0xbd0>)
 80086c2:	f7ff baaf 	b.w	8007c24 <_dtoa_r+0xe4>
 80086c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f47f aa86 	bne.w	8007bda <_dtoa_r+0x9a>
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <_dtoa_r+0xbd4>)
 80086d0:	f7ff baa8 	b.w	8007c24 <_dtoa_r+0xe4>
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	dc03      	bgt.n	80086e2 <_dtoa_r+0xba2>
 80086da:	9b05      	ldr	r3, [sp, #20]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	f73f aec9 	bgt.w	8008474 <_dtoa_r+0x934>
 80086e2:	9d00      	ldr	r5, [sp, #0]
 80086e4:	4631      	mov	r1, r6
 80086e6:	4658      	mov	r0, fp
 80086e8:	f7ff f99c 	bl	8007a24 <quorem>
 80086ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086f0:	f805 3b01 	strb.w	r3, [r5], #1
 80086f4:	9a00      	ldr	r2, [sp, #0]
 80086f6:	1aaa      	subs	r2, r5, r2
 80086f8:	4591      	cmp	r9, r2
 80086fa:	ddba      	ble.n	8008672 <_dtoa_r+0xb32>
 80086fc:	4659      	mov	r1, fp
 80086fe:	2300      	movs	r3, #0
 8008700:	220a      	movs	r2, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f000 faa4 	bl	8008c50 <__multadd>
 8008708:	4683      	mov	fp, r0
 800870a:	e7eb      	b.n	80086e4 <_dtoa_r+0xba4>
 800870c:	08009af7 	.word	0x08009af7
 8008710:	08009a50 	.word	0x08009a50
 8008714:	08009a74 	.word	0x08009a74

08008718 <__sflush_r>:
 8008718:	898a      	ldrh	r2, [r1, #12]
 800871a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	4605      	mov	r5, r0
 8008720:	0710      	lsls	r0, r2, #28
 8008722:	460c      	mov	r4, r1
 8008724:	d458      	bmi.n	80087d8 <__sflush_r+0xc0>
 8008726:	684b      	ldr	r3, [r1, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	dc05      	bgt.n	8008738 <__sflush_r+0x20>
 800872c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	dc02      	bgt.n	8008738 <__sflush_r+0x20>
 8008732:	2000      	movs	r0, #0
 8008734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800873a:	2e00      	cmp	r6, #0
 800873c:	d0f9      	beq.n	8008732 <__sflush_r+0x1a>
 800873e:	2300      	movs	r3, #0
 8008740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008744:	682f      	ldr	r7, [r5, #0]
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	d032      	beq.n	80087b0 <__sflush_r+0x98>
 800874a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	075a      	lsls	r2, r3, #29
 8008750:	d505      	bpl.n	800875e <__sflush_r+0x46>
 8008752:	6863      	ldr	r3, [r4, #4]
 8008754:	1ac0      	subs	r0, r0, r3
 8008756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008758:	b10b      	cbz	r3, 800875e <__sflush_r+0x46>
 800875a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800875c:	1ac0      	subs	r0, r0, r3
 800875e:	2300      	movs	r3, #0
 8008760:	4602      	mov	r2, r0
 8008762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008764:	6a21      	ldr	r1, [r4, #32]
 8008766:	4628      	mov	r0, r5
 8008768:	47b0      	blx	r6
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	d106      	bne.n	800877e <__sflush_r+0x66>
 8008770:	6829      	ldr	r1, [r5, #0]
 8008772:	291d      	cmp	r1, #29
 8008774:	d82c      	bhi.n	80087d0 <__sflush_r+0xb8>
 8008776:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <__sflush_r+0x108>)
 8008778:	40ca      	lsrs	r2, r1
 800877a:	07d6      	lsls	r6, r2, #31
 800877c:	d528      	bpl.n	80087d0 <__sflush_r+0xb8>
 800877e:	2200      	movs	r2, #0
 8008780:	6062      	str	r2, [r4, #4]
 8008782:	04d9      	lsls	r1, r3, #19
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	d504      	bpl.n	8008794 <__sflush_r+0x7c>
 800878a:	1c42      	adds	r2, r0, #1
 800878c:	d101      	bne.n	8008792 <__sflush_r+0x7a>
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	b903      	cbnz	r3, 8008794 <__sflush_r+0x7c>
 8008792:	6560      	str	r0, [r4, #84]	; 0x54
 8008794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008796:	602f      	str	r7, [r5, #0]
 8008798:	2900      	cmp	r1, #0
 800879a:	d0ca      	beq.n	8008732 <__sflush_r+0x1a>
 800879c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087a0:	4299      	cmp	r1, r3
 80087a2:	d002      	beq.n	80087aa <__sflush_r+0x92>
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 fd7f 	bl	80092a8 <_free_r>
 80087aa:	2000      	movs	r0, #0
 80087ac:	6360      	str	r0, [r4, #52]	; 0x34
 80087ae:	e7c1      	b.n	8008734 <__sflush_r+0x1c>
 80087b0:	6a21      	ldr	r1, [r4, #32]
 80087b2:	2301      	movs	r3, #1
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b0      	blx	r6
 80087b8:	1c41      	adds	r1, r0, #1
 80087ba:	d1c7      	bne.n	800874c <__sflush_r+0x34>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0c4      	beq.n	800874c <__sflush_r+0x34>
 80087c2:	2b1d      	cmp	r3, #29
 80087c4:	d001      	beq.n	80087ca <__sflush_r+0xb2>
 80087c6:	2b16      	cmp	r3, #22
 80087c8:	d101      	bne.n	80087ce <__sflush_r+0xb6>
 80087ca:	602f      	str	r7, [r5, #0]
 80087cc:	e7b1      	b.n	8008732 <__sflush_r+0x1a>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	e7ad      	b.n	8008734 <__sflush_r+0x1c>
 80087d8:	690f      	ldr	r7, [r1, #16]
 80087da:	2f00      	cmp	r7, #0
 80087dc:	d0a9      	beq.n	8008732 <__sflush_r+0x1a>
 80087de:	0793      	lsls	r3, r2, #30
 80087e0:	680e      	ldr	r6, [r1, #0]
 80087e2:	bf08      	it	eq
 80087e4:	694b      	ldreq	r3, [r1, #20]
 80087e6:	600f      	str	r7, [r1, #0]
 80087e8:	bf18      	it	ne
 80087ea:	2300      	movne	r3, #0
 80087ec:	eba6 0807 	sub.w	r8, r6, r7
 80087f0:	608b      	str	r3, [r1, #8]
 80087f2:	f1b8 0f00 	cmp.w	r8, #0
 80087f6:	dd9c      	ble.n	8008732 <__sflush_r+0x1a>
 80087f8:	6a21      	ldr	r1, [r4, #32]
 80087fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087fc:	4643      	mov	r3, r8
 80087fe:	463a      	mov	r2, r7
 8008800:	4628      	mov	r0, r5
 8008802:	47b0      	blx	r6
 8008804:	2800      	cmp	r0, #0
 8008806:	dc06      	bgt.n	8008816 <__sflush_r+0xfe>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	e78e      	b.n	8008734 <__sflush_r+0x1c>
 8008816:	4407      	add	r7, r0
 8008818:	eba8 0800 	sub.w	r8, r8, r0
 800881c:	e7e9      	b.n	80087f2 <__sflush_r+0xda>
 800881e:	bf00      	nop
 8008820:	20400001 	.word	0x20400001

08008824 <_fflush_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	b913      	cbnz	r3, 8008834 <_fflush_r+0x10>
 800882e:	2500      	movs	r5, #0
 8008830:	4628      	mov	r0, r5
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	b118      	cbz	r0, 800883e <_fflush_r+0x1a>
 8008836:	6983      	ldr	r3, [r0, #24]
 8008838:	b90b      	cbnz	r3, 800883e <_fflush_r+0x1a>
 800883a:	f000 f887 	bl	800894c <__sinit>
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <_fflush_r+0x6c>)
 8008840:	429c      	cmp	r4, r3
 8008842:	d11b      	bne.n	800887c <_fflush_r+0x58>
 8008844:	686c      	ldr	r4, [r5, #4]
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ef      	beq.n	800882e <_fflush_r+0xa>
 800884e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008850:	07d0      	lsls	r0, r2, #31
 8008852:	d404      	bmi.n	800885e <_fflush_r+0x3a>
 8008854:	0599      	lsls	r1, r3, #22
 8008856:	d402      	bmi.n	800885e <_fflush_r+0x3a>
 8008858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885a:	f000 f91a 	bl	8008a92 <__retarget_lock_acquire_recursive>
 800885e:	4628      	mov	r0, r5
 8008860:	4621      	mov	r1, r4
 8008862:	f7ff ff59 	bl	8008718 <__sflush_r>
 8008866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008868:	07da      	lsls	r2, r3, #31
 800886a:	4605      	mov	r5, r0
 800886c:	d4e0      	bmi.n	8008830 <_fflush_r+0xc>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	059b      	lsls	r3, r3, #22
 8008872:	d4dd      	bmi.n	8008830 <_fflush_r+0xc>
 8008874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008876:	f000 f90d 	bl	8008a94 <__retarget_lock_release_recursive>
 800887a:	e7d9      	b.n	8008830 <_fflush_r+0xc>
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <_fflush_r+0x70>)
 800887e:	429c      	cmp	r4, r3
 8008880:	d101      	bne.n	8008886 <_fflush_r+0x62>
 8008882:	68ac      	ldr	r4, [r5, #8]
 8008884:	e7df      	b.n	8008846 <_fflush_r+0x22>
 8008886:	4b04      	ldr	r3, [pc, #16]	; (8008898 <_fflush_r+0x74>)
 8008888:	429c      	cmp	r4, r3
 800888a:	bf08      	it	eq
 800888c:	68ec      	ldreq	r4, [r5, #12]
 800888e:	e7da      	b.n	8008846 <_fflush_r+0x22>
 8008890:	08009b28 	.word	0x08009b28
 8008894:	08009b48 	.word	0x08009b48
 8008898:	08009b08 	.word	0x08009b08

0800889c <std>:
 800889c:	2300      	movs	r3, #0
 800889e:	b510      	push	{r4, lr}
 80088a0:	4604      	mov	r4, r0
 80088a2:	e9c0 3300 	strd	r3, r3, [r0]
 80088a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088aa:	6083      	str	r3, [r0, #8]
 80088ac:	8181      	strh	r1, [r0, #12]
 80088ae:	6643      	str	r3, [r0, #100]	; 0x64
 80088b0:	81c2      	strh	r2, [r0, #14]
 80088b2:	6183      	str	r3, [r0, #24]
 80088b4:	4619      	mov	r1, r3
 80088b6:	2208      	movs	r2, #8
 80088b8:	305c      	adds	r0, #92	; 0x5c
 80088ba:	f7fe faf3 	bl	8006ea4 <memset>
 80088be:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <std+0x38>)
 80088c0:	6263      	str	r3, [r4, #36]	; 0x24
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <std+0x3c>)
 80088c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <std+0x40>)
 80088c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <std+0x44>)
 80088cc:	6224      	str	r4, [r4, #32]
 80088ce:	6323      	str	r3, [r4, #48]	; 0x30
 80088d0:	bd10      	pop	{r4, pc}
 80088d2:	bf00      	nop
 80088d4:	080096d1 	.word	0x080096d1
 80088d8:	080096f3 	.word	0x080096f3
 80088dc:	0800972b 	.word	0x0800972b
 80088e0:	0800974f 	.word	0x0800974f

080088e4 <_cleanup_r>:
 80088e4:	4901      	ldr	r1, [pc, #4]	; (80088ec <_cleanup_r+0x8>)
 80088e6:	f000 b8af 	b.w	8008a48 <_fwalk_reent>
 80088ea:	bf00      	nop
 80088ec:	08008825 	.word	0x08008825

080088f0 <__sfmoreglue>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	1e4a      	subs	r2, r1, #1
 80088f4:	2568      	movs	r5, #104	; 0x68
 80088f6:	4355      	muls	r5, r2
 80088f8:	460e      	mov	r6, r1
 80088fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088fe:	f000 fd23 	bl	8009348 <_malloc_r>
 8008902:	4604      	mov	r4, r0
 8008904:	b140      	cbz	r0, 8008918 <__sfmoreglue+0x28>
 8008906:	2100      	movs	r1, #0
 8008908:	e9c0 1600 	strd	r1, r6, [r0]
 800890c:	300c      	adds	r0, #12
 800890e:	60a0      	str	r0, [r4, #8]
 8008910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008914:	f7fe fac6 	bl	8006ea4 <memset>
 8008918:	4620      	mov	r0, r4
 800891a:	bd70      	pop	{r4, r5, r6, pc}

0800891c <__sfp_lock_acquire>:
 800891c:	4801      	ldr	r0, [pc, #4]	; (8008924 <__sfp_lock_acquire+0x8>)
 800891e:	f000 b8b8 	b.w	8008a92 <__retarget_lock_acquire_recursive>
 8008922:	bf00      	nop
 8008924:	200003dc 	.word	0x200003dc

08008928 <__sfp_lock_release>:
 8008928:	4801      	ldr	r0, [pc, #4]	; (8008930 <__sfp_lock_release+0x8>)
 800892a:	f000 b8b3 	b.w	8008a94 <__retarget_lock_release_recursive>
 800892e:	bf00      	nop
 8008930:	200003dc 	.word	0x200003dc

08008934 <__sinit_lock_acquire>:
 8008934:	4801      	ldr	r0, [pc, #4]	; (800893c <__sinit_lock_acquire+0x8>)
 8008936:	f000 b8ac 	b.w	8008a92 <__retarget_lock_acquire_recursive>
 800893a:	bf00      	nop
 800893c:	200003d7 	.word	0x200003d7

08008940 <__sinit_lock_release>:
 8008940:	4801      	ldr	r0, [pc, #4]	; (8008948 <__sinit_lock_release+0x8>)
 8008942:	f000 b8a7 	b.w	8008a94 <__retarget_lock_release_recursive>
 8008946:	bf00      	nop
 8008948:	200003d7 	.word	0x200003d7

0800894c <__sinit>:
 800894c:	b510      	push	{r4, lr}
 800894e:	4604      	mov	r4, r0
 8008950:	f7ff fff0 	bl	8008934 <__sinit_lock_acquire>
 8008954:	69a3      	ldr	r3, [r4, #24]
 8008956:	b11b      	cbz	r3, 8008960 <__sinit+0x14>
 8008958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800895c:	f7ff bff0 	b.w	8008940 <__sinit_lock_release>
 8008960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008964:	6523      	str	r3, [r4, #80]	; 0x50
 8008966:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <__sinit+0x68>)
 8008968:	4a13      	ldr	r2, [pc, #76]	; (80089b8 <__sinit+0x6c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	62a2      	str	r2, [r4, #40]	; 0x28
 800896e:	42a3      	cmp	r3, r4
 8008970:	bf04      	itt	eq
 8008972:	2301      	moveq	r3, #1
 8008974:	61a3      	streq	r3, [r4, #24]
 8008976:	4620      	mov	r0, r4
 8008978:	f000 f820 	bl	80089bc <__sfp>
 800897c:	6060      	str	r0, [r4, #4]
 800897e:	4620      	mov	r0, r4
 8008980:	f000 f81c 	bl	80089bc <__sfp>
 8008984:	60a0      	str	r0, [r4, #8]
 8008986:	4620      	mov	r0, r4
 8008988:	f000 f818 	bl	80089bc <__sfp>
 800898c:	2200      	movs	r2, #0
 800898e:	60e0      	str	r0, [r4, #12]
 8008990:	2104      	movs	r1, #4
 8008992:	6860      	ldr	r0, [r4, #4]
 8008994:	f7ff ff82 	bl	800889c <std>
 8008998:	68a0      	ldr	r0, [r4, #8]
 800899a:	2201      	movs	r2, #1
 800899c:	2109      	movs	r1, #9
 800899e:	f7ff ff7d 	bl	800889c <std>
 80089a2:	68e0      	ldr	r0, [r4, #12]
 80089a4:	2202      	movs	r2, #2
 80089a6:	2112      	movs	r1, #18
 80089a8:	f7ff ff78 	bl	800889c <std>
 80089ac:	2301      	movs	r3, #1
 80089ae:	61a3      	str	r3, [r4, #24]
 80089b0:	e7d2      	b.n	8008958 <__sinit+0xc>
 80089b2:	bf00      	nop
 80089b4:	08009a3c 	.word	0x08009a3c
 80089b8:	080088e5 	.word	0x080088e5

080089bc <__sfp>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	4607      	mov	r7, r0
 80089c0:	f7ff ffac 	bl	800891c <__sfp_lock_acquire>
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <__sfp+0x84>)
 80089c6:	681e      	ldr	r6, [r3, #0]
 80089c8:	69b3      	ldr	r3, [r6, #24]
 80089ca:	b913      	cbnz	r3, 80089d2 <__sfp+0x16>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff ffbd 	bl	800894c <__sinit>
 80089d2:	3648      	adds	r6, #72	; 0x48
 80089d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089d8:	3b01      	subs	r3, #1
 80089da:	d503      	bpl.n	80089e4 <__sfp+0x28>
 80089dc:	6833      	ldr	r3, [r6, #0]
 80089de:	b30b      	cbz	r3, 8008a24 <__sfp+0x68>
 80089e0:	6836      	ldr	r6, [r6, #0]
 80089e2:	e7f7      	b.n	80089d4 <__sfp+0x18>
 80089e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089e8:	b9d5      	cbnz	r5, 8008a20 <__sfp+0x64>
 80089ea:	4b16      	ldr	r3, [pc, #88]	; (8008a44 <__sfp+0x88>)
 80089ec:	60e3      	str	r3, [r4, #12]
 80089ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089f2:	6665      	str	r5, [r4, #100]	; 0x64
 80089f4:	f000 f84c 	bl	8008a90 <__retarget_lock_init_recursive>
 80089f8:	f7ff ff96 	bl	8008928 <__sfp_lock_release>
 80089fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a04:	6025      	str	r5, [r4, #0]
 8008a06:	61a5      	str	r5, [r4, #24]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a10:	f7fe fa48 	bl	8006ea4 <memset>
 8008a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a20:	3468      	adds	r4, #104	; 0x68
 8008a22:	e7d9      	b.n	80089d8 <__sfp+0x1c>
 8008a24:	2104      	movs	r1, #4
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7ff ff62 	bl	80088f0 <__sfmoreglue>
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	6030      	str	r0, [r6, #0]
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1d5      	bne.n	80089e0 <__sfp+0x24>
 8008a34:	f7ff ff78 	bl	8008928 <__sfp_lock_release>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	e7ee      	b.n	8008a1c <__sfp+0x60>
 8008a3e:	bf00      	nop
 8008a40:	08009a3c 	.word	0x08009a3c
 8008a44:	ffff0001 	.word	0xffff0001

08008a48 <_fwalk_reent>:
 8008a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	4688      	mov	r8, r1
 8008a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a54:	2700      	movs	r7, #0
 8008a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a5e:	d505      	bpl.n	8008a6c <_fwalk_reent+0x24>
 8008a60:	6824      	ldr	r4, [r4, #0]
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	d1f7      	bne.n	8008a56 <_fwalk_reent+0xe>
 8008a66:	4638      	mov	r0, r7
 8008a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	89ab      	ldrh	r3, [r5, #12]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d907      	bls.n	8008a82 <_fwalk_reent+0x3a>
 8008a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a76:	3301      	adds	r3, #1
 8008a78:	d003      	beq.n	8008a82 <_fwalk_reent+0x3a>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	47c0      	blx	r8
 8008a80:	4307      	orrs	r7, r0
 8008a82:	3568      	adds	r5, #104	; 0x68
 8008a84:	e7e9      	b.n	8008a5a <_fwalk_reent+0x12>
	...

08008a88 <_localeconv_r>:
 8008a88:	4800      	ldr	r0, [pc, #0]	; (8008a8c <_localeconv_r+0x4>)
 8008a8a:	4770      	bx	lr
 8008a8c:	20000164 	.word	0x20000164

08008a90 <__retarget_lock_init_recursive>:
 8008a90:	4770      	bx	lr

08008a92 <__retarget_lock_acquire_recursive>:
 8008a92:	4770      	bx	lr

08008a94 <__retarget_lock_release_recursive>:
 8008a94:	4770      	bx	lr

08008a96 <__swhatbuf_r>:
 8008a96:	b570      	push	{r4, r5, r6, lr}
 8008a98:	460e      	mov	r6, r1
 8008a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9e:	2900      	cmp	r1, #0
 8008aa0:	b096      	sub	sp, #88	; 0x58
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	461d      	mov	r5, r3
 8008aa6:	da07      	bge.n	8008ab8 <__swhatbuf_r+0x22>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	89b3      	ldrh	r3, [r6, #12]
 8008aae:	061a      	lsls	r2, r3, #24
 8008ab0:	d410      	bmi.n	8008ad4 <__swhatbuf_r+0x3e>
 8008ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ab6:	e00e      	b.n	8008ad6 <__swhatbuf_r+0x40>
 8008ab8:	466a      	mov	r2, sp
 8008aba:	f000 fe9f 	bl	80097fc <_fstat_r>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	dbf2      	blt.n	8008aa8 <__swhatbuf_r+0x12>
 8008ac2:	9a01      	ldr	r2, [sp, #4]
 8008ac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008acc:	425a      	negs	r2, r3
 8008ace:	415a      	adcs	r2, r3
 8008ad0:	602a      	str	r2, [r5, #0]
 8008ad2:	e7ee      	b.n	8008ab2 <__swhatbuf_r+0x1c>
 8008ad4:	2340      	movs	r3, #64	; 0x40
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	b016      	add	sp, #88	; 0x58
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ae0 <__smakebuf_r>:
 8008ae0:	898b      	ldrh	r3, [r1, #12]
 8008ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ae4:	079d      	lsls	r5, r3, #30
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	460c      	mov	r4, r1
 8008aea:	d507      	bpl.n	8008afc <__smakebuf_r+0x1c>
 8008aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	2301      	movs	r3, #1
 8008af6:	6163      	str	r3, [r4, #20]
 8008af8:	b002      	add	sp, #8
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	ab01      	add	r3, sp, #4
 8008afe:	466a      	mov	r2, sp
 8008b00:	f7ff ffc9 	bl	8008a96 <__swhatbuf_r>
 8008b04:	9900      	ldr	r1, [sp, #0]
 8008b06:	4605      	mov	r5, r0
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 fc1d 	bl	8009348 <_malloc_r>
 8008b0e:	b948      	cbnz	r0, 8008b24 <__smakebuf_r+0x44>
 8008b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b14:	059a      	lsls	r2, r3, #22
 8008b16:	d4ef      	bmi.n	8008af8 <__smakebuf_r+0x18>
 8008b18:	f023 0303 	bic.w	r3, r3, #3
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	e7e3      	b.n	8008aec <__smakebuf_r+0xc>
 8008b24:	4b0d      	ldr	r3, [pc, #52]	; (8008b5c <__smakebuf_r+0x7c>)
 8008b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	6020      	str	r0, [r4, #0]
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	9b00      	ldr	r3, [sp, #0]
 8008b34:	6163      	str	r3, [r4, #20]
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	6120      	str	r0, [r4, #16]
 8008b3a:	b15b      	cbz	r3, 8008b54 <__smakebuf_r+0x74>
 8008b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 fe6d 	bl	8009820 <_isatty_r>
 8008b46:	b128      	cbz	r0, 8008b54 <__smakebuf_r+0x74>
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	81a3      	strh	r3, [r4, #12]
 8008b54:	89a0      	ldrh	r0, [r4, #12]
 8008b56:	4305      	orrs	r5, r0
 8008b58:	81a5      	strh	r5, [r4, #12]
 8008b5a:	e7cd      	b.n	8008af8 <__smakebuf_r+0x18>
 8008b5c:	080088e5 	.word	0x080088e5

08008b60 <malloc>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <malloc+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f000 bbef 	b.w	8009348 <_malloc_r>
 8008b6a:	bf00      	nop
 8008b6c:	20000010 	.word	0x20000010

08008b70 <memcpy>:
 8008b70:	440a      	add	r2, r1
 8008b72:	4291      	cmp	r1, r2
 8008b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b78:	d100      	bne.n	8008b7c <memcpy+0xc>
 8008b7a:	4770      	bx	lr
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b86:	4291      	cmp	r1, r2
 8008b88:	d1f9      	bne.n	8008b7e <memcpy+0xe>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <_Balloc>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b90:	4604      	mov	r4, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	b976      	cbnz	r6, 8008bb4 <_Balloc+0x28>
 8008b96:	2010      	movs	r0, #16
 8008b98:	f7ff ffe2 	bl	8008b60 <malloc>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6260      	str	r0, [r4, #36]	; 0x24
 8008ba0:	b920      	cbnz	r0, 8008bac <_Balloc+0x20>
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <_Balloc+0x78>)
 8008ba4:	4818      	ldr	r0, [pc, #96]	; (8008c08 <_Balloc+0x7c>)
 8008ba6:	2166      	movs	r1, #102	; 0x66
 8008ba8:	f000 fde8 	bl	800977c <__assert_func>
 8008bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bb0:	6006      	str	r6, [r0, #0]
 8008bb2:	60c6      	str	r6, [r0, #12]
 8008bb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bb6:	68f3      	ldr	r3, [r6, #12]
 8008bb8:	b183      	cbz	r3, 8008bdc <_Balloc+0x50>
 8008bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bc2:	b9b8      	cbnz	r0, 8008bf4 <_Balloc+0x68>
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bca:	1d72      	adds	r2, r6, #5
 8008bcc:	0092      	lsls	r2, r2, #2
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fb5a 	bl	8009288 <_calloc_r>
 8008bd4:	b160      	cbz	r0, 8008bf0 <_Balloc+0x64>
 8008bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bda:	e00e      	b.n	8008bfa <_Balloc+0x6e>
 8008bdc:	2221      	movs	r2, #33	; 0x21
 8008bde:	2104      	movs	r1, #4
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fb51 	bl	8009288 <_calloc_r>
 8008be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be8:	60f0      	str	r0, [r6, #12]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e4      	bne.n	8008bba <_Balloc+0x2e>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	6802      	ldr	r2, [r0, #0]
 8008bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c00:	e7f7      	b.n	8008bf2 <_Balloc+0x66>
 8008c02:	bf00      	nop
 8008c04:	08009a81 	.word	0x08009a81
 8008c08:	08009b68 	.word	0x08009b68

08008c0c <_Bfree>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c10:	4605      	mov	r5, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	b976      	cbnz	r6, 8008c34 <_Bfree+0x28>
 8008c16:	2010      	movs	r0, #16
 8008c18:	f7ff ffa2 	bl	8008b60 <malloc>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6268      	str	r0, [r5, #36]	; 0x24
 8008c20:	b920      	cbnz	r0, 8008c2c <_Bfree+0x20>
 8008c22:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <_Bfree+0x3c>)
 8008c24:	4809      	ldr	r0, [pc, #36]	; (8008c4c <_Bfree+0x40>)
 8008c26:	218a      	movs	r1, #138	; 0x8a
 8008c28:	f000 fda8 	bl	800977c <__assert_func>
 8008c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c30:	6006      	str	r6, [r0, #0]
 8008c32:	60c6      	str	r6, [r0, #12]
 8008c34:	b13c      	cbz	r4, 8008c46 <_Bfree+0x3a>
 8008c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c38:	6862      	ldr	r2, [r4, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c40:	6021      	str	r1, [r4, #0]
 8008c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	08009a81 	.word	0x08009a81
 8008c4c:	08009b68 	.word	0x08009b68

08008c50 <__multadd>:
 8008c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	690e      	ldr	r6, [r1, #16]
 8008c56:	4607      	mov	r7, r0
 8008c58:	4698      	mov	r8, r3
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f101 0014 	add.w	r0, r1, #20
 8008c60:	2300      	movs	r3, #0
 8008c62:	6805      	ldr	r5, [r0, #0]
 8008c64:	b2a9      	uxth	r1, r5
 8008c66:	fb02 8101 	mla	r1, r2, r1, r8
 8008c6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c6e:	0c2d      	lsrs	r5, r5, #16
 8008c70:	fb02 c505 	mla	r5, r2, r5, ip
 8008c74:	b289      	uxth	r1, r1
 8008c76:	3301      	adds	r3, #1
 8008c78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c7c:	429e      	cmp	r6, r3
 8008c7e:	f840 1b04 	str.w	r1, [r0], #4
 8008c82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c86:	dcec      	bgt.n	8008c62 <__multadd+0x12>
 8008c88:	f1b8 0f00 	cmp.w	r8, #0
 8008c8c:	d022      	beq.n	8008cd4 <__multadd+0x84>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	42b3      	cmp	r3, r6
 8008c92:	dc19      	bgt.n	8008cc8 <__multadd+0x78>
 8008c94:	6861      	ldr	r1, [r4, #4]
 8008c96:	4638      	mov	r0, r7
 8008c98:	3101      	adds	r1, #1
 8008c9a:	f7ff ff77 	bl	8008b8c <_Balloc>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b928      	cbnz	r0, 8008cae <__multadd+0x5e>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <__multadd+0x8c>)
 8008ca6:	480e      	ldr	r0, [pc, #56]	; (8008ce0 <__multadd+0x90>)
 8008ca8:	21b5      	movs	r1, #181	; 0xb5
 8008caa:	f000 fd67 	bl	800977c <__assert_func>
 8008cae:	6922      	ldr	r2, [r4, #16]
 8008cb0:	3202      	adds	r2, #2
 8008cb2:	f104 010c 	add.w	r1, r4, #12
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	300c      	adds	r0, #12
 8008cba:	f7ff ff59 	bl	8008b70 <memcpy>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ffa3 	bl	8008c0c <_Bfree>
 8008cc6:	462c      	mov	r4, r5
 8008cc8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ccc:	3601      	adds	r6, #1
 8008cce:	f8c3 8014 	str.w	r8, [r3, #20]
 8008cd2:	6126      	str	r6, [r4, #16]
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cda:	bf00      	nop
 8008cdc:	08009af7 	.word	0x08009af7
 8008ce0:	08009b68 	.word	0x08009b68

08008ce4 <__hi0bits>:
 8008ce4:	0c03      	lsrs	r3, r0, #16
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	b9d3      	cbnz	r3, 8008d20 <__hi0bits+0x3c>
 8008cea:	0400      	lsls	r0, r0, #16
 8008cec:	2310      	movs	r3, #16
 8008cee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008cf2:	bf04      	itt	eq
 8008cf4:	0200      	lsleq	r0, r0, #8
 8008cf6:	3308      	addeq	r3, #8
 8008cf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008cfc:	bf04      	itt	eq
 8008cfe:	0100      	lsleq	r0, r0, #4
 8008d00:	3304      	addeq	r3, #4
 8008d02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d06:	bf04      	itt	eq
 8008d08:	0080      	lsleq	r0, r0, #2
 8008d0a:	3302      	addeq	r3, #2
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	db05      	blt.n	8008d1c <__hi0bits+0x38>
 8008d10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d14:	f103 0301 	add.w	r3, r3, #1
 8008d18:	bf08      	it	eq
 8008d1a:	2320      	moveq	r3, #32
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	4770      	bx	lr
 8008d20:	2300      	movs	r3, #0
 8008d22:	e7e4      	b.n	8008cee <__hi0bits+0xa>

08008d24 <__lo0bits>:
 8008d24:	6803      	ldr	r3, [r0, #0]
 8008d26:	f013 0207 	ands.w	r2, r3, #7
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	d00b      	beq.n	8008d46 <__lo0bits+0x22>
 8008d2e:	07da      	lsls	r2, r3, #31
 8008d30:	d424      	bmi.n	8008d7c <__lo0bits+0x58>
 8008d32:	0798      	lsls	r0, r3, #30
 8008d34:	bf49      	itett	mi
 8008d36:	085b      	lsrmi	r3, r3, #1
 8008d38:	089b      	lsrpl	r3, r3, #2
 8008d3a:	2001      	movmi	r0, #1
 8008d3c:	600b      	strmi	r3, [r1, #0]
 8008d3e:	bf5c      	itt	pl
 8008d40:	600b      	strpl	r3, [r1, #0]
 8008d42:	2002      	movpl	r0, #2
 8008d44:	4770      	bx	lr
 8008d46:	b298      	uxth	r0, r3
 8008d48:	b9b0      	cbnz	r0, 8008d78 <__lo0bits+0x54>
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d52:	bf04      	itt	eq
 8008d54:	0a1b      	lsreq	r3, r3, #8
 8008d56:	3008      	addeq	r0, #8
 8008d58:	071a      	lsls	r2, r3, #28
 8008d5a:	bf04      	itt	eq
 8008d5c:	091b      	lsreq	r3, r3, #4
 8008d5e:	3004      	addeq	r0, #4
 8008d60:	079a      	lsls	r2, r3, #30
 8008d62:	bf04      	itt	eq
 8008d64:	089b      	lsreq	r3, r3, #2
 8008d66:	3002      	addeq	r0, #2
 8008d68:	07da      	lsls	r2, r3, #31
 8008d6a:	d403      	bmi.n	8008d74 <__lo0bits+0x50>
 8008d6c:	085b      	lsrs	r3, r3, #1
 8008d6e:	f100 0001 	add.w	r0, r0, #1
 8008d72:	d005      	beq.n	8008d80 <__lo0bits+0x5c>
 8008d74:	600b      	str	r3, [r1, #0]
 8008d76:	4770      	bx	lr
 8008d78:	4610      	mov	r0, r2
 8008d7a:	e7e8      	b.n	8008d4e <__lo0bits+0x2a>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4770      	bx	lr
 8008d80:	2020      	movs	r0, #32
 8008d82:	4770      	bx	lr

08008d84 <__i2b>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	460c      	mov	r4, r1
 8008d88:	2101      	movs	r1, #1
 8008d8a:	f7ff feff 	bl	8008b8c <_Balloc>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	b928      	cbnz	r0, 8008d9e <__i2b+0x1a>
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <__i2b+0x24>)
 8008d94:	4805      	ldr	r0, [pc, #20]	; (8008dac <__i2b+0x28>)
 8008d96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d9a:	f000 fcef 	bl	800977c <__assert_func>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	6144      	str	r4, [r0, #20]
 8008da2:	6103      	str	r3, [r0, #16]
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	bf00      	nop
 8008da8:	08009af7 	.word	0x08009af7
 8008dac:	08009b68 	.word	0x08009b68

08008db0 <__multiply>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	4614      	mov	r4, r2
 8008db6:	690a      	ldr	r2, [r1, #16]
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	bfb8      	it	lt
 8008dbe:	460b      	movlt	r3, r1
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	bfbc      	itt	lt
 8008dc4:	4625      	movlt	r5, r4
 8008dc6:	461c      	movlt	r4, r3
 8008dc8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008dcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008dd0:	68ab      	ldr	r3, [r5, #8]
 8008dd2:	6869      	ldr	r1, [r5, #4]
 8008dd4:	eb0a 0709 	add.w	r7, sl, r9
 8008dd8:	42bb      	cmp	r3, r7
 8008dda:	b085      	sub	sp, #20
 8008ddc:	bfb8      	it	lt
 8008dde:	3101      	addlt	r1, #1
 8008de0:	f7ff fed4 	bl	8008b8c <_Balloc>
 8008de4:	b930      	cbnz	r0, 8008df4 <__multiply+0x44>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <__multiply+0x144>)
 8008dea:	4843      	ldr	r0, [pc, #268]	; (8008ef8 <__multiply+0x148>)
 8008dec:	f240 115d 	movw	r1, #349	; 0x15d
 8008df0:	f000 fcc4 	bl	800977c <__assert_func>
 8008df4:	f100 0614 	add.w	r6, r0, #20
 8008df8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008dfc:	4633      	mov	r3, r6
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4543      	cmp	r3, r8
 8008e02:	d31e      	bcc.n	8008e42 <__multiply+0x92>
 8008e04:	f105 0c14 	add.w	ip, r5, #20
 8008e08:	f104 0314 	add.w	r3, r4, #20
 8008e0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e14:	9202      	str	r2, [sp, #8]
 8008e16:	ebac 0205 	sub.w	r2, ip, r5
 8008e1a:	3a15      	subs	r2, #21
 8008e1c:	f022 0203 	bic.w	r2, r2, #3
 8008e20:	3204      	adds	r2, #4
 8008e22:	f105 0115 	add.w	r1, r5, #21
 8008e26:	458c      	cmp	ip, r1
 8008e28:	bf38      	it	cc
 8008e2a:	2204      	movcc	r2, #4
 8008e2c:	9201      	str	r2, [sp, #4]
 8008e2e:	9a02      	ldr	r2, [sp, #8]
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d808      	bhi.n	8008e48 <__multiply+0x98>
 8008e36:	2f00      	cmp	r7, #0
 8008e38:	dc55      	bgt.n	8008ee6 <__multiply+0x136>
 8008e3a:	6107      	str	r7, [r0, #16]
 8008e3c:	b005      	add	sp, #20
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	f843 2b04 	str.w	r2, [r3], #4
 8008e46:	e7db      	b.n	8008e00 <__multiply+0x50>
 8008e48:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e4c:	f1ba 0f00 	cmp.w	sl, #0
 8008e50:	d020      	beq.n	8008e94 <__multiply+0xe4>
 8008e52:	f105 0e14 	add.w	lr, r5, #20
 8008e56:	46b1      	mov	r9, r6
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008e5e:	f8d9 b000 	ldr.w	fp, [r9]
 8008e62:	b2a1      	uxth	r1, r4
 8008e64:	fa1f fb8b 	uxth.w	fp, fp
 8008e68:	fb0a b101 	mla	r1, sl, r1, fp
 8008e6c:	4411      	add	r1, r2
 8008e6e:	f8d9 2000 	ldr.w	r2, [r9]
 8008e72:	0c24      	lsrs	r4, r4, #16
 8008e74:	0c12      	lsrs	r2, r2, #16
 8008e76:	fb0a 2404 	mla	r4, sl, r4, r2
 8008e7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008e7e:	b289      	uxth	r1, r1
 8008e80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e84:	45f4      	cmp	ip, lr
 8008e86:	f849 1b04 	str.w	r1, [r9], #4
 8008e8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008e8e:	d8e4      	bhi.n	8008e5a <__multiply+0xaa>
 8008e90:	9901      	ldr	r1, [sp, #4]
 8008e92:	5072      	str	r2, [r6, r1]
 8008e94:	9a03      	ldr	r2, [sp, #12]
 8008e96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	d01f      	beq.n	8008ee2 <__multiply+0x132>
 8008ea2:	6834      	ldr	r4, [r6, #0]
 8008ea4:	f105 0114 	add.w	r1, r5, #20
 8008ea8:	46b6      	mov	lr, r6
 8008eaa:	f04f 0a00 	mov.w	sl, #0
 8008eae:	880a      	ldrh	r2, [r1, #0]
 8008eb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008eb4:	fb09 b202 	mla	r2, r9, r2, fp
 8008eb8:	4492      	add	sl, r2
 8008eba:	b2a4      	uxth	r4, r4
 8008ebc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ec0:	f84e 4b04 	str.w	r4, [lr], #4
 8008ec4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ec8:	f8be 2000 	ldrh.w	r2, [lr]
 8008ecc:	0c24      	lsrs	r4, r4, #16
 8008ece:	fb09 2404 	mla	r4, r9, r4, r2
 8008ed2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ed6:	458c      	cmp	ip, r1
 8008ed8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008edc:	d8e7      	bhi.n	8008eae <__multiply+0xfe>
 8008ede:	9a01      	ldr	r2, [sp, #4]
 8008ee0:	50b4      	str	r4, [r6, r2]
 8008ee2:	3604      	adds	r6, #4
 8008ee4:	e7a3      	b.n	8008e2e <__multiply+0x7e>
 8008ee6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1a5      	bne.n	8008e3a <__multiply+0x8a>
 8008eee:	3f01      	subs	r7, #1
 8008ef0:	e7a1      	b.n	8008e36 <__multiply+0x86>
 8008ef2:	bf00      	nop
 8008ef4:	08009af7 	.word	0x08009af7
 8008ef8:	08009b68 	.word	0x08009b68

08008efc <__pow5mult>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4615      	mov	r5, r2
 8008f02:	f012 0203 	ands.w	r2, r2, #3
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	d007      	beq.n	8008f1c <__pow5mult+0x20>
 8008f0c:	4c25      	ldr	r4, [pc, #148]	; (8008fa4 <__pow5mult+0xa8>)
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	2300      	movs	r3, #0
 8008f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f16:	f7ff fe9b 	bl	8008c50 <__multadd>
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	10ad      	asrs	r5, r5, #2
 8008f1e:	d03d      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f22:	b97c      	cbnz	r4, 8008f44 <__pow5mult+0x48>
 8008f24:	2010      	movs	r0, #16
 8008f26:	f7ff fe1b 	bl	8008b60 <malloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f2e:	b928      	cbnz	r0, 8008f3c <__pow5mult+0x40>
 8008f30:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <__pow5mult+0xac>)
 8008f32:	481e      	ldr	r0, [pc, #120]	; (8008fac <__pow5mult+0xb0>)
 8008f34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f38:	f000 fc20 	bl	800977c <__assert_func>
 8008f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f40:	6004      	str	r4, [r0, #0]
 8008f42:	60c4      	str	r4, [r0, #12]
 8008f44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f4c:	b94c      	cbnz	r4, 8008f62 <__pow5mult+0x66>
 8008f4e:	f240 2171 	movw	r1, #625	; 0x271
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ff16 	bl	8008d84 <__i2b>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f5e:	4604      	mov	r4, r0
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	07eb      	lsls	r3, r5, #31
 8008f68:	d50a      	bpl.n	8008f80 <__pow5mult+0x84>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ff1e 	bl	8008db0 <__multiply>
 8008f74:	4639      	mov	r1, r7
 8008f76:	4680      	mov	r8, r0
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff fe47 	bl	8008c0c <_Bfree>
 8008f7e:	4647      	mov	r7, r8
 8008f80:	106d      	asrs	r5, r5, #1
 8008f82:	d00b      	beq.n	8008f9c <__pow5mult+0xa0>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	b938      	cbnz	r0, 8008f98 <__pow5mult+0x9c>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff ff0f 	bl	8008db0 <__multiply>
 8008f92:	6020      	str	r0, [r4, #0]
 8008f94:	f8c0 9000 	str.w	r9, [r0]
 8008f98:	4604      	mov	r4, r0
 8008f9a:	e7e4      	b.n	8008f66 <__pow5mult+0x6a>
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08009cb8 	.word	0x08009cb8
 8008fa8:	08009a81 	.word	0x08009a81
 8008fac:	08009b68 	.word	0x08009b68

08008fb0 <__lshift>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6849      	ldr	r1, [r1, #4]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	4691      	mov	r9, r2
 8008fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fc8:	f108 0601 	add.w	r6, r8, #1
 8008fcc:	42b3      	cmp	r3, r6
 8008fce:	db0b      	blt.n	8008fe8 <__lshift+0x38>
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7ff fddb 	bl	8008b8c <_Balloc>
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	b948      	cbnz	r0, 8008fee <__lshift+0x3e>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b28      	ldr	r3, [pc, #160]	; (8009080 <__lshift+0xd0>)
 8008fde:	4829      	ldr	r0, [pc, #164]	; (8009084 <__lshift+0xd4>)
 8008fe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008fe4:	f000 fbca 	bl	800977c <__assert_func>
 8008fe8:	3101      	adds	r1, #1
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	e7ee      	b.n	8008fcc <__lshift+0x1c>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f100 0114 	add.w	r1, r0, #20
 8008ff4:	f100 0210 	add.w	r2, r0, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	4553      	cmp	r3, sl
 8008ffc:	db33      	blt.n	8009066 <__lshift+0xb6>
 8008ffe:	6920      	ldr	r0, [r4, #16]
 8009000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009004:	f104 0314 	add.w	r3, r4, #20
 8009008:	f019 091f 	ands.w	r9, r9, #31
 800900c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009014:	d02b      	beq.n	800906e <__lshift+0xbe>
 8009016:	f1c9 0e20 	rsb	lr, r9, #32
 800901a:	468a      	mov	sl, r1
 800901c:	2200      	movs	r2, #0
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	fa00 f009 	lsl.w	r0, r0, r9
 8009024:	4302      	orrs	r2, r0
 8009026:	f84a 2b04 	str.w	r2, [sl], #4
 800902a:	f853 2b04 	ldr.w	r2, [r3], #4
 800902e:	459c      	cmp	ip, r3
 8009030:	fa22 f20e 	lsr.w	r2, r2, lr
 8009034:	d8f3      	bhi.n	800901e <__lshift+0x6e>
 8009036:	ebac 0304 	sub.w	r3, ip, r4
 800903a:	3b15      	subs	r3, #21
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	3304      	adds	r3, #4
 8009042:	f104 0015 	add.w	r0, r4, #21
 8009046:	4584      	cmp	ip, r0
 8009048:	bf38      	it	cc
 800904a:	2304      	movcc	r3, #4
 800904c:	50ca      	str	r2, [r1, r3]
 800904e:	b10a      	cbz	r2, 8009054 <__lshift+0xa4>
 8009050:	f108 0602 	add.w	r6, r8, #2
 8009054:	3e01      	subs	r6, #1
 8009056:	4638      	mov	r0, r7
 8009058:	612e      	str	r6, [r5, #16]
 800905a:	4621      	mov	r1, r4
 800905c:	f7ff fdd6 	bl	8008c0c <_Bfree>
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009066:	f842 0f04 	str.w	r0, [r2, #4]!
 800906a:	3301      	adds	r3, #1
 800906c:	e7c5      	b.n	8008ffa <__lshift+0x4a>
 800906e:	3904      	subs	r1, #4
 8009070:	f853 2b04 	ldr.w	r2, [r3], #4
 8009074:	f841 2f04 	str.w	r2, [r1, #4]!
 8009078:	459c      	cmp	ip, r3
 800907a:	d8f9      	bhi.n	8009070 <__lshift+0xc0>
 800907c:	e7ea      	b.n	8009054 <__lshift+0xa4>
 800907e:	bf00      	nop
 8009080:	08009af7 	.word	0x08009af7
 8009084:	08009b68 	.word	0x08009b68

08009088 <__mcmp>:
 8009088:	b530      	push	{r4, r5, lr}
 800908a:	6902      	ldr	r2, [r0, #16]
 800908c:	690c      	ldr	r4, [r1, #16]
 800908e:	1b12      	subs	r2, r2, r4
 8009090:	d10e      	bne.n	80090b0 <__mcmp+0x28>
 8009092:	f100 0314 	add.w	r3, r0, #20
 8009096:	3114      	adds	r1, #20
 8009098:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800909c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090a8:	42a5      	cmp	r5, r4
 80090aa:	d003      	beq.n	80090b4 <__mcmp+0x2c>
 80090ac:	d305      	bcc.n	80090ba <__mcmp+0x32>
 80090ae:	2201      	movs	r2, #1
 80090b0:	4610      	mov	r0, r2
 80090b2:	bd30      	pop	{r4, r5, pc}
 80090b4:	4283      	cmp	r3, r0
 80090b6:	d3f3      	bcc.n	80090a0 <__mcmp+0x18>
 80090b8:	e7fa      	b.n	80090b0 <__mcmp+0x28>
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	e7f7      	b.n	80090b0 <__mcmp+0x28>

080090c0 <__mdiff>:
 80090c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	4606      	mov	r6, r0
 80090c8:	4611      	mov	r1, r2
 80090ca:	4620      	mov	r0, r4
 80090cc:	4617      	mov	r7, r2
 80090ce:	f7ff ffdb 	bl	8009088 <__mcmp>
 80090d2:	1e05      	subs	r5, r0, #0
 80090d4:	d110      	bne.n	80090f8 <__mdiff+0x38>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff fd57 	bl	8008b8c <_Balloc>
 80090de:	b930      	cbnz	r0, 80090ee <__mdiff+0x2e>
 80090e0:	4b39      	ldr	r3, [pc, #228]	; (80091c8 <__mdiff+0x108>)
 80090e2:	4602      	mov	r2, r0
 80090e4:	f240 2132 	movw	r1, #562	; 0x232
 80090e8:	4838      	ldr	r0, [pc, #224]	; (80091cc <__mdiff+0x10c>)
 80090ea:	f000 fb47 	bl	800977c <__assert_func>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	bfa4      	itt	ge
 80090fa:	463b      	movge	r3, r7
 80090fc:	4627      	movge	r7, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	bfa6      	itte	ge
 8009104:	461c      	movge	r4, r3
 8009106:	2500      	movge	r5, #0
 8009108:	2501      	movlt	r5, #1
 800910a:	f7ff fd3f 	bl	8008b8c <_Balloc>
 800910e:	b920      	cbnz	r0, 800911a <__mdiff+0x5a>
 8009110:	4b2d      	ldr	r3, [pc, #180]	; (80091c8 <__mdiff+0x108>)
 8009112:	4602      	mov	r2, r0
 8009114:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009118:	e7e6      	b.n	80090e8 <__mdiff+0x28>
 800911a:	693e      	ldr	r6, [r7, #16]
 800911c:	60c5      	str	r5, [r0, #12]
 800911e:	6925      	ldr	r5, [r4, #16]
 8009120:	f107 0114 	add.w	r1, r7, #20
 8009124:	f104 0914 	add.w	r9, r4, #20
 8009128:	f100 0e14 	add.w	lr, r0, #20
 800912c:	f107 0210 	add.w	r2, r7, #16
 8009130:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009134:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009138:	46f2      	mov	sl, lr
 800913a:	2700      	movs	r7, #0
 800913c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009144:	fa1f f883 	uxth.w	r8, r3
 8009148:	fa17 f78b 	uxtah	r7, r7, fp
 800914c:	0c1b      	lsrs	r3, r3, #16
 800914e:	eba7 0808 	sub.w	r8, r7, r8
 8009152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009156:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800915a:	fa1f f888 	uxth.w	r8, r8
 800915e:	141f      	asrs	r7, r3, #16
 8009160:	454d      	cmp	r5, r9
 8009162:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009166:	f84a 3b04 	str.w	r3, [sl], #4
 800916a:	d8e7      	bhi.n	800913c <__mdiff+0x7c>
 800916c:	1b2b      	subs	r3, r5, r4
 800916e:	3b15      	subs	r3, #21
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	3304      	adds	r3, #4
 8009176:	3415      	adds	r4, #21
 8009178:	42a5      	cmp	r5, r4
 800917a:	bf38      	it	cc
 800917c:	2304      	movcc	r3, #4
 800917e:	4419      	add	r1, r3
 8009180:	4473      	add	r3, lr
 8009182:	469e      	mov	lr, r3
 8009184:	460d      	mov	r5, r1
 8009186:	4565      	cmp	r5, ip
 8009188:	d30e      	bcc.n	80091a8 <__mdiff+0xe8>
 800918a:	f10c 0203 	add.w	r2, ip, #3
 800918e:	1a52      	subs	r2, r2, r1
 8009190:	f022 0203 	bic.w	r2, r2, #3
 8009194:	3903      	subs	r1, #3
 8009196:	458c      	cmp	ip, r1
 8009198:	bf38      	it	cc
 800919a:	2200      	movcc	r2, #0
 800919c:	441a      	add	r2, r3
 800919e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091a2:	b17b      	cbz	r3, 80091c4 <__mdiff+0x104>
 80091a4:	6106      	str	r6, [r0, #16]
 80091a6:	e7a5      	b.n	80090f4 <__mdiff+0x34>
 80091a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80091ac:	fa17 f488 	uxtah	r4, r7, r8
 80091b0:	1422      	asrs	r2, r4, #16
 80091b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80091b6:	b2a4      	uxth	r4, r4
 80091b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091bc:	f84e 4b04 	str.w	r4, [lr], #4
 80091c0:	1417      	asrs	r7, r2, #16
 80091c2:	e7e0      	b.n	8009186 <__mdiff+0xc6>
 80091c4:	3e01      	subs	r6, #1
 80091c6:	e7ea      	b.n	800919e <__mdiff+0xde>
 80091c8:	08009af7 	.word	0x08009af7
 80091cc:	08009b68 	.word	0x08009b68

080091d0 <__d2b>:
 80091d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	4689      	mov	r9, r1
 80091d6:	2101      	movs	r1, #1
 80091d8:	ec57 6b10 	vmov	r6, r7, d0
 80091dc:	4690      	mov	r8, r2
 80091de:	f7ff fcd5 	bl	8008b8c <_Balloc>
 80091e2:	4604      	mov	r4, r0
 80091e4:	b930      	cbnz	r0, 80091f4 <__d2b+0x24>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <__d2b+0xb0>)
 80091ea:	4826      	ldr	r0, [pc, #152]	; (8009284 <__d2b+0xb4>)
 80091ec:	f240 310a 	movw	r1, #778	; 0x30a
 80091f0:	f000 fac4 	bl	800977c <__assert_func>
 80091f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091fc:	bb35      	cbnz	r5, 800924c <__d2b+0x7c>
 80091fe:	2e00      	cmp	r6, #0
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	d028      	beq.n	8009256 <__d2b+0x86>
 8009204:	4668      	mov	r0, sp
 8009206:	9600      	str	r6, [sp, #0]
 8009208:	f7ff fd8c 	bl	8008d24 <__lo0bits>
 800920c:	9900      	ldr	r1, [sp, #0]
 800920e:	b300      	cbz	r0, 8009252 <__d2b+0x82>
 8009210:	9a01      	ldr	r2, [sp, #4]
 8009212:	f1c0 0320 	rsb	r3, r0, #32
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	430b      	orrs	r3, r1
 800921c:	40c2      	lsrs	r2, r0
 800921e:	6163      	str	r3, [r4, #20]
 8009220:	9201      	str	r2, [sp, #4]
 8009222:	9b01      	ldr	r3, [sp, #4]
 8009224:	61a3      	str	r3, [r4, #24]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bf14      	ite	ne
 800922a:	2202      	movne	r2, #2
 800922c:	2201      	moveq	r2, #1
 800922e:	6122      	str	r2, [r4, #16]
 8009230:	b1d5      	cbz	r5, 8009268 <__d2b+0x98>
 8009232:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009236:	4405      	add	r5, r0
 8009238:	f8c9 5000 	str.w	r5, [r9]
 800923c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009240:	f8c8 0000 	str.w	r0, [r8]
 8009244:	4620      	mov	r0, r4
 8009246:	b003      	add	sp, #12
 8009248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009250:	e7d5      	b.n	80091fe <__d2b+0x2e>
 8009252:	6161      	str	r1, [r4, #20]
 8009254:	e7e5      	b.n	8009222 <__d2b+0x52>
 8009256:	a801      	add	r0, sp, #4
 8009258:	f7ff fd64 	bl	8008d24 <__lo0bits>
 800925c:	9b01      	ldr	r3, [sp, #4]
 800925e:	6163      	str	r3, [r4, #20]
 8009260:	2201      	movs	r2, #1
 8009262:	6122      	str	r2, [r4, #16]
 8009264:	3020      	adds	r0, #32
 8009266:	e7e3      	b.n	8009230 <__d2b+0x60>
 8009268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800926c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009270:	f8c9 0000 	str.w	r0, [r9]
 8009274:	6918      	ldr	r0, [r3, #16]
 8009276:	f7ff fd35 	bl	8008ce4 <__hi0bits>
 800927a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800927e:	e7df      	b.n	8009240 <__d2b+0x70>
 8009280:	08009af7 	.word	0x08009af7
 8009284:	08009b68 	.word	0x08009b68

08009288 <_calloc_r>:
 8009288:	b513      	push	{r0, r1, r4, lr}
 800928a:	434a      	muls	r2, r1
 800928c:	4611      	mov	r1, r2
 800928e:	9201      	str	r2, [sp, #4]
 8009290:	f000 f85a 	bl	8009348 <_malloc_r>
 8009294:	4604      	mov	r4, r0
 8009296:	b118      	cbz	r0, 80092a0 <_calloc_r+0x18>
 8009298:	9a01      	ldr	r2, [sp, #4]
 800929a:	2100      	movs	r1, #0
 800929c:	f7fd fe02 	bl	8006ea4 <memset>
 80092a0:	4620      	mov	r0, r4
 80092a2:	b002      	add	sp, #8
 80092a4:	bd10      	pop	{r4, pc}
	...

080092a8 <_free_r>:
 80092a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092aa:	2900      	cmp	r1, #0
 80092ac:	d048      	beq.n	8009340 <_free_r+0x98>
 80092ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b2:	9001      	str	r0, [sp, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f1a1 0404 	sub.w	r4, r1, #4
 80092ba:	bfb8      	it	lt
 80092bc:	18e4      	addlt	r4, r4, r3
 80092be:	f000 fae3 	bl	8009888 <__malloc_lock>
 80092c2:	4a20      	ldr	r2, [pc, #128]	; (8009344 <_free_r+0x9c>)
 80092c4:	9801      	ldr	r0, [sp, #4]
 80092c6:	6813      	ldr	r3, [r2, #0]
 80092c8:	4615      	mov	r5, r2
 80092ca:	b933      	cbnz	r3, 80092da <_free_r+0x32>
 80092cc:	6063      	str	r3, [r4, #4]
 80092ce:	6014      	str	r4, [r2, #0]
 80092d0:	b003      	add	sp, #12
 80092d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092d6:	f000 badd 	b.w	8009894 <__malloc_unlock>
 80092da:	42a3      	cmp	r3, r4
 80092dc:	d90b      	bls.n	80092f6 <_free_r+0x4e>
 80092de:	6821      	ldr	r1, [r4, #0]
 80092e0:	1862      	adds	r2, r4, r1
 80092e2:	4293      	cmp	r3, r2
 80092e4:	bf04      	itt	eq
 80092e6:	681a      	ldreq	r2, [r3, #0]
 80092e8:	685b      	ldreq	r3, [r3, #4]
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	bf04      	itt	eq
 80092ee:	1852      	addeq	r2, r2, r1
 80092f0:	6022      	streq	r2, [r4, #0]
 80092f2:	602c      	str	r4, [r5, #0]
 80092f4:	e7ec      	b.n	80092d0 <_free_r+0x28>
 80092f6:	461a      	mov	r2, r3
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	b10b      	cbz	r3, 8009300 <_free_r+0x58>
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d9fa      	bls.n	80092f6 <_free_r+0x4e>
 8009300:	6811      	ldr	r1, [r2, #0]
 8009302:	1855      	adds	r5, r2, r1
 8009304:	42a5      	cmp	r5, r4
 8009306:	d10b      	bne.n	8009320 <_free_r+0x78>
 8009308:	6824      	ldr	r4, [r4, #0]
 800930a:	4421      	add	r1, r4
 800930c:	1854      	adds	r4, r2, r1
 800930e:	42a3      	cmp	r3, r4
 8009310:	6011      	str	r1, [r2, #0]
 8009312:	d1dd      	bne.n	80092d0 <_free_r+0x28>
 8009314:	681c      	ldr	r4, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	6053      	str	r3, [r2, #4]
 800931a:	4421      	add	r1, r4
 800931c:	6011      	str	r1, [r2, #0]
 800931e:	e7d7      	b.n	80092d0 <_free_r+0x28>
 8009320:	d902      	bls.n	8009328 <_free_r+0x80>
 8009322:	230c      	movs	r3, #12
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	e7d3      	b.n	80092d0 <_free_r+0x28>
 8009328:	6825      	ldr	r5, [r4, #0]
 800932a:	1961      	adds	r1, r4, r5
 800932c:	428b      	cmp	r3, r1
 800932e:	bf04      	itt	eq
 8009330:	6819      	ldreq	r1, [r3, #0]
 8009332:	685b      	ldreq	r3, [r3, #4]
 8009334:	6063      	str	r3, [r4, #4]
 8009336:	bf04      	itt	eq
 8009338:	1949      	addeq	r1, r1, r5
 800933a:	6021      	streq	r1, [r4, #0]
 800933c:	6054      	str	r4, [r2, #4]
 800933e:	e7c7      	b.n	80092d0 <_free_r+0x28>
 8009340:	b003      	add	sp, #12
 8009342:	bd30      	pop	{r4, r5, pc}
 8009344:	20000204 	.word	0x20000204

08009348 <_malloc_r>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	1ccd      	adds	r5, r1, #3
 800934c:	f025 0503 	bic.w	r5, r5, #3
 8009350:	3508      	adds	r5, #8
 8009352:	2d0c      	cmp	r5, #12
 8009354:	bf38      	it	cc
 8009356:	250c      	movcc	r5, #12
 8009358:	2d00      	cmp	r5, #0
 800935a:	4606      	mov	r6, r0
 800935c:	db01      	blt.n	8009362 <_malloc_r+0x1a>
 800935e:	42a9      	cmp	r1, r5
 8009360:	d903      	bls.n	800936a <_malloc_r+0x22>
 8009362:	230c      	movs	r3, #12
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	2000      	movs	r0, #0
 8009368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936a:	f000 fa8d 	bl	8009888 <__malloc_lock>
 800936e:	4921      	ldr	r1, [pc, #132]	; (80093f4 <_malloc_r+0xac>)
 8009370:	680a      	ldr	r2, [r1, #0]
 8009372:	4614      	mov	r4, r2
 8009374:	b99c      	cbnz	r4, 800939e <_malloc_r+0x56>
 8009376:	4f20      	ldr	r7, [pc, #128]	; (80093f8 <_malloc_r+0xb0>)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	b923      	cbnz	r3, 8009386 <_malloc_r+0x3e>
 800937c:	4621      	mov	r1, r4
 800937e:	4630      	mov	r0, r6
 8009380:	f000 f996 	bl	80096b0 <_sbrk_r>
 8009384:	6038      	str	r0, [r7, #0]
 8009386:	4629      	mov	r1, r5
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f991 	bl	80096b0 <_sbrk_r>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d123      	bne.n	80093da <_malloc_r+0x92>
 8009392:	230c      	movs	r3, #12
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	4630      	mov	r0, r6
 8009398:	f000 fa7c 	bl	8009894 <__malloc_unlock>
 800939c:	e7e3      	b.n	8009366 <_malloc_r+0x1e>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	1b5b      	subs	r3, r3, r5
 80093a2:	d417      	bmi.n	80093d4 <_malloc_r+0x8c>
 80093a4:	2b0b      	cmp	r3, #11
 80093a6:	d903      	bls.n	80093b0 <_malloc_r+0x68>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	441c      	add	r4, r3
 80093ac:	6025      	str	r5, [r4, #0]
 80093ae:	e004      	b.n	80093ba <_malloc_r+0x72>
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	42a2      	cmp	r2, r4
 80093b4:	bf0c      	ite	eq
 80093b6:	600b      	streq	r3, [r1, #0]
 80093b8:	6053      	strne	r3, [r2, #4]
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 fa6a 	bl	8009894 <__malloc_unlock>
 80093c0:	f104 000b 	add.w	r0, r4, #11
 80093c4:	1d23      	adds	r3, r4, #4
 80093c6:	f020 0007 	bic.w	r0, r0, #7
 80093ca:	1ac2      	subs	r2, r0, r3
 80093cc:	d0cc      	beq.n	8009368 <_malloc_r+0x20>
 80093ce:	1a1b      	subs	r3, r3, r0
 80093d0:	50a3      	str	r3, [r4, r2]
 80093d2:	e7c9      	b.n	8009368 <_malloc_r+0x20>
 80093d4:	4622      	mov	r2, r4
 80093d6:	6864      	ldr	r4, [r4, #4]
 80093d8:	e7cc      	b.n	8009374 <_malloc_r+0x2c>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d0e3      	beq.n	80093ac <_malloc_r+0x64>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f962 	bl	80096b0 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1dd      	bne.n	80093ac <_malloc_r+0x64>
 80093f0:	e7cf      	b.n	8009392 <_malloc_r+0x4a>
 80093f2:	bf00      	nop
 80093f4:	20000204 	.word	0x20000204
 80093f8:	20000208 	.word	0x20000208

080093fc <__sfputc_r>:
 80093fc:	6893      	ldr	r3, [r2, #8]
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	b410      	push	{r4}
 8009404:	6093      	str	r3, [r2, #8]
 8009406:	da08      	bge.n	800941a <__sfputc_r+0x1e>
 8009408:	6994      	ldr	r4, [r2, #24]
 800940a:	42a3      	cmp	r3, r4
 800940c:	db01      	blt.n	8009412 <__sfputc_r+0x16>
 800940e:	290a      	cmp	r1, #10
 8009410:	d103      	bne.n	800941a <__sfputc_r+0x1e>
 8009412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009416:	f7fe ba45 	b.w	80078a4 <__swbuf_r>
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	1c58      	adds	r0, r3, #1
 800941e:	6010      	str	r0, [r2, #0]
 8009420:	7019      	strb	r1, [r3, #0]
 8009422:	4608      	mov	r0, r1
 8009424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009428:	4770      	bx	lr

0800942a <__sfputs_r>:
 800942a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1
 8009430:	4614      	mov	r4, r2
 8009432:	18d5      	adds	r5, r2, r3
 8009434:	42ac      	cmp	r4, r5
 8009436:	d101      	bne.n	800943c <__sfputs_r+0x12>
 8009438:	2000      	movs	r0, #0
 800943a:	e007      	b.n	800944c <__sfputs_r+0x22>
 800943c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009440:	463a      	mov	r2, r7
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ffda 	bl	80093fc <__sfputc_r>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d1f3      	bne.n	8009434 <__sfputs_r+0xa>
 800944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009450 <_vfiprintf_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	460d      	mov	r5, r1
 8009456:	b09d      	sub	sp, #116	; 0x74
 8009458:	4614      	mov	r4, r2
 800945a:	4698      	mov	r8, r3
 800945c:	4606      	mov	r6, r0
 800945e:	b118      	cbz	r0, 8009468 <_vfiprintf_r+0x18>
 8009460:	6983      	ldr	r3, [r0, #24]
 8009462:	b90b      	cbnz	r3, 8009468 <_vfiprintf_r+0x18>
 8009464:	f7ff fa72 	bl	800894c <__sinit>
 8009468:	4b89      	ldr	r3, [pc, #548]	; (8009690 <_vfiprintf_r+0x240>)
 800946a:	429d      	cmp	r5, r3
 800946c:	d11b      	bne.n	80094a6 <_vfiprintf_r+0x56>
 800946e:	6875      	ldr	r5, [r6, #4]
 8009470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	d405      	bmi.n	8009482 <_vfiprintf_r+0x32>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d402      	bmi.n	8009482 <_vfiprintf_r+0x32>
 800947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947e:	f7ff fb08 	bl	8008a92 <__retarget_lock_acquire_recursive>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	071b      	lsls	r3, r3, #28
 8009486:	d501      	bpl.n	800948c <_vfiprintf_r+0x3c>
 8009488:	692b      	ldr	r3, [r5, #16]
 800948a:	b9eb      	cbnz	r3, 80094c8 <_vfiprintf_r+0x78>
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f7fe fa5a 	bl	8007948 <__swsetup_r>
 8009494:	b1c0      	cbz	r0, 80094c8 <_vfiprintf_r+0x78>
 8009496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009498:	07dc      	lsls	r4, r3, #31
 800949a:	d50e      	bpl.n	80094ba <_vfiprintf_r+0x6a>
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	b01d      	add	sp, #116	; 0x74
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	4b7b      	ldr	r3, [pc, #492]	; (8009694 <_vfiprintf_r+0x244>)
 80094a8:	429d      	cmp	r5, r3
 80094aa:	d101      	bne.n	80094b0 <_vfiprintf_r+0x60>
 80094ac:	68b5      	ldr	r5, [r6, #8]
 80094ae:	e7df      	b.n	8009470 <_vfiprintf_r+0x20>
 80094b0:	4b79      	ldr	r3, [pc, #484]	; (8009698 <_vfiprintf_r+0x248>)
 80094b2:	429d      	cmp	r5, r3
 80094b4:	bf08      	it	eq
 80094b6:	68f5      	ldreq	r5, [r6, #12]
 80094b8:	e7da      	b.n	8009470 <_vfiprintf_r+0x20>
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	0598      	lsls	r0, r3, #22
 80094be:	d4ed      	bmi.n	800949c <_vfiprintf_r+0x4c>
 80094c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c2:	f7ff fae7 	bl	8008a94 <__retarget_lock_release_recursive>
 80094c6:	e7e9      	b.n	800949c <_vfiprintf_r+0x4c>
 80094c8:	2300      	movs	r3, #0
 80094ca:	9309      	str	r3, [sp, #36]	; 0x24
 80094cc:	2320      	movs	r3, #32
 80094ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d6:	2330      	movs	r3, #48	; 0x30
 80094d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800969c <_vfiprintf_r+0x24c>
 80094dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094e0:	f04f 0901 	mov.w	r9, #1
 80094e4:	4623      	mov	r3, r4
 80094e6:	469a      	mov	sl, r3
 80094e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ec:	b10a      	cbz	r2, 80094f2 <_vfiprintf_r+0xa2>
 80094ee:	2a25      	cmp	r2, #37	; 0x25
 80094f0:	d1f9      	bne.n	80094e6 <_vfiprintf_r+0x96>
 80094f2:	ebba 0b04 	subs.w	fp, sl, r4
 80094f6:	d00b      	beq.n	8009510 <_vfiprintf_r+0xc0>
 80094f8:	465b      	mov	r3, fp
 80094fa:	4622      	mov	r2, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	4630      	mov	r0, r6
 8009500:	f7ff ff93 	bl	800942a <__sfputs_r>
 8009504:	3001      	adds	r0, #1
 8009506:	f000 80aa 	beq.w	800965e <_vfiprintf_r+0x20e>
 800950a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800950c:	445a      	add	r2, fp
 800950e:	9209      	str	r2, [sp, #36]	; 0x24
 8009510:	f89a 3000 	ldrb.w	r3, [sl]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80a2 	beq.w	800965e <_vfiprintf_r+0x20e>
 800951a:	2300      	movs	r3, #0
 800951c:	f04f 32ff 	mov.w	r2, #4294967295
 8009520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009524:	f10a 0a01 	add.w	sl, sl, #1
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009530:	931a      	str	r3, [sp, #104]	; 0x68
 8009532:	4654      	mov	r4, sl
 8009534:	2205      	movs	r2, #5
 8009536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953a:	4858      	ldr	r0, [pc, #352]	; (800969c <_vfiprintf_r+0x24c>)
 800953c:	f7f6 fe68 	bl	8000210 <memchr>
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	b9d8      	cbnz	r0, 800957c <_vfiprintf_r+0x12c>
 8009544:	06d1      	lsls	r1, r2, #27
 8009546:	bf44      	itt	mi
 8009548:	2320      	movmi	r3, #32
 800954a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954e:	0713      	lsls	r3, r2, #28
 8009550:	bf44      	itt	mi
 8009552:	232b      	movmi	r3, #43	; 0x2b
 8009554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009558:	f89a 3000 	ldrb.w	r3, [sl]
 800955c:	2b2a      	cmp	r3, #42	; 0x2a
 800955e:	d015      	beq.n	800958c <_vfiprintf_r+0x13c>
 8009560:	9a07      	ldr	r2, [sp, #28]
 8009562:	4654      	mov	r4, sl
 8009564:	2000      	movs	r0, #0
 8009566:	f04f 0c0a 	mov.w	ip, #10
 800956a:	4621      	mov	r1, r4
 800956c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009570:	3b30      	subs	r3, #48	; 0x30
 8009572:	2b09      	cmp	r3, #9
 8009574:	d94e      	bls.n	8009614 <_vfiprintf_r+0x1c4>
 8009576:	b1b0      	cbz	r0, 80095a6 <_vfiprintf_r+0x156>
 8009578:	9207      	str	r2, [sp, #28]
 800957a:	e014      	b.n	80095a6 <_vfiprintf_r+0x156>
 800957c:	eba0 0308 	sub.w	r3, r0, r8
 8009580:	fa09 f303 	lsl.w	r3, r9, r3
 8009584:	4313      	orrs	r3, r2
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	46a2      	mov	sl, r4
 800958a:	e7d2      	b.n	8009532 <_vfiprintf_r+0xe2>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d19      	adds	r1, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9103      	str	r1, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfbb      	ittet	lt
 8009598:	425b      	neglt	r3, r3
 800959a:	f042 0202 	orrlt.w	r2, r2, #2
 800959e:	9307      	strge	r3, [sp, #28]
 80095a0:	9307      	strlt	r3, [sp, #28]
 80095a2:	bfb8      	it	lt
 80095a4:	9204      	strlt	r2, [sp, #16]
 80095a6:	7823      	ldrb	r3, [r4, #0]
 80095a8:	2b2e      	cmp	r3, #46	; 0x2e
 80095aa:	d10c      	bne.n	80095c6 <_vfiprintf_r+0x176>
 80095ac:	7863      	ldrb	r3, [r4, #1]
 80095ae:	2b2a      	cmp	r3, #42	; 0x2a
 80095b0:	d135      	bne.n	800961e <_vfiprintf_r+0x1ce>
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	1d1a      	adds	r2, r3, #4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	9203      	str	r2, [sp, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfb8      	it	lt
 80095be:	f04f 33ff 	movlt.w	r3, #4294967295
 80095c2:	3402      	adds	r4, #2
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096ac <_vfiprintf_r+0x25c>
 80095ca:	7821      	ldrb	r1, [r4, #0]
 80095cc:	2203      	movs	r2, #3
 80095ce:	4650      	mov	r0, sl
 80095d0:	f7f6 fe1e 	bl	8000210 <memchr>
 80095d4:	b140      	cbz	r0, 80095e8 <_vfiprintf_r+0x198>
 80095d6:	2340      	movs	r3, #64	; 0x40
 80095d8:	eba0 000a 	sub.w	r0, r0, sl
 80095dc:	fa03 f000 	lsl.w	r0, r3, r0
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	4303      	orrs	r3, r0
 80095e4:	3401      	adds	r4, #1
 80095e6:	9304      	str	r3, [sp, #16]
 80095e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ec:	482c      	ldr	r0, [pc, #176]	; (80096a0 <_vfiprintf_r+0x250>)
 80095ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095f2:	2206      	movs	r2, #6
 80095f4:	f7f6 fe0c 	bl	8000210 <memchr>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d03f      	beq.n	800967c <_vfiprintf_r+0x22c>
 80095fc:	4b29      	ldr	r3, [pc, #164]	; (80096a4 <_vfiprintf_r+0x254>)
 80095fe:	bb1b      	cbnz	r3, 8009648 <_vfiprintf_r+0x1f8>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	3307      	adds	r3, #7
 8009604:	f023 0307 	bic.w	r3, r3, #7
 8009608:	3308      	adds	r3, #8
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	443b      	add	r3, r7
 8009610:	9309      	str	r3, [sp, #36]	; 0x24
 8009612:	e767      	b.n	80094e4 <_vfiprintf_r+0x94>
 8009614:	fb0c 3202 	mla	r2, ip, r2, r3
 8009618:	460c      	mov	r4, r1
 800961a:	2001      	movs	r0, #1
 800961c:	e7a5      	b.n	800956a <_vfiprintf_r+0x11a>
 800961e:	2300      	movs	r3, #0
 8009620:	3401      	adds	r4, #1
 8009622:	9305      	str	r3, [sp, #20]
 8009624:	4619      	mov	r1, r3
 8009626:	f04f 0c0a 	mov.w	ip, #10
 800962a:	4620      	mov	r0, r4
 800962c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009630:	3a30      	subs	r2, #48	; 0x30
 8009632:	2a09      	cmp	r2, #9
 8009634:	d903      	bls.n	800963e <_vfiprintf_r+0x1ee>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0c5      	beq.n	80095c6 <_vfiprintf_r+0x176>
 800963a:	9105      	str	r1, [sp, #20]
 800963c:	e7c3      	b.n	80095c6 <_vfiprintf_r+0x176>
 800963e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009642:	4604      	mov	r4, r0
 8009644:	2301      	movs	r3, #1
 8009646:	e7f0      	b.n	800962a <_vfiprintf_r+0x1da>
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	462a      	mov	r2, r5
 800964e:	4b16      	ldr	r3, [pc, #88]	; (80096a8 <_vfiprintf_r+0x258>)
 8009650:	a904      	add	r1, sp, #16
 8009652:	4630      	mov	r0, r6
 8009654:	f7fd fcce 	bl	8006ff4 <_printf_float>
 8009658:	4607      	mov	r7, r0
 800965a:	1c78      	adds	r0, r7, #1
 800965c:	d1d6      	bne.n	800960c <_vfiprintf_r+0x1bc>
 800965e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009660:	07d9      	lsls	r1, r3, #31
 8009662:	d405      	bmi.n	8009670 <_vfiprintf_r+0x220>
 8009664:	89ab      	ldrh	r3, [r5, #12]
 8009666:	059a      	lsls	r2, r3, #22
 8009668:	d402      	bmi.n	8009670 <_vfiprintf_r+0x220>
 800966a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966c:	f7ff fa12 	bl	8008a94 <__retarget_lock_release_recursive>
 8009670:	89ab      	ldrh	r3, [r5, #12]
 8009672:	065b      	lsls	r3, r3, #25
 8009674:	f53f af12 	bmi.w	800949c <_vfiprintf_r+0x4c>
 8009678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800967a:	e711      	b.n	80094a0 <_vfiprintf_r+0x50>
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	462a      	mov	r2, r5
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <_vfiprintf_r+0x258>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4630      	mov	r0, r6
 8009688:	f7fd ff58 	bl	800753c <_printf_i>
 800968c:	e7e4      	b.n	8009658 <_vfiprintf_r+0x208>
 800968e:	bf00      	nop
 8009690:	08009b28 	.word	0x08009b28
 8009694:	08009b48 	.word	0x08009b48
 8009698:	08009b08 	.word	0x08009b08
 800969c:	08009cc4 	.word	0x08009cc4
 80096a0:	08009cce 	.word	0x08009cce
 80096a4:	08006ff5 	.word	0x08006ff5
 80096a8:	0800942b 	.word	0x0800942b
 80096ac:	08009cca 	.word	0x08009cca

080096b0 <_sbrk_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d06      	ldr	r5, [pc, #24]	; (80096cc <_sbrk_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7f7 fec4 	bl	8001448 <_sbrk>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_sbrk_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_sbrk_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	200003e0 	.word	0x200003e0

080096d0 <__sread>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	460c      	mov	r4, r1
 80096d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d8:	f000 f8e2 	bl	80098a0 <_read_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	bfab      	itete	ge
 80096e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096e2:	89a3      	ldrhlt	r3, [r4, #12]
 80096e4:	181b      	addge	r3, r3, r0
 80096e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ea:	bfac      	ite	ge
 80096ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80096ee:	81a3      	strhlt	r3, [r4, #12]
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <__swrite>:
 80096f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	461f      	mov	r7, r3
 80096f8:	898b      	ldrh	r3, [r1, #12]
 80096fa:	05db      	lsls	r3, r3, #23
 80096fc:	4605      	mov	r5, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	4616      	mov	r6, r2
 8009702:	d505      	bpl.n	8009710 <__swrite+0x1e>
 8009704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009708:	2302      	movs	r3, #2
 800970a:	2200      	movs	r2, #0
 800970c:	f000 f898 	bl	8009840 <_lseek_r>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	4632      	mov	r2, r6
 800971e:	463b      	mov	r3, r7
 8009720:	4628      	mov	r0, r5
 8009722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	f000 b817 	b.w	8009758 <_write_r>

0800972a <__sseek>:
 800972a:	b510      	push	{r4, lr}
 800972c:	460c      	mov	r4, r1
 800972e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009732:	f000 f885 	bl	8009840 <_lseek_r>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	bf15      	itete	ne
 800973c:	6560      	strne	r0, [r4, #84]	; 0x54
 800973e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009746:	81a3      	strheq	r3, [r4, #12]
 8009748:	bf18      	it	ne
 800974a:	81a3      	strhne	r3, [r4, #12]
 800974c:	bd10      	pop	{r4, pc}

0800974e <__sclose>:
 800974e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009752:	f000 b831 	b.w	80097b8 <_close_r>
	...

08009758 <_write_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	; (8009778 <_write_r+0x20>)
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7f7 fe1d 	bl	80013a6 <_write>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_write_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_write_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	200003e0 	.word	0x200003e0

0800977c <__assert_func>:
 800977c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977e:	4614      	mov	r4, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <__assert_func+0x2c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4605      	mov	r5, r0
 8009788:	68d8      	ldr	r0, [r3, #12]
 800978a:	b14c      	cbz	r4, 80097a0 <__assert_func+0x24>
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <__assert_func+0x30>)
 800978e:	9100      	str	r1, [sp, #0]
 8009790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009794:	4906      	ldr	r1, [pc, #24]	; (80097b0 <__assert_func+0x34>)
 8009796:	462b      	mov	r3, r5
 8009798:	f000 f81e 	bl	80097d8 <fiprintf>
 800979c:	f000 f89f 	bl	80098de <abort>
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <__assert_func+0x38>)
 80097a2:	461c      	mov	r4, r3
 80097a4:	e7f3      	b.n	800978e <__assert_func+0x12>
 80097a6:	bf00      	nop
 80097a8:	20000010 	.word	0x20000010
 80097ac:	08009cd5 	.word	0x08009cd5
 80097b0:	08009ce2 	.word	0x08009ce2
 80097b4:	08009d10 	.word	0x08009d10

080097b8 <_close_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d06      	ldr	r5, [pc, #24]	; (80097d4 <_close_r+0x1c>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7f7 fe0b 	bl	80013de <_close>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_close_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_close_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200003e0 	.word	0x200003e0

080097d8 <fiprintf>:
 80097d8:	b40e      	push	{r1, r2, r3}
 80097da:	b503      	push	{r0, r1, lr}
 80097dc:	4601      	mov	r1, r0
 80097de:	ab03      	add	r3, sp, #12
 80097e0:	4805      	ldr	r0, [pc, #20]	; (80097f8 <fiprintf+0x20>)
 80097e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e6:	6800      	ldr	r0, [r0, #0]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	f7ff fe31 	bl	8009450 <_vfiprintf_r>
 80097ee:	b002      	add	sp, #8
 80097f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f4:	b003      	add	sp, #12
 80097f6:	4770      	bx	lr
 80097f8:	20000010 	.word	0x20000010

080097fc <_fstat_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d07      	ldr	r5, [pc, #28]	; (800981c <_fstat_r+0x20>)
 8009800:	2300      	movs	r3, #0
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	4611      	mov	r1, r2
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	f7f7 fdf4 	bl	80013f6 <_fstat>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	d102      	bne.n	8009818 <_fstat_r+0x1c>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	b103      	cbz	r3, 8009818 <_fstat_r+0x1c>
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	bd38      	pop	{r3, r4, r5, pc}
 800981a:	bf00      	nop
 800981c:	200003e0 	.word	0x200003e0

08009820 <_isatty_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	; (800983c <_isatty_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7f7 fdf3 	bl	8001416 <_isatty>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_isatty_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_isatty_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	200003e0 	.word	0x200003e0

08009840 <_lseek_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <_lseek_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f7 fdec 	bl	800142c <_lseek>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_lseek_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_lseek_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	200003e0 	.word	0x200003e0

08009864 <__ascii_mbtowc>:
 8009864:	b082      	sub	sp, #8
 8009866:	b901      	cbnz	r1, 800986a <__ascii_mbtowc+0x6>
 8009868:	a901      	add	r1, sp, #4
 800986a:	b142      	cbz	r2, 800987e <__ascii_mbtowc+0x1a>
 800986c:	b14b      	cbz	r3, 8009882 <__ascii_mbtowc+0x1e>
 800986e:	7813      	ldrb	r3, [r2, #0]
 8009870:	600b      	str	r3, [r1, #0]
 8009872:	7812      	ldrb	r2, [r2, #0]
 8009874:	1e10      	subs	r0, r2, #0
 8009876:	bf18      	it	ne
 8009878:	2001      	movne	r0, #1
 800987a:	b002      	add	sp, #8
 800987c:	4770      	bx	lr
 800987e:	4610      	mov	r0, r2
 8009880:	e7fb      	b.n	800987a <__ascii_mbtowc+0x16>
 8009882:	f06f 0001 	mvn.w	r0, #1
 8009886:	e7f8      	b.n	800987a <__ascii_mbtowc+0x16>

08009888 <__malloc_lock>:
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <__malloc_lock+0x8>)
 800988a:	f7ff b902 	b.w	8008a92 <__retarget_lock_acquire_recursive>
 800988e:	bf00      	nop
 8009890:	200003d8 	.word	0x200003d8

08009894 <__malloc_unlock>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__malloc_unlock+0x8>)
 8009896:	f7ff b8fd 	b.w	8008a94 <__retarget_lock_release_recursive>
 800989a:	bf00      	nop
 800989c:	200003d8 	.word	0x200003d8

080098a0 <_read_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d07      	ldr	r5, [pc, #28]	; (80098c0 <_read_r+0x20>)
 80098a4:	4604      	mov	r4, r0
 80098a6:	4608      	mov	r0, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	602a      	str	r2, [r5, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f7f7 fd5c 	bl	800136c <_read>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_read_r+0x1e>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_read_r+0x1e>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	200003e0 	.word	0x200003e0

080098c4 <__ascii_wctomb>:
 80098c4:	b149      	cbz	r1, 80098da <__ascii_wctomb+0x16>
 80098c6:	2aff      	cmp	r2, #255	; 0xff
 80098c8:	bf85      	ittet	hi
 80098ca:	238a      	movhi	r3, #138	; 0x8a
 80098cc:	6003      	strhi	r3, [r0, #0]
 80098ce:	700a      	strbls	r2, [r1, #0]
 80098d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098d4:	bf98      	it	ls
 80098d6:	2001      	movls	r0, #1
 80098d8:	4770      	bx	lr
 80098da:	4608      	mov	r0, r1
 80098dc:	4770      	bx	lr

080098de <abort>:
 80098de:	b508      	push	{r3, lr}
 80098e0:	2006      	movs	r0, #6
 80098e2:	f000 f82b 	bl	800993c <raise>
 80098e6:	2001      	movs	r0, #1
 80098e8:	f7f7 fd36 	bl	8001358 <_exit>

080098ec <_raise_r>:
 80098ec:	291f      	cmp	r1, #31
 80098ee:	b538      	push	{r3, r4, r5, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	d904      	bls.n	8009900 <_raise_r+0x14>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009902:	b112      	cbz	r2, 800990a <_raise_r+0x1e>
 8009904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009908:	b94b      	cbnz	r3, 800991e <_raise_r+0x32>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f830 	bl	8009970 <_getpid_r>
 8009910:	462a      	mov	r2, r5
 8009912:	4601      	mov	r1, r0
 8009914:	4620      	mov	r0, r4
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	f000 b817 	b.w	800994c <_kill_r>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d00a      	beq.n	8009938 <_raise_r+0x4c>
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	d103      	bne.n	800992e <_raise_r+0x42>
 8009926:	2316      	movs	r3, #22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	2001      	movs	r0, #1
 800992c:	e7e7      	b.n	80098fe <_raise_r+0x12>
 800992e:	2400      	movs	r4, #0
 8009930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009934:	4628      	mov	r0, r5
 8009936:	4798      	blx	r3
 8009938:	2000      	movs	r0, #0
 800993a:	e7e0      	b.n	80098fe <_raise_r+0x12>

0800993c <raise>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <raise+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f7ff bfd3 	b.w	80098ec <_raise_r>
 8009946:	bf00      	nop
 8009948:	20000010 	.word	0x20000010

0800994c <_kill_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_kill_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f7 fced 	bl	8001338 <_kill>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_kill_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_kill_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	200003e0 	.word	0x200003e0

08009970 <_getpid_r>:
 8009970:	f7f7 bcda 	b.w	8001328 <_getpid>

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
