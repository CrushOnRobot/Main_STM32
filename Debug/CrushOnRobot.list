
CrushOnRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c6c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009e30  08009e30  00019e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a30c  0800a30c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a30c  0800a30c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a314  0800a314  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001e8  0800a504  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800a504  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194e5  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c81  00000000  00000000  000396fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8d1  00000000  00000000  0003e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f55  00000000  00000000  0006add9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010db57  00000000  00000000  00080d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  0018e8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009e14 	.word	0x08009e14

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	08009e14 	.word	0x08009e14

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_GPIO_Init>:

/** Configure pins
     PE9   ------> S_CKOUTDFSDM1
*/
void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 fbb1 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f001 fa10 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_GPIO_Init+0x108>)
 8000fa6:	f001 f9ff 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000faa:	2308      	movs	r3, #8
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_GPIO_Init+0x10c>)
 8000fc6:	f001 f9ef 	bl	80023a8 <HAL_GPIO_Init>

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48001000 	.word	0x48001000
 8000fdc:	48001c00 	.word	0x48001c00

08000fe0 <__io_putchar>:
int __io_putchar(int ch);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	while(HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000) != HAL_OK){}
 8000fe8:	bf00      	nop
 8000fea:	1d39      	adds	r1, r7, #4
 8000fec:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <__io_putchar+0x28>)
 8000ff4:	f004 f980 	bl	80052f8 <HAL_UART_Transmit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f5      	bne.n	8000fea <__io_putchar+0xa>
	return ch;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200003dc 	.word	0x200003dc

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 ffce 	bl	8001fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f9bd 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f7ff ff59 	bl	8000ed0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800101e:	f000 fe55 	bl	8001ccc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001022:	f000 fc11 	bl	8001848 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001026:	f000 fc8b 	bl	8001940 <MX_TIM3_Init>
  MX_TIM4_Init();
 800102a:	f000 fcef 	bl	8001a0c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800102e:	f000 fe99 	bl	8001d64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &rx_debug, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	4994      	ldr	r1, [pc, #592]	; (8001288 <main+0x27c>)
 8001036:	4895      	ldr	r0, [pc, #596]	; (800128c <main+0x280>)
 8001038:	f004 f9f6 	bl	8005428 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_camera, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	4994      	ldr	r1, [pc, #592]	; (8001290 <main+0x284>)
 8001040:	4894      	ldr	r0, [pc, #592]	; (8001294 <main+0x288>)
 8001042:	f004 f9f1 	bl	8005428 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001046:	2100      	movs	r1, #0
 8001048:	4893      	ldr	r0, [pc, #588]	; (8001298 <main+0x28c>)
 800104a:	f003 f967 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800104e:	2104      	movs	r1, #4
 8001050:	4891      	ldr	r0, [pc, #580]	; (8001298 <main+0x28c>)
 8001052:	f003 f963 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001056:	2108      	movs	r1, #8
 8001058:	488f      	ldr	r0, [pc, #572]	; (8001298 <main+0x28c>)
 800105a:	f003 f95f 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800105e:	210c      	movs	r1, #12
 8001060:	488d      	ldr	r0, [pc, #564]	; (8001298 <main+0x28c>)
 8001062:	f003 f95b 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	488c      	ldr	r0, [pc, #560]	; (800129c <main+0x290>)
 800106a:	f003 f957 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800106e:	210c      	movs	r1, #12
 8001070:	488a      	ldr	r0, [pc, #552]	; (800129c <main+0x290>)
 8001072:	f003 f953 	bl	800431c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //servo
 8001076:	2108      	movs	r1, #8
 8001078:	4889      	ldr	r0, [pc, #548]	; (80012a0 <main+0x294>)
 800107a:	f003 f94f 	bl	800431c <HAL_TIM_PWM_Start>

  printf("Initial setup finished\n");
 800107e:	4889      	ldr	r0, [pc, #548]	; (80012a4 <main+0x298>)
 8001080:	f006 fe58 	bl	8007d34 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!isSameMode){
 8001084:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <main+0x29c>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80dc 	bne.w	8001248 <main+0x23c>
			isSameMode = 1;
 8001090:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <main+0x29c>)
 8001092:	2201      	movs	r2, #1
 8001094:	801a      	strh	r2, [r3, #0]
			if(mode == 'a') //stop
 8001096:	4b85      	ldr	r3, [pc, #532]	; (80012ac <main+0x2a0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b61      	cmp	r3, #97	; 0x61
 800109c:	d11c      	bne.n	80010d8 <main+0xcc>
			{
				TIM3->CCR1 = ccr1;
 800109e:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <main+0x2a4>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b84      	ldr	r3, [pc, #528]	; (80012b4 <main+0x2a8>)
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR4 = ccr1;
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <main+0x2a4>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <main+0x2a8>)
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR1 = ccr1;
 80010ae:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <main+0x2a4>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR4 = ccr1;
 80010b8:	4b7d      	ldr	r3, [pc, #500]	; (80012b0 <main+0x2a4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR2 = ccr1;
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <main+0x2a4>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = ccr1;
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <main+0x2a4>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80010d6:	e0b1      	b.n	800123c <main+0x230>
			}

			else if(mode == 'b') //clockwise
 80010d8:	4b74      	ldr	r3, [pc, #464]	; (80012ac <main+0x2a0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b62      	cmp	r3, #98	; 0x62
 80010de:	d11c      	bne.n	800111a <main+0x10e>
			{
				TIM3->CCR1 = ccr1;
 80010e0:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <main+0x2a4>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <main+0x2a8>)
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR4 = ccr2;
 80010e8:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <main+0x2ac>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <main+0x2a8>)
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR1 = ccr1;
 80010f0:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <main+0x2a4>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR4 = ccr2;
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <main+0x2ac>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR2 = ccr1;
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <main+0x2a4>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = ccr2;
 800110e:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <main+0x2ac>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001116:	63da      	str	r2, [r3, #60]	; 0x3c
 8001118:	e090      	b.n	800123c <main+0x230>
			}
			else if(mode == 'c') //counter-clockwise
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <main+0x2a0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b63      	cmp	r3, #99	; 0x63
 8001120:	d11c      	bne.n	800115c <main+0x150>
			{
				TIM3->CCR1 = ccr2;
 8001122:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <main+0x2ac>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <main+0x2a8>)
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR4 = ccr1;
 800112a:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <main+0x2a4>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <main+0x2a8>)
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR1 = ccr2;
 8001132:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <main+0x2ac>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR4 = ccr1;
 800113c:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <main+0x2a4>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR2 = ccr2;
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <main+0x2ac>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = ccr1;
 8001150:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <main+0x2a4>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
 800115a:	e06f      	b.n	800123c <main+0x230>
			}
			else if(mode == 'd') //backward
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <main+0x2a0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d11c      	bne.n	800119e <main+0x192>
			{
				TIM3->CCR1 = ccr1;
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <main+0x2a4>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <main+0x2a8>)
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR4 = ccr1;
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <main+0x2a4>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <main+0x2a8>)
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR1 = ccr1;
 8001174:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <main+0x2a4>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR4 = ccr2;
 800117e:	4b4e      	ldr	r3, [pc, #312]	; (80012b8 <main+0x2ac>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR2 = ccr2;
 8001188:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <main+0x2ac>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001190:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = ccr1;
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <main+0x2a4>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
 800119c:	e04e      	b.n	800123c <main+0x230>
			}
			else if(mode == 'e') //forward
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <main+0x2a0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b65      	cmp	r3, #101	; 0x65
 80011a4:	d11c      	bne.n	80011e0 <main+0x1d4>
			{
				TIM3->CCR1 = ccr1;
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <main+0x2a4>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <main+0x2a8>)
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR4 = ccr1;
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <main+0x2a4>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <main+0x2a8>)
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR1 = ccr2;
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <main+0x2ac>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR4 = ccr1;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <main+0x2a4>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR2 = ccr1;
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <main+0x2a4>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = ccr2;
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <main+0x2ac>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011de:	e02d      	b.n	800123c <main+0x230>
			}
			else if(mode == 'x') //neck up
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <main+0x2a0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b78      	cmp	r3, #120	; 0x78
 80011e6:	d10f      	bne.n	8001208 <main+0x1fc>
			{
				for(int i = 0; i < 120; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e008      	b.n	8001200 <main+0x1f4>
					  TIM4->CCR3 = i;
 80011ee:	4a33      	ldr	r2, [pc, #204]	; (80012bc <main+0x2b0>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	63d3      	str	r3, [r2, #60]	; 0x3c
					  HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f000 ff15 	bl	8002024 <HAL_Delay>
				for(int i = 0; i < 120; i++){
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b77      	cmp	r3, #119	; 0x77
 8001204:	ddf3      	ble.n	80011ee <main+0x1e2>
 8001206:	e019      	b.n	800123c <main+0x230>
				}
			}
			else if(mode == 'y') //neck down
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <main+0x2a0>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b79      	cmp	r3, #121	; 0x79
 800120e:	d10f      	bne.n	8001230 <main+0x224>
			{
				for(int i = 120; i > 0; i--){
 8001210:	2378      	movs	r3, #120	; 0x78
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	e008      	b.n	8001228 <main+0x21c>
					  TIM4->CCR3 = i;
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <main+0x2b0>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	63d3      	str	r3, [r2, #60]	; 0x3c
					  HAL_Delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f000 ff01 	bl	8002024 <HAL_Delay>
				for(int i = 120; i > 0; i--){
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3b01      	subs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dcf3      	bgt.n	8001216 <main+0x20a>
 800122e:	e005      	b.n	800123c <main+0x230>
				}
			}
			else
			{
				mode = 'a';
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <main+0x2a0>)
 8001232:	2261      	movs	r2, #97	; 0x61
 8001234:	701a      	strb	r2, [r3, #0]
				isSameMode = 0;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <main+0x29c>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
			}

			printf("mode = %c\n", mode);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <main+0x2a0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <main+0x2b4>)
 8001244:	f006 fcf0 	bl	8007c28 <iprintf>
	  }

	  if(!isSameRpi)
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <main+0x2b8>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f47f af18 	bne.w	8001084 <main+0x78>
	  {
		  isSameRpi = 1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <main+0x2b8>)
 8001256:	2201      	movs	r2, #1
 8001258:	801a      	strh	r2, [r3, #0]
		  if(rpi == 'h')
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0x2bc>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b68      	cmp	r3, #104	; 0x68
 8001260:	d102      	bne.n	8001268 <main+0x25c>
		  {
			  printf("!!HELP!!\n");
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <main+0x2c0>)
 8001264:	f006 fd66 	bl	8007d34 <puts>
		  }

		  if(rpi == 'r')
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <main+0x2bc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b72      	cmp	r3, #114	; 0x72
 800126e:	d103      	bne.n	8001278 <main+0x26c>
		  {
			  printf("Turn Right\n");
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <main+0x2c4>)
 8001272:	f006 fd5f 	bl	8007d34 <puts>
 8001276:	e036      	b.n	80012e6 <main+0x2da>
		  }
		  else if(rpi == 'l')
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <main+0x2bc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b6c      	cmp	r3, #108	; 0x6c
 800127e:	d12b      	bne.n	80012d8 <main+0x2cc>
		  {
			  printf("Turn Left\n");
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <main+0x2c8>)
 8001282:	f006 fd57 	bl	8007d34 <puts>
 8001286:	e02e      	b.n	80012e6 <main+0x2da>
 8001288:	20000219 	.word	0x20000219
 800128c:	200003dc 	.word	0x200003dc
 8001290:	20000218 	.word	0x20000218
 8001294:	2000034c 	.word	0x2000034c
 8001298:	20000300 	.word	0x20000300
 800129c:	200002b4 	.word	0x200002b4
 80012a0:	20000268 	.word	0x20000268
 80012a4:	08009e30 	.word	0x08009e30
 80012a8:	20000208 	.word	0x20000208
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000204 	.word	0x20000204
 80012b4:	40000400 	.word	0x40000400
 80012b8:	20000008 	.word	0x20000008
 80012bc:	40000800 	.word	0x40000800
 80012c0:	08009e48 	.word	0x08009e48
 80012c4:	2000020a 	.word	0x2000020a
 80012c8:	20000001 	.word	0x20000001
 80012cc:	08009e54 	.word	0x08009e54
 80012d0:	08009e60 	.word	0x08009e60
 80012d4:	08009e6c 	.word	0x08009e6c
		  }
		  else if(rpi == 'f')
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <main+0x370>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b66      	cmp	r3, #102	; 0x66
 80012de:	d102      	bne.n	80012e6 <main+0x2da>
		  {
			  printf("Stay Front\n");
 80012e0:	4827      	ldr	r0, [pc, #156]	; (8001380 <main+0x374>)
 80012e2:	f006 fd27 	bl	8007d34 <puts>
		  }

		  if(rpi == 'u')
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <main+0x370>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b75      	cmp	r3, #117	; 0x75
 80012ec:	d11c      	bne.n	8001328 <main+0x31c>
		  {
			  if(TIM4->CCR3 > 115) // unsigned int 이므로 음수 -> 큰 양수가 됨
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <main+0x378>)
 80012f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f2:	2b73      	cmp	r3, #115	; 0x73
 80012f4:	d903      	bls.n	80012fe <main+0x2f2>
			  {
				  TIM4->CCR3 = 120;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <main+0x378>)
 80012f8:	2278      	movs	r2, #120	; 0x78
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80012fc:	e6c2      	b.n	8001084 <main+0x78>
			  }
			  else
			  {
				  printf("Neck Up");
 80012fe:	4822      	ldr	r0, [pc, #136]	; (8001388 <main+0x37c>)
 8001300:	f006 fc92 	bl	8007c28 <iprintf>
				  for(int i = 0; i < 5; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	e00a      	b.n	8001320 <main+0x314>
				  {
					  TIM4->CCR3 += 1;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <main+0x378>)
 800130c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <main+0x378>)
 8001310:	3301      	adds	r3, #1
 8001312:	63d3      	str	r3, [r2, #60]	; 0x3c
					  HAL_Delay(40);
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f000 fe85 	bl	8002024 <HAL_Delay>
				  for(int i = 0; i < 5; i++)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b04      	cmp	r3, #4
 8001324:	ddf1      	ble.n	800130a <main+0x2fe>
 8001326:	e6ad      	b.n	8001084 <main+0x78>
				  }
			  }

		  }
		  else if(rpi == 'd')
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <main+0x370>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d11c      	bne.n	800136a <main+0x35e>
		  {
			  if(TIM4->CCR3 < 5)
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <main+0x378>)
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2b04      	cmp	r3, #4
 8001336:	d803      	bhi.n	8001340 <main+0x334>
			  {
				  TIM4->CCR3 = 0;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <main+0x378>)
 800133a:	2200      	movs	r2, #0
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c
 800133e:	e6a1      	b.n	8001084 <main+0x78>
			  }
			  else
			  {
				  printf("Neck Down");
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <main+0x380>)
 8001342:	f006 fc71 	bl	8007c28 <iprintf>
				  for(int i = 0; i < 5; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	e00a      	b.n	8001362 <main+0x356>
				  {
					  TIM4->CCR3 -= 1;
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <main+0x378>)
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <main+0x378>)
 8001352:	3b01      	subs	r3, #1
 8001354:	63d3      	str	r3, [r2, #60]	; 0x3c
					  HAL_Delay(40);
 8001356:	2028      	movs	r0, #40	; 0x28
 8001358:	f000 fe64 	bl	8002024 <HAL_Delay>
				  for(int i = 0; i < 5; i++)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	ddf1      	ble.n	800134c <main+0x340>
 8001368:	e68c      	b.n	8001084 <main+0x78>
				  }
			  }
		  }
		  else if(rpi == 's'){
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <main+0x370>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b73      	cmp	r3, #115	; 0x73
 8001370:	f47f ae88 	bne.w	8001084 <main+0x78>
			  printf("Neck Stop");
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <main+0x384>)
 8001376:	f006 fc57 	bl	8007c28 <iprintf>
	  if(!isSameMode){
 800137a:	e683      	b.n	8001084 <main+0x78>
 800137c:	20000001 	.word	0x20000001
 8001380:	08009e78 	.word	0x08009e78
 8001384:	40000800 	.word	0x40000800
 8001388:	08009e84 	.word	0x08009e84
 800138c:	08009e8c 	.word	0x08009e8c
 8001390:	08009e98 	.word	0x08009e98

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2244      	movs	r2, #68	; 0x44
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 ffce 	bl	8007344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013b6:	2000      	movs	r0, #0
 80013b8:	f001 f9c0 	bl	800273c <HAL_PWREx_ControlVoltageScaling>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80013c2:	f000 f89f 	bl	8001504 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013c6:	2310      	movs	r3, #16
 80013c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013da:	2301      	movs	r3, #1
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013e2:	233c      	movs	r3, #60	; 0x3c
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fa44 	bl	8002884 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001402:	f000 f87f 	bl	8001504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2303      	movs	r3, #3
 800140c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	2105      	movs	r1, #5
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fe56 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800142a:	f000 f86b 	bl	8001504 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3758      	adds	r7, #88	; 0x58
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_UART_RxCpltCallback+0x78>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10f      	bne.n	800146a <HAL_UART_RxCpltCallback+0x32>
		isSameMode = 0;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_UART_RxCpltCallback+0x7c>)
 800144c:	2200      	movs	r2, #0
 800144e:	801a      	strh	r2, [r3, #0]
		mode = rx_debug;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_UART_RxCpltCallback+0x80>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_UART_RxCpltCallback+0x84>)
 8001456:	701a      	strb	r2, [r3, #0]
		printf("====mode changed====\n");
 8001458:	4819      	ldr	r0, [pc, #100]	; (80014c0 <HAL_UART_RxCpltCallback+0x88>)
 800145a:	f006 fc6b 	bl	8007d34 <puts>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &rx_debug, 1);
 800145e:	2201      	movs	r2, #1
 8001460:	4915      	ldr	r1, [pc, #84]	; (80014b8 <HAL_UART_RxCpltCallback+0x80>)
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <HAL_UART_RxCpltCallback+0x8c>)
 8001464:	f003 ffe0 	bl	8005428 <HAL_UART_Receive_IT>
			isSameRpi = 0;
		}
		rpi = rx_camera;
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_camera, 1);
	}
}
 8001468:	e01e      	b.n	80014a8 <HAL_UART_RxCpltCallback+0x70>
	else if(huart -> Instance == USART3){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_UART_RxCpltCallback+0x90>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d119      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x70>
		rpiBuf[0] = rpiBuf[1];
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_RxCpltCallback+0x94>)
 8001476:	785a      	ldrb	r2, [r3, #1]
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_RxCpltCallback+0x94>)
 800147a:	701a      	strb	r2, [r3, #0]
		rpiBuf[1] = rx_camera;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_UART_RxCpltCallback+0x98>)
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_UART_RxCpltCallback+0x94>)
 8001482:	705a      	strb	r2, [r3, #1]
		if(rpiBuf[0] != rpiBuf[1])
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_RxCpltCallback+0x94>)
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_UART_RxCpltCallback+0x94>)
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	429a      	cmp	r2, r3
 800148e:	d002      	beq.n	8001496 <HAL_UART_RxCpltCallback+0x5e>
			isSameRpi = 0;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_UART_RxCpltCallback+0x9c>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
		rpi = rx_camera;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_UART_RxCpltCallback+0x98>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_UART_RxCpltCallback+0xa0>)
 800149c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_camera, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	490b      	ldr	r1, [pc, #44]	; (80014d0 <HAL_UART_RxCpltCallback+0x98>)
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <HAL_UART_RxCpltCallback+0xa4>)
 80014a4:	f003 ffc0 	bl	8005428 <HAL_UART_Receive_IT>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013800 	.word	0x40013800
 80014b4:	20000208 	.word	0x20000208
 80014b8:	20000219 	.word	0x20000219
 80014bc:	20000000 	.word	0x20000000
 80014c0:	08009ea4 	.word	0x08009ea4
 80014c4:	200003dc 	.word	0x200003dc
 80014c8:	40004800 	.word	0x40004800
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000218 	.word	0x20000218
 80014d4:	2000020a 	.word	0x2000020a
 80014d8:	20000001 	.word	0x20000001
 80014dc:	2000034c 	.word	0x2000034c

080014e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014f2:	f000 fd77 	bl	8001fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012c00 	.word	0x40012c00

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6613      	str	r3, [r2, #96]	; 0x60
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	2019      	movs	r0, #25
 800156e:	f000 fe35 	bl	80021dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001572:	2019      	movs	r0, #25
 8001574:	f000 fe4e 	bl	8002214 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_InitTick+0x9c>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_InitTick+0x9c>)
 800157e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001582:	6613      	str	r3, [r2, #96]	; 0x60
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_InitTick+0x9c>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ff88 	bl	80034b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015a0:	f001 ff70 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 80015a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_InitTick+0xa0>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9b      	lsrs	r3, r3, #18
 80015b0:	3b01      	subs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_InitTick+0xa4>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_InitTick+0xa8>)
 80015b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_InitTick+0xa4>)
 80015bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_InitTick+0xa4>)
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_InitTick+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_InitTick+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <HAL_InitTick+0xa4>)
 80015d6:	f002 fd77 	bl	80040c8 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <HAL_InitTick+0xa4>)
 80015e2:	f002 fdd3 	bl	800418c <HAL_TIM_Base_Start_IT>
 80015e6:	4603      	mov	r3, r0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	2000021c 	.word	0x2000021c
 8001600:	40012c00 	.word	0x40012c00

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001662:	f002 ff61 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000021c 	.word	0x2000021c

08001670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART1_IRQHandler+0x10>)
 8001676:	f003 ff2d 	bl	80054d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200003dc 	.word	0x200003dc

08001684 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <USART3_IRQHandler+0x10>)
 800168a:	f003 ff23 	bl	80054d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000034c 	.word	0x2000034c

08001698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_kill>:

int _kill(int pid, int sig)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b2:	f005 fe1d 	bl	80072f0 <__errno>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2216      	movs	r2, #22
 80016ba:	601a      	str	r2, [r3, #0]
	return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_exit>:

void _exit (int status)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe7 	bl	80016a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016da:	e7fe      	b.n	80016da <_exit+0x12>

080016dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
	}

return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc55 	bl	8000fe0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
	}
	return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001776:	605a      	str	r2, [r3, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f005 fd82 	bl	80072f0 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200a0000 	.word	0x200a0000
 8001818:	00000400 	.word	0x00000400
 800181c:	2000020c 	.word	0x2000020c
 8001820:	20000480 	.word	0x20000480

08001824 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800186c:	4b33      	ldr	r3, [pc, #204]	; (800193c <MX_TIM2_Init+0xf4>)
 800186e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <MX_TIM2_Init+0xf4>)
 8001876:	2277      	movs	r2, #119	; 0x77
 8001878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_TIM2_Init+0xf4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <MX_TIM2_Init+0xf4>)
 8001882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <MX_TIM2_Init+0xf4>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_TIM2_Init+0xf4>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001894:	4829      	ldr	r0, [pc, #164]	; (800193c <MX_TIM2_Init+0xf4>)
 8001896:	f002 fce9 	bl	800426c <HAL_TIM_PWM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f7ff fe30 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4822      	ldr	r0, [pc, #136]	; (800193c <MX_TIM2_Init+0xf4>)
 80018b4:	f003 fc2a 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018be:	f7ff fe21 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	; 0x60
 80018c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 799;
 80018c6:	f240 331f 	movw	r3, #799	; 0x31f
 80018ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <MX_TIM2_Init+0xf4>)
 80018dc:	f002 ff44 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018e6:	f7ff fe0d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <MX_TIM2_Init+0xf4>)
 80018f2:	f002 ff39 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80018fc:	f7ff fe02 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	2208      	movs	r2, #8
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM2_Init+0xf4>)
 8001908:	f002 ff2e 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8001912:	f7ff fdf7 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	220c      	movs	r2, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM2_Init+0xf4>)
 800191e:	f002 ff23 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001928:	f7ff fdec 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM2_Init+0xf4>)
 800192e:	f000 f931 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000300 	.word	0x20000300

08001940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <MX_TIM3_Init+0xc4>)
 8001966:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <MX_TIM3_Init+0xc8>)
 8001968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_TIM3_Init+0xc4>)
 800196c:	2277      	movs	r2, #119	; 0x77
 800196e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <MX_TIM3_Init+0xc4>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_TIM3_Init+0xc4>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_TIM3_Init+0xc4>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM3_Init+0xc4>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800198a:	481e      	ldr	r0, [pc, #120]	; (8001a04 <MX_TIM3_Init+0xc4>)
 800198c:	f002 fc6e 	bl	800426c <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001996:	f7ff fdb5 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_TIM3_Init+0xc4>)
 80019aa:	f003 fbaf 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019b4:	f7ff fda6 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b8:	2360      	movs	r3, #96	; 0x60
 80019ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 799;
 80019bc:	f240 331f 	movw	r3, #799	; 0x31f
 80019c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <MX_TIM3_Init+0xc4>)
 80019d2:	f002 fec9 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80019dc:	f7ff fd92 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	220c      	movs	r2, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM3_Init+0xc4>)
 80019e8:	f002 febe 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80019f2:	f7ff fd87 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM3_Init+0xc4>)
 80019f8:	f000 f8cc 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200002b4 	.word	0x200002b4
 8001a08:	40000400 	.word	0x40000400

08001a0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]
 8001a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_TIM4_Init+0xb4>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200-1;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a38:	f240 42af 	movw	r2, #1199	; 0x4af
 8001a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a46:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a58:	4818      	ldr	r0, [pc, #96]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a5a:	f002 fc07 	bl	800426c <HAL_TIM_PWM_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001a64:	f7ff fd4e 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a78:	f003 fb48 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001a82:	f7ff fd3f 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a86:	2360      	movs	r3, #96	; 0x60
 8001a88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	2208      	movs	r2, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001a9e:	f002 fe63 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001aa8:	f7ff fd2c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <MX_TIM4_Init+0xb0>)
 8001aae:	f000 f871 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000268 	.word	0x20000268
 8001ac0:	40000800 	.word	0x40000800

08001ac4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6593      	str	r3, [r2, #88]	; 0x58
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001afe:	e03f      	b.n	8001b80 <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_TIM_PWM_MspInit+0xc8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d129      	bne.n	8001b5e <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f000 fc26 	bl	80023a8 <HAL_GPIO_Init>
}
 8001b5c:	e010      	b.n	8001b80 <HAL_TIM_PWM_MspInit+0xbc>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d10b      	bne.n	8001b80 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6593      	str	r3, [r2, #88]	; 0x58
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800

08001b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a40      	ldr	r2, [pc, #256]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bce:	230f      	movs	r3, #15
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bde:	2301      	movs	r3, #1
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bec:	f000 fbdc 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bf0:	e060      	b.n	8001cb4 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <HAL_TIM_MspPostInit+0x12c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d139      	bne.n	8001c70 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c2c:	2340      	movs	r3, #64	; 0x40
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f000 fbad 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <HAL_TIM_MspPostInit+0x130>)
 8001c6a:	f000 fb9d 	bl	80023a8 <HAL_GPIO_Init>
}
 8001c6e:	e021      	b.n	8001cb4 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_TIM_MspPostInit+0x134>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11c      	bne.n	8001cb4 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_TIM_MspPostInit+0x128>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_TIM_MspPostInit+0x130>)
 8001cb0:	f000 fb7a 	bl	80023a8 <HAL_GPIO_Init>
}
 8001cb4:	bf00      	nop
 8001cb6:	3730      	adds	r7, #48	; 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	40000800 	.word	0x40000800

08001ccc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d14:	4811      	ldr	r0, [pc, #68]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d16:	f003 fa9f 	bl	8005258 <HAL_UART_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d20:	f7ff fbf0 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d24:	2100      	movs	r1, #0
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d28:	f005 fa17 	bl	800715a <HAL_UARTEx_SetTxFifoThreshold>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d32:	f7ff fbe7 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d3a:	f005 fa4c 	bl	80071d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d44:	f7ff fbde 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d4a:	f005 f9cd 	bl	80070e8 <HAL_UARTEx_DisableFifoMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d54:	f7ff fbd6 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200003dc 	.word	0x200003dc
 8001d60:	40013800 	.word	0x40013800

08001d64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <MX_USART3_UART_Init+0x94>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dae:	f003 fa53 	bl	8005258 <HAL_UART_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001db8:	f7ff fba4 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dc0:	f005 f9cb 	bl	800715a <HAL_UARTEx_SetTxFifoThreshold>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001dca:	f7ff fb9b 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dd2:	f005 fa00 	bl	80071d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f7ff fb92 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001de2:	f005 f981 	bl	80070e8 <HAL_UARTEx_DisableFifoMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dec:	f7ff fb8a 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000034c 	.word	0x2000034c
 8001df8:	40004800 	.word	0x40004800

08001dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0b0      	sub	sp, #192	; 0xc0
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	2294      	movs	r2, #148	; 0x94
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fa91 	bl	8007344 <memset>
  if(uartHandle->Instance==USART1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_UART_MspInit+0x150>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d143      	bne.n	8001eb4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e30:	2300      	movs	r3, #0
 8001e32:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fc2d 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e44:	f7ff fb5e 	bl	8001504 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e52:	6613      	str	r3, [r2, #96]	; 0x60
 8001e54:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e90:	2307      	movs	r3, #7
 8001e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	482d      	ldr	r0, [pc, #180]	; (8001f54 <HAL_UART_MspInit+0x158>)
 8001e9e:	f000 fa83 	bl	80023a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2107      	movs	r1, #7
 8001ea6:	2025      	movs	r0, #37	; 0x25
 8001ea8:	f000 f998 	bl	80021dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eac:	2025      	movs	r0, #37	; 0x25
 8001eae:	f000 f9b1 	bl	8002214 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eb2:	e047      	b.n	8001f44 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_UART_MspInit+0x15c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d142      	bne.n	8001f44 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fbe4 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001ed6:	f7ff fb15 	bl	8001504 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_UART_MspInit+0x154>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f0a:	2330      	movs	r3, #48	; 0x30
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f22:	2307      	movs	r3, #7
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480b      	ldr	r0, [pc, #44]	; (8001f5c <HAL_UART_MspInit+0x160>)
 8001f30:	f000 fa3a 	bl	80023a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2107      	movs	r1, #7
 8001f38:	2027      	movs	r0, #39	; 0x27
 8001f3a:	f000 f94f 	bl	80021dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f3e:	2027      	movs	r0, #39	; 0x27
 8001f40:	f000 f968 	bl	8002214 <HAL_NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	37c0      	adds	r7, #192	; 0xc0
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	40004800 	.word	0x40004800
 8001f5c:	48000800 	.word	0x48000800

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff fc5e 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f005 f9b5 	bl	80072fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff f83b 	bl	800100c <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001fa4:	0800a31c 	.word	0x0800a31c
  ldr r2, =_sbss
 8001fa8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001fac:	20000480 	.word	0x20000480

08001fb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_IRQHandler>

08001fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f902 	bl	80021c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f7ff fac8 	bl	8001558 <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd4:	f7ff fa9c 	bl	8001510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000014 	.word	0x20000014
 8002008:	2000046c 	.word	0x2000046c

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2000046c 	.word	0x2000046c

08002024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000014 	.word	0x20000014

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff4c 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ee:	f7ff ff61 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 80021f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7ff ffb1 	bl	8002160 <NVIC_EncodePriority>
 80021fe:	4602      	mov	r2, r0
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff80 	bl	800210c <__NVIC_SetPriority>
}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff54 	bl	80020d0 <__NVIC_EnableIRQ>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2204      	movs	r2, #4
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e040      	b.n	80022dc <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 020e 	bic.w	r2, r2, #14
 8002268:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 021c 	and.w	r2, r3, #28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022a6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d005      	beq.n	800230c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e047      	b.n	800239c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 020e 	bic.w	r2, r2, #14
 800231a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800233a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f003 021c 	and.w	r2, r3, #28
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002358:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800237a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    }
  }
  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e166      	b.n	8002686 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8158 	beq.w	8002680 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d005      	beq.n	80023e8 <HAL_GPIO_Init+0x40>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d130      	bne.n	800244a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241e:	2201      	movs	r2, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0201 	and.w	r2, r3, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d017      	beq.n	8002486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d123      	bne.n	80024da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	6939      	ldr	r1, [r7, #16]
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0203 	and.w	r2, r3, #3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80b2 	beq.w	8002680 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6613      	str	r3, [r2, #96]	; 0x60
 8002528:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002534:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_GPIO_Init+0x300>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800255e:	d02b      	beq.n	80025b8 <HAL_GPIO_Init+0x210>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x304>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d025      	beq.n	80025b4 <HAL_GPIO_Init+0x20c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x308>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_Init+0x208>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_GPIO_Init+0x30c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_Init+0x204>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x310>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x200>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <HAL_GPIO_Init+0x314>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1fc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x318>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1f8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a4c      	ldr	r2, [pc, #304]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1f4>
 8002598:	2307      	movs	r3, #7
 800259a:	e00e      	b.n	80025ba <HAL_GPIO_Init+0x212>
 800259c:	2308      	movs	r3, #8
 800259e:	e00c      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025a0:	2306      	movs	r3, #6
 80025a2:	e00a      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025a4:	2305      	movs	r3, #5
 80025a6:	e008      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e004      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e002      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_GPIO_Init+0x212>
 80025b8:	2300      	movs	r3, #0
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	f002 0203 	and.w	r2, r2, #3
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	4093      	lsls	r3, r2
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ca:	4937      	ldr	r1, [pc, #220]	; (80026a8 <HAL_GPIO_Init+0x300>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_GPIO_Init+0x320>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025fc:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_GPIO_Init+0x320>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002626:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x320>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <HAL_GPIO_Init+0x320>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f ae91 	bne.w	80023b8 <HAL_GPIO_Init+0x10>
  }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010000 	.word	0x40010000
 80026ac:	48000400 	.word	0x48000400
 80026b0:	48000800 	.word	0x48000800
 80026b4:	48000c00 	.word	0x48000c00
 80026b8:	48001000 	.word	0x48001000
 80026bc:	48001400 	.word	0x48001400
 80026c0:	48001800 	.word	0x48001800
 80026c4:	48001c00 	.word	0x48001c00
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d102      	bne.n	8002714 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002712:	e00b      	b.n	800272c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002722:	d102      	bne.n	800272a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002728:	e000      	b.n	800272c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800272a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000

0800273c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d141      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	d131      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002758:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275e:	4a46      	ldr	r2, [pc, #280]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002770:	4a41      	ldr	r2, [pc, #260]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2232      	movs	r2, #50	; 0x32
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4a3f      	ldr	r2, [pc, #252]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	e002      	b.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b01      	subs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d102      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f2      	bne.n	8002790 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d158      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e057      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027cc:	e04d      	b.n	800286a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d4:	d141      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e2:	d131      	bne.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ea:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027fc:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2232      	movs	r2, #50	; 0x32
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281a:	e002      	b.n	8002822 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3b01      	subs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282e:	d102      	bne.n	8002836 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f2      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d112      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e011      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002858:	e007      	b.n	800286a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002868:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40007000 	.word	0x40007000
 800287c:	2000000c 	.word	0x2000000c
 8002880:	431bde83 	.word	0x431bde83

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f000 bc16 	b.w	80030c4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002898:	4ba0      	ldr	r3, [pc, #640]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a2:	4b9e      	ldr	r3, [pc, #632]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80e4 	beq.w	8002a82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4c>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	f040 808b 	bne.w	80029de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	f040 8087 	bne.w	80029de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x64>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e3ed      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_RCC_OscConfig+0x7e>
 80028f8:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002900:	e005      	b.n	800290e <HAL_RCC_OscConfig+0x8a>
 8002902:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290e:	4293      	cmp	r3, r2
 8002910:	d223      	bcs.n	800295a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fdfc 	bl	8003514 <RCC_SetFlashLatencyFromMSIRange>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e3ce      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002926:	4b7d      	ldr	r3, [pc, #500]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7c      	ldr	r2, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4977      	ldr	r1, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002944:	4b75      	ldr	r3, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	4972      	ldr	r1, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e025      	b.n	80029a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295a:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	496a      	ldr	r1, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	4965      	ldr	r1, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fdbc 	bl	8003514 <RCC_SetFlashLatencyFromMSIRange>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e38e      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a6:	f000 fcbf 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	495a      	ldr	r1, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x29c>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x2a0>)
 80029c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x2a4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fdc4 	bl	8001558 <HAL_InitTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d052      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	e372      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d032      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f2:	f7ff fb0b 	bl	800200c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fa:	f7ff fb07 	bl	800200c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e35b      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	493a      	ldr	r1, [pc, #232]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	4935      	ldr	r1, [pc, #212]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e01a      	b.n	8002a82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fad8 	bl	800200c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a60:	f7ff fad4 	bl	800200c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e328      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1dc>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d073      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x21c>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d10e      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d063      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d15f      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e305      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0x288>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x270>
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x288>
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_RCC_OscConfig+0x298>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7ff fa7a 	bl	800200c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	e010      	b.n	8002b3e <HAL_RCC_OscConfig+0x2ba>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08009ebc 	.word	0x08009ebc
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fa6e 	bl	800200c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e2c2      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3e:	4baf      	ldr	r3, [pc, #700]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2a8>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fa5e 	bl	800200c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fa5a 	bl	800200c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e2ae      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b66:	4ba5      	ldr	r3, [pc, #660]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2d0>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d060      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_OscConfig+0x310>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d119      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d116      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b94:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_OscConfig+0x328>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e28b      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	4990      	ldr	r1, [pc, #576]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc0:	e040      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d023      	beq.n	8002c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bca:	4b8c      	ldr	r3, [pc, #560]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a8b      	ldr	r2, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7ff fa19 	bl	800200c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7ff fa15 	bl	800200c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e269      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf0:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b7f      	ldr	r3, [pc, #508]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	497c      	ldr	r1, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
 8002c10:	e018      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b7a      	ldr	r3, [pc, #488]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a79      	ldr	r2, [pc, #484]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7ff f9f5 	bl	800200c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff f9f1 	bl	800200c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e245      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c38:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03c      	beq.n	8002cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5e:	4a67      	ldr	r2, [pc, #412]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7ff f9d0 	bl	800200c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff f9cc 	bl	800200c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e220      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3ec>
 8002c90:	e01b      	b.n	8002cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	4b5a      	ldr	r3, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f9b3 	bl	800200c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7ff f9af 	bl	800200c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e203      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ef      	bne.n	8002caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a6 	beq.w	8002e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a43      	ldr	r2, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d04:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_RCC_OscConfig+0x57c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x57c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x57c>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f976 	bl	800200c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7ff f972 	bl	800200c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1c6      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_RCC_OscConfig+0x57c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4d8>
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5a:	e024      	b.n	8002da6 <HAL_RCC_OscConfig+0x522>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d110      	bne.n	8002d86 <HAL_RCC_OscConfig+0x502>
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d74:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d84:	e00f      	b.n	8002da6 <HAL_RCC_OscConfig+0x522>
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7ff f92d 	bl	800200c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff f929 	bl	800200c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e17b      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x578>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ed      	beq.n	8002db6 <HAL_RCC_OscConfig+0x532>
 8002dda:	e01a      	b.n	8002e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7ff f916 	bl	800200c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de2:	e00f      	b.n	8002e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7ff f912 	bl	800200c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d906      	bls.n	8002e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e164      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e04:	4ba8      	ldr	r3, [pc, #672]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e8      	bne.n	8002de4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4ba3      	ldr	r3, [pc, #652]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	4aa2      	ldr	r2, [pc, #648]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e38:	4b9b      	ldr	r3, [pc, #620]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e3e:	4a9a      	ldr	r2, [pc, #616]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7ff f8e0 	bl	800200c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e50:	f7ff f8dc 	bl	800200c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e130      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e62:	4b91      	ldr	r3, [pc, #580]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5cc>
 8002e70:	e01b      	b.n	8002eaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e72:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e78:	4a8b      	ldr	r2, [pc, #556]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7ff f8c3 	bl	800200c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8a:	f7ff f8bf 	bl	800200c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e113      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e9c:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ef      	bne.n	8002e8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8107 	beq.w	80030c2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 80cb 	bne.w	8003054 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ebe:	4b7a      	ldr	r3, [pc, #488]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d12c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	3b01      	subs	r3, #1
 8002ede:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d123      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d11b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d113      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d109      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d06d      	beq.n	8003008 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d068      	beq.n	8003004 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0ba      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b56      	ldr	r3, [pc, #344]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f5a:	f7ff f857 	bl	800200c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7ff f853 	bl	800200c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0a7      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <HAL_RCC_OscConfig+0x828>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f9a:	0212      	lsls	r2, r2, #8
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0552      	lsls	r2, r2, #21
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fba:	06d2      	lsls	r2, r2, #27
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	493a      	ldr	r1, [pc, #232]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd0:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fdc:	f7ff f816 	bl	800200c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7ff f812 	bl	800200c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e066      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003002:	e05e      	b.n	80030c2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e05d      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d156      	bne.n	80030c2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800302c:	f7fe ffee 	bl	800200c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe ffea 	bl	800200c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e03e      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x7b0>
 8003052:	e036      	b.n	80030c2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d031      	beq.n	80030be <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003064:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003078:	f023 0303 	bic.w	r3, r3, #3
 800307c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003084:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe ffbd 	bl	800200c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	e00c      	b.n	80030b0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe ffb9 	bl	800200c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d905      	bls.n	80030b0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e00d      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
 80030a8:	40021000 	.word	0x40021000
 80030ac:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCC_OscConfig+0x848>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ec      	bne.n	8003096 <HAL_RCC_OscConfig+0x812>
 80030bc:	e001      	b.n	80030c2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e10f      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b89      	ldr	r3, [pc, #548]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b86      	ldr	r3, [pc, #536]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4984      	ldr	r1, [pc, #528]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0f7      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8089 	beq.w	8003238 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d133      	bne.n	8003196 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	4b79      	ldr	r3, [pc, #484]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0e4      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800313e:	f000 fa43 	bl	80035c8 <RCC_GetSysClockFreqFromPLLSource>
 8003142:	4603      	mov	r3, r0
 8003144:	4a74      	ldr	r2, [pc, #464]	; (8003318 <HAL_RCC_ClockConfig+0x248>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d955      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003156:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315e:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e044      	b.n	80031f6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03e      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x126>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13a      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003188:	4a62      	ldr	r2, [pc, #392]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 800318a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e02f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d115      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0ac      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0a0      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c6:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e098      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80031d6:	f000 f8a7 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <HAL_RCC_ClockConfig+0x248>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d909      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4944      	ldr	r1, [pc, #272]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe ff00 	bl	800200c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fefc 	bl	800200c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e070      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4930      	ldr	r1, [pc, #192]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
 8003256:	e008      	b.n	800326a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d105      	bne.n	800326a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 8003264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003268:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d210      	bcs.n	800329a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 020f 	bic.w	r2, r3, #15
 8003280:	4923      	ldr	r1, [pc, #140]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_ClockConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e036      	b.n	8003308 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	4918      	ldr	r1, [pc, #96]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4910      	ldr	r1, [pc, #64]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032d8:	f000 f826 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <HAL_RCC_ClockConfig+0x24c>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x250>)
 80032f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x254>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe f92b 	bl	8001558 <HAL_InitTick>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]

  return status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	04c4b400 	.word	0x04c4b400
 800331c:	08009ebc 	.word	0x08009ebc
 8003320:	2000000c 	.word	0x2000000c
 8003324:	20000010 	.word	0x20000010

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x34>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d121      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d11e      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003368:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e005      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003384:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e004      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d134      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0xa6>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0xac>
 80033cc:	e005      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCC_GetSysClockFreq+0x110>)
 80033d0:	617b      	str	r3, [r7, #20]
      break;
 80033d2:	e005      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_GetSysClockFreq+0x114>)
 80033d6:	617b      	str	r3, [r7, #20]
      break;
 80033d8:	e002      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	617b      	str	r3, [r7, #20]
      break;
 80033de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3301      	adds	r3, #1
 80033ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	fb02 f203 	mul.w	r2, r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	0e5b      	lsrs	r3, r3, #25
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	3301      	adds	r3, #1
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003420:	69bb      	ldr	r3, [r7, #24]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	08009ed4 	.word	0x08009ed4
 8003438:	00f42400 	.word	0x00f42400
 800343c:	007a1200 	.word	0x007a1200

08003440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800345c:	f7ff fff0 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08009ecc 	.word	0x08009ecc

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003488:	f7ff ffda 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0adb      	lsrs	r3, r3, #11
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08009ecc 	.word	0x08009ecc

080034b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	220f      	movs	r2, #15
 80034be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_GetClockConfig+0x5c>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_RCC_GetClockConfig+0x5c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCC_GetClockConfig+0x5c>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_GetClockConfig+0x5c>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	08db      	lsrs	r3, r3, #3
 80034ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_RCC_GetClockConfig+0x60>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 020f 	and.w	r2, r3, #15
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	40022000 	.word	0x40022000

08003514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800352c:	f7ff f8e6 	bl	80026fc <HAL_PWREx_GetVoltageRange>
 8003530:	6178      	str	r0, [r7, #20]
 8003532:	e014      	b.n	800355e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800354c:	f7ff f8d6 	bl	80026fc <HAL_PWREx_GetVoltageRange>
 8003550:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003564:	d10b      	bne.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d913      	bls.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2ba0      	cmp	r3, #160	; 0xa0
 8003570:	d902      	bls.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e00d      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e00a      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b7f      	cmp	r3, #127	; 0x7f
 8003582:	d902      	bls.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003584:	2302      	movs	r3, #2
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e004      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d101      	bne.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 020f 	bic.w	r2, r3, #15
 800359c:	4909      	ldr	r1, [pc, #36]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40022000 	.word	0x40022000

080035c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d118      	bne.n	8003610 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ea:	4b27      	ldr	r3, [pc, #156]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e005      	b.n	8003606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d003      	beq.n	8003628 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d003      	beq.n	800362e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003626:	e005      	b.n	8003634 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800362a:	613b      	str	r3, [r7, #16]
    break;
 800362c:	e005      	b.n	800363a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003630:	613b      	str	r3, [r7, #16]
    break;
 8003632:	e002      	b.n	800363a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
    break;
 8003638:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	fb02 f203 	mul.w	r2, r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0e5b      	lsrs	r3, r3, #25
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800367a:	683b      	ldr	r3, [r7, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000
 800368c:	08009ed4 	.word	0x08009ed4
 8003690:	00f42400 	.word	0x00f42400
 8003694:	007a1200 	.word	0x007a1200

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d040      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d02a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d825      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036c0:	2b60      	cmp	r3, #96	; 0x60
 80036c2:	d026      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036c4:	2b60      	cmp	r3, #96	; 0x60
 80036c6:	d821      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d006      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x42>
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d81d      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d010      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80036d8:	e018      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036da:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a88      	ldr	r2, [pc, #544]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e6:	e015      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fb02 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3320      	adds	r3, #32
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fbed 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	74fb      	strb	r3, [r7, #19]
      break;
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800371c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003720:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003728:	4975      	ldr	r1, [pc, #468]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003730:	e001      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d047      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d030      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d82a      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003756:	d02a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375c:	d824      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800375e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d81e      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d010      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003774:	e018      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003776:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4a61      	ldr	r2, [pc, #388]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003782:	e015      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fab4 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003794:	e00c      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3320      	adds	r3, #32
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb9f 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a6:	e003      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	74fb      	strb	r3, [r7, #19]
      break;
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80037ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b6:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	494e      	ldr	r1, [pc, #312]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037cc:	e001      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 809f 	beq.w	800391e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e4:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a40      	ldr	r2, [pc, #256]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003822:	f7fe fbf3 	bl	800200c <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003828:	e009      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe fbef 	bl	800200c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	74fb      	strb	r3, [r7, #19]
        break;
 800383c:	e005      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ef      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d15b      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01f      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	429a      	cmp	r2, r3
 800386c:	d019      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe fbae 	bl	800200c <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	e00b      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fe fbaa 	bl	800200c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d902      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	74fb      	strb	r3, [r7, #19]
            break;
 80038ca:	e006      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ec      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
 80038fe:	e005      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390c:	7c7b      	ldrb	r3, [r7, #17]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4ba0      	ldr	r3, [pc, #640]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	4a9f      	ldr	r2, [pc, #636]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800392a:	4b9a      	ldr	r3, [pc, #616]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	4996      	ldr	r1, [pc, #600]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394c:	4b91      	ldr	r3, [pc, #580]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 020c 	bic.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	498e      	ldr	r1, [pc, #568]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396e:	4b89      	ldr	r3, [pc, #548]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	4985      	ldr	r1, [pc, #532]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003990:	4b80      	ldr	r3, [pc, #512]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	497d      	ldr	r1, [pc, #500]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b2:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	4974      	ldr	r1, [pc, #464]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	496c      	ldr	r1, [pc, #432]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a04:	4963      	ldr	r1, [pc, #396]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a18:	4b5e      	ldr	r3, [pc, #376]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a26:	495b      	ldr	r1, [pc, #364]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3a:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	4952      	ldr	r1, [pc, #328]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5c:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	494a      	ldr	r1, [pc, #296]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7e:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	4941      	ldr	r1, [pc, #260]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	4939      	ldr	r1, [pc, #228]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac2:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	4930      	ldr	r1, [pc, #192]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aec:	60d3      	str	r3, [r2, #12]
 8003aee:	e011      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2101      	movs	r1, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f8f9 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d04d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b28:	d108      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b3a:	e012      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	490e      	ldr	r1, [pc, #56]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	e020      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b82:	d109      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	60d3      	str	r3, [r2, #12]
 8003b90:	e014      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f8a5 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd6:	4947      	ldr	r1, [pc, #284]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a41      	ldr	r2, [pc, #260]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f876 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01e      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c26:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c36:	492f      	ldr	r1, [pc, #188]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f851 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c76:	f023 0204 	bic.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c80:	491c      	ldr	r1, [pc, #112]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9a:	f023 0218 	bic.w	r2, r3, #24
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	4913      	ldr	r1, [pc, #76]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d017      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0203 	and.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d103      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
       ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d142      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e03f      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d018      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0x72>
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d825      	bhi.n	8003d88 <RCCEx_PLLSAI1_Config+0x90>
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d002      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0x4e>
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d009      	beq.n	8003d58 <RCCEx_PLLSAI1_Config+0x60>
 8003d44:	e020      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11d      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d56:	e01a      	b.n	8003d8e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d58:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e013      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d76:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d86:	e006      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e004      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4949      	ldr	r1, [pc, #292]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 8086 	bne.w	8003ec4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc4:	f7fe f922 	bl	800200c <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dca:	e009      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dcc:	f7fe f91e 	bl	800200c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d902      	bls.n	8003de0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dde:	e005      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ef      	bne.n	8003dcc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d168      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d113      	bne.n	8003e20 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6892      	ldr	r2, [r2, #8]
 8003e04:	0211      	lsls	r1, r2, #8
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	06d2      	lsls	r2, r2, #27
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6852      	ldr	r2, [r2, #4]
 8003e12:	3a01      	subs	r2, #1
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	430a      	orrs	r2, r1
 8003e18:	492d      	ldr	r1, [pc, #180]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
 8003e1e:	e02d      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d115      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6912      	ldr	r2, [r2, #16]
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0552      	lsls	r2, r2, #21
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6852      	ldr	r2, [r2, #4]
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	610b      	str	r3, [r1, #16]
 8003e50:	e014      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	4b21      	ldr	r3, [pc, #132]	; (8003edc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6892      	ldr	r2, [r2, #8]
 8003e5e:	0211      	lsls	r1, r2, #8
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6952      	ldr	r2, [r2, #20]
 8003e64:	0852      	lsrs	r2, r2, #1
 8003e66:	3a01      	subs	r2, #1
 8003e68:	0652      	lsls	r2, r2, #25
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe f8c0 	bl	800200c <HAL_GetTick>
 8003e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e90:	f7fe f8bc 	bl	800200c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d902      	bls.n	8003ea4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea2:	e005      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	07ff800f 	.word	0x07ff800f
 8003ed8:	ff9f800f 	.word	0xff9f800f
 8003edc:	f9ff800f 	.word	0xf9ff800f

08003ee0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eee:	4b72      	ldr	r3, [pc, #456]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003efa:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0203 	and.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d103      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d142      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e03f      	b.n	8003f98 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d018      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0x72>
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d825      	bhi.n	8003f70 <RCCEx_PLLSAI2_Config+0x90>
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d002      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0x4e>
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d009      	beq.n	8003f40 <RCCEx_PLLSAI2_Config+0x60>
 8003f2c:	e020      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f2e:	4b62      	ldr	r3, [pc, #392]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3e:	e01a      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f40:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d116      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f50:	e013      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f52:	4b59      	ldr	r3, [pc, #356]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f5e:	4b56      	ldr	r3, [pc, #344]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f6e:	e006      	b.n	8003f7e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e004      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003f86:	4b4c      	ldr	r3, [pc, #304]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4949      	ldr	r1, [pc, #292]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 8086 	bne.w	80040ac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a44      	ldr	r2, [pc, #272]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fe f82e 	bl	800200c <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fb2:	e009      	b.n	8003fc8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fb4:	f7fe f82a 	bl	800200c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d902      	bls.n	8003fc8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc6:	e005      	b.n	8003fd4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d168      	bne.n	80040ac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d113      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	0211      	lsls	r1, r2, #8
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68d2      	ldr	r2, [r2, #12]
 8003ff2:	06d2      	lsls	r2, r2, #27
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	3a01      	subs	r2, #1
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	430a      	orrs	r2, r1
 8004000:	492d      	ldr	r1, [pc, #180]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	614b      	str	r3, [r1, #20]
 8004006:	e02d      	b.n	8004064 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d115      	bne.n	800403a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004014:	4013      	ands	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	0211      	lsls	r1, r2, #8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6912      	ldr	r2, [r2, #16]
 8004020:	0852      	lsrs	r2, r2, #1
 8004022:	3a01      	subs	r2, #1
 8004024:	0552      	lsls	r2, r2, #21
 8004026:	4311      	orrs	r1, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6852      	ldr	r2, [r2, #4]
 800402c:	3a01      	subs	r2, #1
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	430a      	orrs	r2, r1
 8004032:	4921      	ldr	r1, [pc, #132]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	614b      	str	r3, [r1, #20]
 8004038:	e014      	b.n	8004064 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800403a:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6892      	ldr	r2, [r2, #8]
 8004046:	0211      	lsls	r1, r2, #8
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6952      	ldr	r2, [r2, #20]
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	3a01      	subs	r2, #1
 8004050:	0652      	lsls	r2, r2, #25
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	3a01      	subs	r2, #1
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	430a      	orrs	r2, r1
 800405e:	4916      	ldr	r1, [pc, #88]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004060:	4313      	orrs	r3, r2
 8004062:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd ffcc 	bl	800200c <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004076:	e009      	b.n	800408c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004078:	f7fd ffc8 	bl	800200c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	73fb      	strb	r3, [r7, #15]
          break;
 800408a:	e005      	b.n	8004098 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4904      	ldr	r1, [pc, #16]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	07ff800f 	.word	0x07ff800f
 80040c0:	ff9f800f 	.word	0xff9f800f
 80040c4:	f9ff800f 	.word	0xf9ff800f

080040c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e049      	b.n	800416e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f841 	bl	8004176 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 fc6a 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d001      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e04f      	b.n	8004244 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_TIM_Base_Start_IT+0xc4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01d      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d018      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_TIM_Base_Start_IT+0xc8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_TIM_Base_Start_IT+0xcc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_TIM_Base_Start_IT+0xd0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <HAL_TIM_Base_Start_IT+0xd4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_TIM_Base_Start_IT+0x76>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_TIM_Base_Start_IT+0xd8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d115      	bne.n	800422e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_TIM_Base_Start_IT+0xdc>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b06      	cmp	r3, #6
 8004212:	d015      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0xb4>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d011      	beq.n	8004240 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	e008      	b.n	8004240 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e000      	b.n	8004242 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40013400 	.word	0x40013400
 8004264:	40014000 	.word	0x40014000
 8004268:	00010007 	.word	0x00010007

0800426c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e049      	b.n	8004312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fc16 	bl	8001ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 fb98 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_TIM_PWM_Start+0x24>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e03c      	b.n	80043ba <HAL_TIM_PWM_Start+0x9e>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b04      	cmp	r3, #4
 8004344:	d109      	bne.n	800435a <HAL_TIM_PWM_Start+0x3e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e02f      	b.n	80043ba <HAL_TIM_PWM_Start+0x9e>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d109      	bne.n	8004374 <HAL_TIM_PWM_Start+0x58>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e022      	b.n	80043ba <HAL_TIM_PWM_Start+0x9e>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d109      	bne.n	800438e <HAL_TIM_PWM_Start+0x72>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	e015      	b.n	80043ba <HAL_TIM_PWM_Start+0x9e>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d109      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x8c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e008      	b.n	80043ba <HAL_TIM_PWM_Start+0x9e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e09c      	b.n	80044fc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0xb6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	e023      	b.n	800441a <HAL_TIM_PWM_Start+0xfe>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xc6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e0:	e01b      	b.n	800441a <HAL_TIM_PWM_Start+0xfe>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_PWM_Start+0xd6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f0:	e013      	b.n	800441a <HAL_TIM_PWM_Start+0xfe>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d104      	bne.n	8004402 <HAL_TIM_PWM_Start+0xe6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004400:	e00b      	b.n	800441a <HAL_TIM_PWM_Start+0xfe>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b10      	cmp	r3, #16
 8004406:	d104      	bne.n	8004412 <HAL_TIM_PWM_Start+0xf6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004410:	e003      	b.n	800441a <HAL_TIM_PWM_Start+0xfe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fe4c 	bl	80050c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a35      	ldr	r2, [pc, #212]	; (8004504 <HAL_TIM_PWM_Start+0x1e8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_TIM_PWM_Start+0x13e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a34      	ldr	r2, [pc, #208]	; (8004508 <HAL_TIM_PWM_Start+0x1ec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIM_PWM_Start+0x13e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a32      	ldr	r2, [pc, #200]	; (800450c <HAL_TIM_PWM_Start+0x1f0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIM_PWM_Start+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a31      	ldr	r2, [pc, #196]	; (8004510 <HAL_TIM_PWM_Start+0x1f4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIM_PWM_Start+0x13e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <HAL_TIM_PWM_Start+0x1f8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_Start+0x142>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_TIM_PWM_Start+0x144>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_TIM_PWM_Start+0x1e8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01d      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d018      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_TIM_PWM_Start+0x1fc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_TIM_PWM_Start+0x200>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_TIM_PWM_Start+0x204>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <HAL_TIM_PWM_Start+0x1ec>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_TIM_PWM_Start+0x19e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_TIM_PWM_Start+0x1f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d115      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_TIM_PWM_Start+0x208>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d015      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x1dc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d011      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e008      	b.n	80044f8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e000      	b.n	80044fa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40014000 	.word	0x40014000
 8004510:	40014400 	.word	0x40014400
 8004514:	40014800 	.word	0x40014800
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	00010007 	.word	0x00010007

08004528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa1a 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa0c 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fa1d 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0204 	mvn.w	r2, #4
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9f0 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9e2 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9f3 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0208 	mvn.w	r2, #8
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9c6 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9b8 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f9c9 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b10      	cmp	r3, #16
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2208      	movs	r2, #8
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f99c 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f98e 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f99f 	bl	80049b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10e      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0201 	mvn.w	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc ff1a 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fdac 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d10e      	bne.n	8004706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d107      	bne.n	8004706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fd9f 	bl	8005244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d10e      	bne.n	8004732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d107      	bne.n	8004732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f94d 	bl	80049cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b20      	cmp	r3, #32
 800473e:	d10e      	bne.n	800475e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d107      	bne.n	800475e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f06f 0220 	mvn.w	r2, #32
 8004756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fd5f 	bl	800521c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004782:	2302      	movs	r3, #2
 8004784:	e0ff      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b14      	cmp	r3, #20
 8004792:	f200 80f0 	bhi.w	8004976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	08004977 	.word	0x08004977
 80047a4:	08004977 	.word	0x08004977
 80047a8:	08004977 	.word	0x08004977
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004977 	.word	0x08004977
 80047b4:	08004977 	.word	0x08004977
 80047b8:	08004977 	.word	0x08004977
 80047bc:	08004873 	.word	0x08004873
 80047c0:	08004977 	.word	0x08004977
 80047c4:	08004977 	.word	0x08004977
 80047c8:	08004977 	.word	0x08004977
 80047cc:	080048b3 	.word	0x080048b3
 80047d0:	08004977 	.word	0x08004977
 80047d4:	08004977 	.word	0x08004977
 80047d8:	08004977 	.word	0x08004977
 80047dc:	080048f5 	.word	0x080048f5
 80047e0:	08004977 	.word	0x08004977
 80047e4:	08004977 	.word	0x08004977
 80047e8:	08004977 	.word	0x08004977
 80047ec:	08004935 	.word	0x08004935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f98c 	bl	8004b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	619a      	str	r2, [r3, #24]
      break;
 800482e:	e0a5      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f9fc 	bl	8004c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	619a      	str	r2, [r3, #24]
      break;
 8004870:	e084      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fa65 	bl	8004d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0208 	orr.w	r2, r2, #8
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0204 	bic.w	r2, r2, #4
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	61da      	str	r2, [r3, #28]
      break;
 80048b0:	e064      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 facd 	bl	8004e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
      break;
 80048f2:	e043      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb16 	bl	8004f2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0208 	orr.w	r2, r2, #8
 800490e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004932:	e023      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fb5a 	bl	8004ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004974:	e002      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
      break;
 800497a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop

08004990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d00f      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <TIM_Base_SetConfig+0x118>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3c      	ldr	r2, [pc, #240]	; (8004afc <TIM_Base_SetConfig+0x11c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3b      	ldr	r2, [pc, #236]	; (8004b00 <TIM_Base_SetConfig+0x120>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3a      	ldr	r2, [pc, #232]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01f      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d01b      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <TIM_Base_SetConfig+0x118>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d017      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <TIM_Base_SetConfig+0x11c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <TIM_Base_SetConfig+0x120>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00f      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00b      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <TIM_Base_SetConfig+0x128>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <TIM_Base_SetConfig+0x12c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <TIM_Base_SetConfig+0x130>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d108      	bne.n	8004a8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_Base_SetConfig+0xf8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_Base_SetConfig+0xf8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a11      	ldr	r2, [pc, #68]	; (8004b08 <TIM_Base_SetConfig+0x128>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <TIM_Base_SetConfig+0x12c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0xf8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <TIM_Base_SetConfig+0x130>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d103      	bne.n	8004ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 0302 	bic.w	r3, r3, #2
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2c      	ldr	r2, [pc, #176]	; (8004c20 <TIM_OC1_SetConfig+0x10c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_OC1_SetConfig+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <TIM_OC1_SetConfig+0x110>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_OC1_SetConfig+0x80>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a2a      	ldr	r2, [pc, #168]	; (8004c28 <TIM_OC1_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_OC1_SetConfig+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a29      	ldr	r2, [pc, #164]	; (8004c2c <TIM_OC1_SetConfig+0x118>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_OC1_SetConfig+0x80>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <TIM_OC1_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10c      	bne.n	8004bae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0308 	bic.w	r3, r3, #8
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f023 0304 	bic.w	r3, r3, #4
 8004bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <TIM_OC1_SetConfig+0x10c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00f      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xc2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <TIM_OC1_SetConfig+0x110>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xc2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_OC1_SetConfig+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xc2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <TIM_OC1_SetConfig+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC1_SetConfig+0xc2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <TIM_OC1_SetConfig+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	621a      	str	r2, [r3, #32]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40013400 	.word	0x40013400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800

08004c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <TIM_OC2_SetConfig+0x100>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC2_SetConfig+0x6c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <TIM_OC2_SetConfig+0x104>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10d      	bne.n	8004cbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <TIM_OC2_SetConfig+0x100>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_OC2_SetConfig+0xb0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <TIM_OC2_SetConfig+0x104>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC2_SetConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <TIM_OC2_SetConfig+0x108>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC2_SetConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <TIM_OC2_SetConfig+0x10c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC2_SetConfig+0xb0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <TIM_OC2_SetConfig+0x110>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d113      	bne.n	8004d0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <TIM_OC3_SetConfig+0xfc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC3_SetConfig+0x6a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <TIM_OC3_SetConfig+0x100>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10d      	bne.n	8004dce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <TIM_OC3_SetConfig+0xfc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_OC3_SetConfig+0xae>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <TIM_OC3_SetConfig+0x100>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_OC3_SetConfig+0xae>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <TIM_OC3_SetConfig+0x104>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC3_SetConfig+0xae>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <TIM_OC3_SetConfig+0x108>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC3_SetConfig+0xae>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <TIM_OC3_SetConfig+0x10c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d113      	bne.n	8004e1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <TIM_OC4_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00f      	beq.n	8004edc <TIM_OC4_SetConfig+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <TIM_OC4_SetConfig+0xc4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_OC4_SetConfig+0x84>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <TIM_OC4_SetConfig+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_OC4_SetConfig+0x84>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <TIM_OC4_SetConfig+0xcc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC4_SetConfig+0x84>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <TIM_OC4_SetConfig+0xd0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <TIM_OC5_SetConfig+0xb4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_OC5_SetConfig+0x7a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <TIM_OC5_SetConfig+0xb8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_OC5_SetConfig+0x7a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <TIM_OC5_SetConfig+0xbc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_OC5_SetConfig+0x7a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_OC5_SetConfig+0xc0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC5_SetConfig+0x7a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <TIM_OC5_SetConfig+0xc4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d109      	bne.n	8004fba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800

08004ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800503a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	051b      	lsls	r3, r3, #20
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <TIM_OC6_SetConfig+0xb8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_OC6_SetConfig+0x7c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <TIM_OC6_SetConfig+0xbc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_OC6_SetConfig+0x7c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <TIM_OC6_SetConfig+0xc0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC6_SetConfig+0x7c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <TIM_OC6_SetConfig+0xc4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC6_SetConfig+0x7c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a14      	ldr	r2, [pc, #80]	; (80050bc <TIM_OC6_SetConfig+0xc8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	2201      	movs	r2, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	401a      	ands	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e068      	b.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2e      	ldr	r2, [pc, #184]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d018      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a14      	ldr	r2, [pc, #80]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10c      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40013400 	.word	0x40013400
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40014000 	.word	0x40014000

0800521c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e042      	b.n	80052f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fc fdbd 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2224      	movs	r2, #36	; 0x24
 8005286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fc52 	bl	8005b44 <UART_SetConfig>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e022      	b.n	80052f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 ff0e 	bl	80060d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 ff95 	bl	8006218 <UART_CheckIdleState>
 80052ee:	4603      	mov	r3, r0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530e:	2b20      	cmp	r3, #32
 8005310:	f040 8084 	bne.w	800541c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Transmit+0x28>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e07c      	b.n	800541e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UART_Transmit+0x3a>
 800532e:	2302      	movs	r3, #2
 8005330:	e075      	b.n	800541e <HAL_UART_Transmit+0x126>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	; 0x21
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534a:	f7fc fe5f 	bl	800200c <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d108      	bne.n	800537c <HAL_UART_Transmit+0x84>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e003      	b.n	8005384 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800538c:	e02d      	b.n	80053ea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 ff88 	bl	80062ae <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e03a      	b.n	800541e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ba:	b292      	uxth	r2, r2
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	3302      	adds	r3, #2
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e008      	b.n	80053d8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781a      	ldrb	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b292      	uxth	r2, r2
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1cb      	bne.n	800538e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 ff54 	bl	80062ae <UART_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e006      	b.n	800541e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	2b20      	cmp	r3, #32
 800543e:	d142      	bne.n	80054c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_UART_Receive_IT+0x24>
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e03b      	b.n	80054c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_UART_Receive_IT+0x36>
 800545a:	2302      	movs	r3, #2
 800545c:	e034      	b.n	80054c8 <HAL_UART_Receive_IT+0xa0>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_UART_Receive_IT+0xa8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01f      	beq.n	80054b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d018      	beq.n	80054b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	613b      	str	r3, [r7, #16]
   return(result);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	69f9      	ldr	r1, [r7, #28]
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e6      	bne.n	8005484 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 ffbf 	bl	8006440 <UART_Start_Receive_IT>
 80054c2:	4603      	mov	r3, r0
 80054c4:	e000      	b.n	80054c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40008000 	.word	0x40008000

080054d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b0ba      	sub	sp, #232	; 0xe8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005502:	4013      	ands	r3, r2
 8005504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11b      	bne.n	8005548 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 82d6 	beq.w	8005aea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      }
      return;
 8005546:	e2d0      	b.n	8005aea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 811f 	beq.w	8005790 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005552:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005556:	4b8b      	ldr	r3, [pc, #556]	; (8005784 <HAL_UART_IRQHandler+0x2b0>)
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800555e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005562:	4b89      	ldr	r3, [pc, #548]	; (8005788 <HAL_UART_IRQHandler+0x2b4>)
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8112 	beq.w	8005790 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_UART_IRQHandler+0xc8>
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d011      	beq.n	80055cc <HAL_UART_IRQHandler+0xf8>
 80055a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2202      	movs	r2, #2
 80055ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c2:	f043 0204 	orr.w	r2, r3, #4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d011      	beq.n	80055fc <HAL_UART_IRQHandler+0x128>
 80055d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2204      	movs	r2, #4
 80055ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f2:	f043 0202 	orr.w	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005614:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005618:	4b5a      	ldr	r3, [pc, #360]	; (8005784 <HAL_UART_IRQHandler+0x2b0>)
 800561a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2208      	movs	r2, #8
 8005626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562e:	f043 0208 	orr.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <HAL_UART_IRQHandler+0x196>
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 823c 	beq.w	8005aee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d013      	beq.n	80056aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d005      	beq.n	80056ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04f      	beq.n	800576e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 ffe0 	bl	8006694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d141      	bne.n	8005766 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800570e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800571a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d9      	bne.n	80056e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d013      	beq.n	800575e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_UART_IRQHandler+0x2b8>)
 800573c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005742:	4618      	mov	r0, r3
 8005744:	f7fc fdd0 	bl	80022e8 <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d017      	beq.n	800577e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	e00f      	b.n	800577e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9da 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e00b      	b.n	800577e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9d6 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	e007      	b.n	800577e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9d2 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800577c:	e1b7      	b.n	8005aee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577e:	bf00      	nop
    return;
 8005780:	e1b5      	b.n	8005aee <HAL_UART_IRQHandler+0x61a>
 8005782:	bf00      	nop
 8005784:	10000001 	.word	0x10000001
 8005788:	04000120 	.word	0x04000120
 800578c:	08006761 	.word	0x08006761

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005794:	2b01      	cmp	r3, #1
 8005796:	f040 814a 	bne.w	8005a2e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8143 	beq.w	8005a2e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 813c 	beq.w	8005a2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2210      	movs	r2, #16
 80057bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	f040 80b5 	bne.w	8005938 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8187 	beq.w	8005af2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ee:	429a      	cmp	r2, r3
 80057f0:	f080 817f 	bcs.w	8005af2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 8086 	bne.w	800591c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800583a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800583e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1da      	bne.n	8005810 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800586a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800587e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e1      	bne.n	800585a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e3      	bne.n	8005896 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ec:	f023 0310 	bic.w	r3, r3, #16
 80058f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800590c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e4      	bne.n	80058dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005916:	4618      	mov	r0, r3
 8005918:	f7fc fc8a 	bl	8002230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005928:	b29b      	uxth	r3, r3
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8fb 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005936:	e0dc      	b.n	8005af2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005944:	b29b      	uxth	r3, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80ce 	beq.w	8005af6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800595a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80c9 	beq.w	8005af6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005986:	647b      	str	r3, [r7, #68]	; 0x44
 8005988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800598c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e4      	bne.n	8005964 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	623b      	str	r3, [r7, #32]
   return(result);
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059c2:	633a      	str	r2, [r7, #48]	; 0x30
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e1      	bne.n	800599a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	69b9      	ldr	r1, [r7, #24]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f880 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a2c:	e063      	b.n	8005af6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <HAL_UART_IRQHandler+0x584>
 8005a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fb2b 	bl	80070ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a56:	e051      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d014      	beq.n	8005a8e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d105      	bne.n	8005a7c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03a      	beq.n	8005afa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
    }
    return;
 8005a8c:	e035      	b.n	8005afa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_UART_IRQHandler+0x5da>
 8005a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fe70 	bl	800678c <UART_EndTransmit_IT>
    return;
 8005aac:	e026      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_UART_IRQHandler+0x5fa>
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fb04 	bl	80070d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005acc:	e016      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <HAL_UART_IRQHandler+0x628>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da0c      	bge.n	8005afc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 faec 	bl	80070c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ae8:	e008      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
      return;
 8005aea:	bf00      	nop
 8005aec:	e006      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
    return;
 8005aee:	bf00      	nop
 8005af0:	e004      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
      return;
 8005af2:	bf00      	nop
 8005af4:	e002      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
      return;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <HAL_UART_IRQHandler+0x628>
    return;
 8005afa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005afc:	37e8      	adds	r7, #232	; 0xe8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4bb1      	ldr	r3, [pc, #708]	; (8005e34 <UART_SetConfig+0x2f0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	69f9      	ldr	r1, [r7, #28]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4aa6      	ldr	r2, [pc, #664]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f023 010f 	bic.w	r1, r3, #15
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a97      	ldr	r2, [pc, #604]	; (8005e3c <UART_SetConfig+0x2f8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d120      	bne.n	8005c26 <UART_SetConfig+0xe2>
 8005be4:	4b96      	ldr	r3, [pc, #600]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d816      	bhi.n	8005c20 <UART_SetConfig+0xdc>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0xb4>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c15 	.word	0x08005c15
 8005c00:	08005c0f 	.word	0x08005c0f
 8005c04:	08005c1b 	.word	0x08005c1b
 8005c08:	2301      	movs	r3, #1
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e0e7      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	76fb      	strb	r3, [r7, #27]
 8005c12:	e0e4      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c14:	2304      	movs	r3, #4
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e0e1      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e0de      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c20:	2310      	movs	r3, #16
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	e0db      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a86      	ldr	r2, [pc, #536]	; (8005e44 <UART_SetConfig+0x300>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d132      	bne.n	8005c96 <UART_SetConfig+0x152>
 8005c30:	4b83      	ldr	r3, [pc, #524]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	d828      	bhi.n	8005c90 <UART_SetConfig+0x14c>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x100>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005c91 	.word	0x08005c91
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005c91 	.word	0x08005c91
 8005c54:	08005c85 	.word	0x08005c85
 8005c58:	08005c91 	.word	0x08005c91
 8005c5c:	08005c91 	.word	0x08005c91
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005c7f 	.word	0x08005c7f
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c91 	.word	0x08005c91
 8005c74:	08005c8b 	.word	0x08005c8b
 8005c78:	2300      	movs	r3, #0
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e0af      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	76fb      	strb	r3, [r7, #27]
 8005c82:	e0ac      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c84:	2304      	movs	r3, #4
 8005c86:	76fb      	strb	r3, [r7, #27]
 8005c88:	e0a9      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	76fb      	strb	r3, [r7, #27]
 8005c8e:	e0a6      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c90:	2310      	movs	r3, #16
 8005c92:	76fb      	strb	r3, [r7, #27]
 8005c94:	e0a3      	b.n	8005dde <UART_SetConfig+0x29a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6b      	ldr	r2, [pc, #428]	; (8005e48 <UART_SetConfig+0x304>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d120      	bne.n	8005ce2 <UART_SetConfig+0x19e>
 8005ca0:	4b67      	ldr	r3, [pc, #412]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005caa:	2b30      	cmp	r3, #48	; 0x30
 8005cac:	d013      	beq.n	8005cd6 <UART_SetConfig+0x192>
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d814      	bhi.n	8005cdc <UART_SetConfig+0x198>
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d009      	beq.n	8005cca <UART_SetConfig+0x186>
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d810      	bhi.n	8005cdc <UART_SetConfig+0x198>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <UART_SetConfig+0x180>
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d006      	beq.n	8005cd0 <UART_SetConfig+0x18c>
 8005cc2:	e00b      	b.n	8005cdc <UART_SetConfig+0x198>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e089      	b.n	8005dde <UART_SetConfig+0x29a>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e086      	b.n	8005dde <UART_SetConfig+0x29a>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e083      	b.n	8005dde <UART_SetConfig+0x29a>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	76fb      	strb	r3, [r7, #27]
 8005cda:	e080      	b.n	8005dde <UART_SetConfig+0x29a>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e07d      	b.n	8005dde <UART_SetConfig+0x29a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a59      	ldr	r2, [pc, #356]	; (8005e4c <UART_SetConfig+0x308>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d120      	bne.n	8005d2e <UART_SetConfig+0x1ea>
 8005cec:	4b54      	ldr	r3, [pc, #336]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8005cf8:	d013      	beq.n	8005d22 <UART_SetConfig+0x1de>
 8005cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8005cfc:	d814      	bhi.n	8005d28 <UART_SetConfig+0x1e4>
 8005cfe:	2b80      	cmp	r3, #128	; 0x80
 8005d00:	d009      	beq.n	8005d16 <UART_SetConfig+0x1d2>
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d810      	bhi.n	8005d28 <UART_SetConfig+0x1e4>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <UART_SetConfig+0x1cc>
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d006      	beq.n	8005d1c <UART_SetConfig+0x1d8>
 8005d0e:	e00b      	b.n	8005d28 <UART_SetConfig+0x1e4>
 8005d10:	2300      	movs	r3, #0
 8005d12:	76fb      	strb	r3, [r7, #27]
 8005d14:	e063      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d16:	2302      	movs	r3, #2
 8005d18:	76fb      	strb	r3, [r7, #27]
 8005d1a:	e060      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e05d      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d22:	2308      	movs	r3, #8
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e05a      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e057      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a47      	ldr	r2, [pc, #284]	; (8005e50 <UART_SetConfig+0x30c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d125      	bne.n	8005d84 <UART_SetConfig+0x240>
 8005d38:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d46:	d017      	beq.n	8005d78 <UART_SetConfig+0x234>
 8005d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4c:	d817      	bhi.n	8005d7e <UART_SetConfig+0x23a>
 8005d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d52:	d00b      	beq.n	8005d6c <UART_SetConfig+0x228>
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d58:	d811      	bhi.n	8005d7e <UART_SetConfig+0x23a>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <UART_SetConfig+0x222>
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d62:	d006      	beq.n	8005d72 <UART_SetConfig+0x22e>
 8005d64:	e00b      	b.n	8005d7e <UART_SetConfig+0x23a>
 8005d66:	2300      	movs	r3, #0
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e038      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e035      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d72:	2304      	movs	r3, #4
 8005d74:	76fb      	strb	r3, [r7, #27]
 8005d76:	e032      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	e02f      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d7e:	2310      	movs	r3, #16
 8005d80:	76fb      	strb	r3, [r7, #27]
 8005d82:	e02c      	b.n	8005dde <UART_SetConfig+0x29a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a2b      	ldr	r2, [pc, #172]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d125      	bne.n	8005dda <UART_SetConfig+0x296>
 8005d8e:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <UART_SetConfig+0x2fc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d9c:	d017      	beq.n	8005dce <UART_SetConfig+0x28a>
 8005d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da2:	d817      	bhi.n	8005dd4 <UART_SetConfig+0x290>
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da8:	d00b      	beq.n	8005dc2 <UART_SetConfig+0x27e>
 8005daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dae:	d811      	bhi.n	8005dd4 <UART_SetConfig+0x290>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <UART_SetConfig+0x278>
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d006      	beq.n	8005dc8 <UART_SetConfig+0x284>
 8005dba:	e00b      	b.n	8005dd4 <UART_SetConfig+0x290>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	76fb      	strb	r3, [r7, #27]
 8005dc0:	e00d      	b.n	8005dde <UART_SetConfig+0x29a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	76fb      	strb	r3, [r7, #27]
 8005dc6:	e00a      	b.n	8005dde <UART_SetConfig+0x29a>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	76fb      	strb	r3, [r7, #27]
 8005dcc:	e007      	b.n	8005dde <UART_SetConfig+0x29a>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	76fb      	strb	r3, [r7, #27]
 8005dd2:	e004      	b.n	8005dde <UART_SetConfig+0x29a>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	76fb      	strb	r3, [r7, #27]
 8005dd8:	e001      	b.n	8005dde <UART_SetConfig+0x29a>
 8005dda:	2310      	movs	r3, #16
 8005ddc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <UART_SetConfig+0x2f4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	f040 809f 	bne.w	8005f28 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dea:	7efb      	ldrb	r3, [r7, #27]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d837      	bhi.n	8005e60 <UART_SetConfig+0x31c>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x2b4>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e61 	.word	0x08005e61
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e61 	.word	0x08005e61
 8005e08:	08005e2b 	.word	0x08005e2b
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005e61 	.word	0x08005e61
 8005e14:	08005e61 	.word	0x08005e61
 8005e18:	08005e59 	.word	0x08005e59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f7fd fb1c 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8005e20:	6178      	str	r0, [r7, #20]
        break;
 8005e22:	e022      	b.n	8005e6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <UART_SetConfig+0x310>)
 8005e26:	617b      	str	r3, [r7, #20]
        break;
 8005e28:	e01f      	b.n	8005e6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2a:	f7fd fa7d 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8005e2e:	6178      	str	r0, [r7, #20]
        break;
 8005e30:	e01b      	b.n	8005e6a <UART_SetConfig+0x326>
 8005e32:	bf00      	nop
 8005e34:	cfff69f3 	.word	0xcfff69f3
 8005e38:	40008000 	.word	0x40008000
 8005e3c:	40013800 	.word	0x40013800
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40004400 	.word	0x40004400
 8005e48:	40004800 	.word	0x40004800
 8005e4c:	40004c00 	.word	0x40004c00
 8005e50:	40005000 	.word	0x40005000
 8005e54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5c:	617b      	str	r3, [r7, #20]
        break;
 8005e5e:	e004      	b.n	8005e6a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	76bb      	strb	r3, [r7, #26]
        break;
 8005e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8119 	beq.w	80060a4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	4a95      	ldr	r2, [pc, #596]	; (80060cc <UART_SetConfig+0x588>)
 8005e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4413      	add	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d305      	bcc.n	8005ea2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d902      	bls.n	8005ea8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	76bb      	strb	r3, [r7, #26]
 8005ea6:	e0fd      	b.n	80060a4 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	4a85      	ldr	r2, [pc, #532]	; (80060cc <UART_SetConfig+0x588>)
 8005eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	f7fa fe8a 	bl	8000bd8 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	020b      	lsls	r3, r1, #8
 8005ed6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005eda:	0202      	lsls	r2, r0, #8
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	6849      	ldr	r1, [r1, #4]
 8005ee0:	0849      	lsrs	r1, r1, #1
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	1814      	adds	r4, r2, r0
 8005eea:	eb43 0501 	adc.w	r5, r3, r1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4629      	mov	r1, r5
 8005efc:	f7fa fe6c 	bl	8000bd8 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f0e:	d308      	bcc.n	8005f22 <UART_SetConfig+0x3de>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d204      	bcs.n	8005f22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	e0c0      	b.n	80060a4 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	76bb      	strb	r3, [r7, #26]
 8005f26:	e0bd      	b.n	80060a4 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f30:	d164      	bne.n	8005ffc <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005f32:	7efb      	ldrb	r3, [r7, #27]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d828      	bhi.n	8005f8a <UART_SetConfig+0x446>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x3fc>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005f8b 	.word	0x08005f8b
 8005f50:	08005f7b 	.word	0x08005f7b
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f64:	f7fd fa78 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8005f68:	6178      	str	r0, [r7, #20]
        break;
 8005f6a:	e013      	b.n	8005f94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fd fa8a 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8005f70:	6178      	str	r0, [r7, #20]
        break;
 8005f72:	e00f      	b.n	8005f94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b56      	ldr	r3, [pc, #344]	; (80060d0 <UART_SetConfig+0x58c>)
 8005f76:	617b      	str	r3, [r7, #20]
        break;
 8005f78:	e00c      	b.n	8005f94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7fd f9d5 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8005f7e:	6178      	str	r0, [r7, #20]
        break;
 8005f80:	e008      	b.n	8005f94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	617b      	str	r3, [r7, #20]
        break;
 8005f88:	e004      	b.n	8005f94 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	76bb      	strb	r3, [r7, #26]
        break;
 8005f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8084 	beq.w	80060a4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <UART_SetConfig+0x588>)
 8005fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fae:	005a      	lsls	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b0f      	cmp	r3, #15
 8005fc6:	d916      	bls.n	8005ff6 <UART_SetConfig+0x4b2>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fce:	d212      	bcs.n	8005ff6 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f023 030f 	bic.w	r3, r3, #15
 8005fd8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	89fb      	ldrh	r3, [r7, #14]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	89fa      	ldrh	r2, [r7, #14]
 8005ff2:	60da      	str	r2, [r3, #12]
 8005ff4:	e056      	b.n	80060a4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	76bb      	strb	r3, [r7, #26]
 8005ffa:	e053      	b.n	80060a4 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ffc:	7efb      	ldrb	r3, [r7, #27]
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d827      	bhi.n	8006052 <UART_SetConfig+0x50e>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x4c4>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fd fa14 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8006030:	6178      	str	r0, [r7, #20]
        break;
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fd fa26 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8006038:	6178      	str	r0, [r7, #20]
        break;
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <UART_SetConfig+0x58c>)
 800603e:	617b      	str	r3, [r7, #20]
        break;
 8006040:	e00c      	b.n	800605c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fd f971 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8006046:	6178      	str	r0, [r7, #20]
        break;
 8006048:	e008      	b.n	800605c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	617b      	str	r3, [r7, #20]
        break;
 8006050:	e004      	b.n	800605c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	76bb      	strb	r3, [r7, #26]
        break;
 800605a:	bf00      	nop
    }

    if (pclk != 0U)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d020      	beq.n	80060a4 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	4a19      	ldr	r2, [pc, #100]	; (80060cc <UART_SetConfig+0x588>)
 8006068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606c:	461a      	mov	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	fbb3 f2f2 	udiv	r2, r3, r2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b0f      	cmp	r3, #15
 800608a:	d909      	bls.n	80060a0 <UART_SetConfig+0x55c>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006092:	d205      	bcs.n	80060a0 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	b29a      	uxth	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e001      	b.n	80060a4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bdb0      	pop	{r4, r5, r7, pc}
 80060ca:	bf00      	nop
 80060cc:	08009f04 	.word	0x08009f04
 80060d0:	00f42400 	.word	0x00f42400

080060d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01a      	beq.n	80061ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d2:	d10a      	bne.n	80061ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]
  }
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006228:	f7fb fef0 	bl	800200c <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b08      	cmp	r3, #8
 800623a:	d10e      	bne.n	800625a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800623c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f82f 	bl	80062ae <UART_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e025      	b.n	80062a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d10e      	bne.n	8006286 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f819 	bl	80062ae <UART_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b09c      	sub	sp, #112	; 0x70
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	603b      	str	r3, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062be:	e0a9      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	f000 80a5 	beq.w	8006414 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fb fe9f 	bl	800200c <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80062da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d140      	bne.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062f4:	667b      	str	r3, [r7, #100]	; 0x64
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006300:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800630c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e6      	bne.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006332:	64ba      	str	r2, [r7, #72]	; 0x48
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e069      	b.n	8006436 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d051      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637e:	d149      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006388:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800639e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
 80063aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	613b      	str	r3, [r7, #16]
   return(result);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063dc:	623a      	str	r2, [r7, #32]
 80063de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e010      	b.n	8006436 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	f43f af46 	beq.w	80062c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3770      	adds	r7, #112	; 0x70
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006440:	b480      	push	{r7}
 8006442:	b0a3      	sub	sp, #140	; 0x8c
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	88fa      	ldrh	r2, [r7, #6]
 8006458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d10e      	bne.n	8006492 <UART_Start_Receive_IT+0x52>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <UART_Start_Receive_IT+0x48>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006482:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006486:	e02d      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	22ff      	movs	r2, #255	; 0xff
 800648c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006490:	e028      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10d      	bne.n	80064b6 <UART_Start_Receive_IT+0x76>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <UART_Start_Receive_IT+0x6c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	22ff      	movs	r2, #255	; 0xff
 80064a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064aa:	e01b      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	227f      	movs	r2, #127	; 0x7f
 80064b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064b4:	e016      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064be:	d10d      	bne.n	80064dc <UART_Start_Receive_IT+0x9c>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <UART_Start_Receive_IT+0x92>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	227f      	movs	r2, #127	; 0x7f
 80064cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d0:	e008      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	223f      	movs	r2, #63	; 0x3f
 80064d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064da:	e003      	b.n	80064e4 <UART_Start_Receive_IT+0xa4>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2222      	movs	r2, #34	; 0x22
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006518:	673a      	str	r2, [r7, #112]	; 0x70
 800651a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800651e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e3      	bne.n	80064f4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006534:	d153      	bne.n	80065de <UART_Start_Receive_IT+0x19e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800653c:	88fa      	ldrh	r2, [r7, #6]
 800653e:	429a      	cmp	r2, r3
 8006540:	d34d      	bcc.n	80065de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654a:	d107      	bne.n	800655c <UART_Start_Receive_IT+0x11c>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a4b      	ldr	r2, [pc, #300]	; (8006684 <UART_Start_Receive_IT+0x244>)
 8006558:	671a      	str	r2, [r3, #112]	; 0x70
 800655a:	e002      	b.n	8006562 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a4a      	ldr	r2, [pc, #296]	; (8006688 <UART_Start_Receive_IT+0x248>)
 8006560:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01a      	beq.n	80065a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006596:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800659a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e4      	bne.n	8006572 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_Start_Receive_IT+0x168>
 80065dc:	e04a      	b.n	8006674 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d107      	bne.n	80065f8 <UART_Start_Receive_IT+0x1b8>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a26      	ldr	r2, [pc, #152]	; (800668c <UART_Start_Receive_IT+0x24c>)
 80065f4:	671a      	str	r2, [r3, #112]	; 0x70
 80065f6:	e002      	b.n	80065fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a25      	ldr	r2, [pc, #148]	; (8006690 <UART_Start_Receive_IT+0x250>)
 80065fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d019      	beq.n	8006642 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006622:	677b      	str	r3, [r7, #116]	; 0x74
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_Start_Receive_IT+0x1ce>
 8006640:	e018      	b.n	8006674 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	613b      	str	r3, [r7, #16]
   return(result);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f043 0320 	orr.w	r3, r3, #32
 8006656:	67bb      	str	r3, [r7, #120]	; 0x78
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	69f9      	ldr	r1, [r7, #28]
 8006666:	6a3a      	ldr	r2, [r7, #32]
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	61bb      	str	r3, [r7, #24]
   return(result);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	378c      	adds	r7, #140	; 0x8c
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	08006da9 	.word	0x08006da9
 8006688:	08006aad 	.word	0x08006aad
 800668c:	08006947 	.word	0x08006947
 8006690:	080067e3 	.word	0x080067e3

08006694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b095      	sub	sp, #84	; 0x54
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e6      	bne.n	800669c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e3      	bne.n	80066ce <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d118      	bne.n	8006740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	60bb      	str	r3, [r7, #8]
   return(result);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0310 	bic.w	r3, r3, #16
 8006722:	647b      	str	r3, [r7, #68]	; 0x44
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6979      	ldr	r1, [r7, #20]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	613b      	str	r3, [r7, #16]
   return(result);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e6      	bne.n	800670e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006754:	bf00      	nop
 8006756:	3754      	adds	r7, #84	; 0x54
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff f9ca 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	613b      	str	r3, [r7, #16]
   return(result);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e6      	bne.n	8006794 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff f995 	bl	8005b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067da:	bf00      	nop
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b096      	sub	sp, #88	; 0x58
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	2b22      	cmp	r3, #34	; 0x22
 80067fc:	f040 8095 	bne.w	800692a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006806:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800680a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800680e:	b2d9      	uxtb	r1, r3
 8006810:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	400a      	ands	r2, r1
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d17a      	bne.n	800693e <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685c:	653b      	str	r3, [r7, #80]	; 0x50
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006866:	647b      	str	r3, [r7, #68]	; 0x44
 8006868:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800686c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e6      	bne.n	8006848 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	623b      	str	r3, [r7, #32]
   return(result);
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689a:	633a      	str	r2, [r7, #48]	; 0x30
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d12e      	bne.n	8006922 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0310 	bic.w	r3, r3, #16
 80068de:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	617b      	str	r3, [r7, #20]
   return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b10      	cmp	r3, #16
 8006908:	d103      	bne.n	8006912 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2210      	movs	r2, #16
 8006910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff f906 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006920:	e00d      	b.n	800693e <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fa fd88 	bl	8001438 <HAL_UART_RxCpltCallback>
}
 8006928:	e009      	b.n	800693e <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	8b1b      	ldrh	r3, [r3, #24]
 8006930:	b29a      	uxth	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	b292      	uxth	r2, r2
 800693c:	831a      	strh	r2, [r3, #24]
}
 800693e:	bf00      	nop
 8006940:	3758      	adds	r7, #88	; 0x58
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b096      	sub	sp, #88	; 0x58
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006954:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695e:	2b22      	cmp	r3, #34	; 0x22
 8006960:	f040 8095 	bne.w	8006a8e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800696a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006974:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006978:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800697c:	4013      	ands	r3, r2
 800697e:	b29a      	uxth	r2, r3
 8006980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006982:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d17a      	bne.n	8006aa2 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
 80069cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d12e      	bne.n	8006a86 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0310 	bic.w	r3, r3, #16
 8006a42:	647b      	str	r3, [r7, #68]	; 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6979      	ldr	r1, [r7, #20]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e6      	bne.n	8006a2e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d103      	bne.n	8006a76 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2210      	movs	r2, #16
 8006a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff f854 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a84:	e00d      	b.n	8006aa2 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fa fcd6 	bl	8001438 <HAL_UART_RxCpltCallback>
}
 8006a8c:	e009      	b.n	8006aa2 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	8b1b      	ldrh	r3, [r3, #24]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0208 	orr.w	r2, r2, #8
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	831a      	strh	r2, [r3, #24]
}
 8006aa2:	bf00      	nop
 8006aa4:	3758      	adds	r7, #88	; 0x58
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b0a6      	sub	sp, #152	; 0x98
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006aba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	2b22      	cmp	r3, #34	; 0x22
 8006ae4:	f040 814f 	bne.w	8006d86 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006af2:	e0f6      	b.n	8006ce2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006afa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006afe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006b02:	b2d9      	uxtb	r1, r3
 8006b04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	400a      	ands	r2, r1
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d053      	beq.n	8006bee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d011      	beq.n	8006ba6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2202      	movs	r2, #2
 8006b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9c:	f043 0204 	orr.w	r2, r3, #4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d011      	beq.n	8006bd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bcc:	f043 0202 	orr.w	r2, r3, #2
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fe ff99 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d173      	bne.n	8006ce2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e4      	bne.n	8006bfa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3308      	adds	r3, #8
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c46:	f023 0301 	bic.w	r3, r3, #1
 8006c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c54:	657a      	str	r2, [r7, #84]	; 0x54
 8006c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e3      	bne.n	8006c30 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d12e      	bne.n	8006cdc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d103      	bne.n	8006ccc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2210      	movs	r2, #16
 8006cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fe ff29 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
 8006cda:	e002      	b.n	8006ce2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fa fbab 	bl	8001438 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ce2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f aefe 	bne.w	8006af4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d047      	beq.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d240      	bcs.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006d50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f043 0320 	orr.w	r3, r3, #32
 8006d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6979      	ldr	r1, [r7, #20]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e6      	bne.n	8006d52 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d84:	e009      	b.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	8b1b      	ldrh	r3, [r3, #24]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0208 	orr.w	r2, r2, #8
 8006d96:	b292      	uxth	r2, r2
 8006d98:	831a      	strh	r2, [r3, #24]
}
 8006d9a:	bf00      	nop
 8006d9c:	3798      	adds	r7, #152	; 0x98
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	080067e3 	.word	0x080067e3

08006da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b0a8      	sub	sp, #160	; 0xa0
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006db6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	2b22      	cmp	r3, #34	; 0x22
 8006de0:	f040 8153 	bne.w	800708a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dee:	e0fa      	b.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006df6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e02:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006e06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	1c9a      	adds	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d053      	beq.n	8006eee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d011      	beq.n	8006e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6c:	f043 0201 	orr.w	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d011      	beq.n	8006ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2202      	movs	r2, #2
 8006e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e9c:	f043 0204 	orr.w	r2, r3, #4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d011      	beq.n	8006ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ecc:	f043 0202 	orr.w	r2, r3, #2
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fe fe19 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d175      	bne.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f1e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e4      	bne.n	8006efa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e1      	bne.n	8006f30 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d12e      	bne.n	8006fe0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	f023 0310 	bic.w	r3, r3, #16
 8006f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e6      	bne.n	8006f88 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d103      	bne.n	8006fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fe fda7 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
 8006fde:	e002      	b.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fa fa29 	bl	8001438 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fe6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d006      	beq.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x254>
 8006fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f47f aefa 	bne.w	8006df0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007002:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007006:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800700a:	2b00      	cmp	r3, #0
 800700c:	d047      	beq.n	800709e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007014:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007018:	429a      	cmp	r2, r3
 800701a:	d240      	bcs.n	800709e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	623b      	str	r3, [r7, #32]
   return(result);
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007032:	677b      	str	r3, [r7, #116]	; 0x74
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3308      	adds	r3, #8
 800703a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800703c:	633a      	str	r2, [r7, #48]	; 0x30
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e5      	bne.n	800701c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8007054:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60fb      	str	r3, [r7, #12]
   return(result);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	673b      	str	r3, [r7, #112]	; 0x70
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007074:	61fb      	str	r3, [r7, #28]
 8007076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	617b      	str	r3, [r7, #20]
   return(result);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e6      	bne.n	8007056 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007088:	e009      	b.n	800709e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	8b1b      	ldrh	r3, [r3, #24]
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0208 	orr.w	r2, r2, #8
 800709a:	b292      	uxth	r2, r2
 800709c:	831a      	strh	r2, [r3, #24]
}
 800709e:	bf00      	nop
 80070a0:	37a0      	adds	r7, #160	; 0xa0
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08006947 	.word	0x08006947

080070ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_UARTEx_DisableFifoMode+0x16>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e027      	b.n	800714e <HAL_UARTEx_DisableFifoMode+0x66>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2224      	movs	r2, #36	; 0x24
 800710a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800712c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800716e:	2302      	movs	r3, #2
 8007170:	e02d      	b.n	80071ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f850 	bl	8007254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e02d      	b.n	800724a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	; 0x24
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f812 	bl	8007254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007260:	2b00      	cmp	r3, #0
 8007262:	d108      	bne.n	8007276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007274:	e031      	b.n	80072da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007276:	2308      	movs	r3, #8
 8007278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800727a:	2308      	movs	r3, #8
 800727c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	0e5b      	lsrs	r3, r3, #25
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	0f5b      	lsrs	r3, r3, #29
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	7b3a      	ldrb	r2, [r7, #12]
 80072a2:	4911      	ldr	r1, [pc, #68]	; (80072e8 <UARTEx_SetNbDataToProcess+0x94>)
 80072a4:	5c8a      	ldrb	r2, [r1, r2]
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072aa:	7b3a      	ldrb	r2, [r7, #12]
 80072ac:	490f      	ldr	r1, [pc, #60]	; (80072ec <UARTEx_SetNbDataToProcess+0x98>)
 80072ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	7b7a      	ldrb	r2, [r7, #13]
 80072c0:	4909      	ldr	r1, [pc, #36]	; (80072e8 <UARTEx_SetNbDataToProcess+0x94>)
 80072c2:	5c8a      	ldrb	r2, [r1, r2]
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072c8:	7b7a      	ldrb	r2, [r7, #13]
 80072ca:	4908      	ldr	r1, [pc, #32]	; (80072ec <UARTEx_SetNbDataToProcess+0x98>)
 80072cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	08009f1c 	.word	0x08009f1c
 80072ec:	08009f24 	.word	0x08009f24

080072f0 <__errno>:
 80072f0:	4b01      	ldr	r3, [pc, #4]	; (80072f8 <__errno+0x8>)
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20000018 	.word	0x20000018

080072fc <__libc_init_array>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	4d0d      	ldr	r5, [pc, #52]	; (8007334 <__libc_init_array+0x38>)
 8007300:	4c0d      	ldr	r4, [pc, #52]	; (8007338 <__libc_init_array+0x3c>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	2600      	movs	r6, #0
 8007308:	42a6      	cmp	r6, r4
 800730a:	d109      	bne.n	8007320 <__libc_init_array+0x24>
 800730c:	4d0b      	ldr	r5, [pc, #44]	; (800733c <__libc_init_array+0x40>)
 800730e:	4c0c      	ldr	r4, [pc, #48]	; (8007340 <__libc_init_array+0x44>)
 8007310:	f002 fd80 	bl	8009e14 <_init>
 8007314:	1b64      	subs	r4, r4, r5
 8007316:	10a4      	asrs	r4, r4, #2
 8007318:	2600      	movs	r6, #0
 800731a:	42a6      	cmp	r6, r4
 800731c:	d105      	bne.n	800732a <__libc_init_array+0x2e>
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	f855 3b04 	ldr.w	r3, [r5], #4
 8007324:	4798      	blx	r3
 8007326:	3601      	adds	r6, #1
 8007328:	e7ee      	b.n	8007308 <__libc_init_array+0xc>
 800732a:	f855 3b04 	ldr.w	r3, [r5], #4
 800732e:	4798      	blx	r3
 8007330:	3601      	adds	r6, #1
 8007332:	e7f2      	b.n	800731a <__libc_init_array+0x1e>
 8007334:	0800a314 	.word	0x0800a314
 8007338:	0800a314 	.word	0x0800a314
 800733c:	0800a314 	.word	0x0800a314
 8007340:	0800a318 	.word	0x0800a318

08007344 <memset>:
 8007344:	4402      	add	r2, r0
 8007346:	4603      	mov	r3, r0
 8007348:	4293      	cmp	r3, r2
 800734a:	d100      	bne.n	800734e <memset+0xa>
 800734c:	4770      	bx	lr
 800734e:	f803 1b01 	strb.w	r1, [r3], #1
 8007352:	e7f9      	b.n	8007348 <memset+0x4>

08007354 <__cvt>:
 8007354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	ec55 4b10 	vmov	r4, r5, d0
 800735c:	2d00      	cmp	r5, #0
 800735e:	460e      	mov	r6, r1
 8007360:	4619      	mov	r1, r3
 8007362:	462b      	mov	r3, r5
 8007364:	bfbb      	ittet	lt
 8007366:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800736a:	461d      	movlt	r5, r3
 800736c:	2300      	movge	r3, #0
 800736e:	232d      	movlt	r3, #45	; 0x2d
 8007370:	700b      	strb	r3, [r1, #0]
 8007372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007374:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007378:	4691      	mov	r9, r2
 800737a:	f023 0820 	bic.w	r8, r3, #32
 800737e:	bfbc      	itt	lt
 8007380:	4622      	movlt	r2, r4
 8007382:	4614      	movlt	r4, r2
 8007384:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007388:	d005      	beq.n	8007396 <__cvt+0x42>
 800738a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800738e:	d100      	bne.n	8007392 <__cvt+0x3e>
 8007390:	3601      	adds	r6, #1
 8007392:	2102      	movs	r1, #2
 8007394:	e000      	b.n	8007398 <__cvt+0x44>
 8007396:	2103      	movs	r1, #3
 8007398:	ab03      	add	r3, sp, #12
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	ab02      	add	r3, sp, #8
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	ec45 4b10 	vmov	d0, r4, r5
 80073a4:	4653      	mov	r3, sl
 80073a6:	4632      	mov	r2, r6
 80073a8:	f000 fe1a 	bl	8007fe0 <_dtoa_r>
 80073ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073b0:	4607      	mov	r7, r0
 80073b2:	d102      	bne.n	80073ba <__cvt+0x66>
 80073b4:	f019 0f01 	tst.w	r9, #1
 80073b8:	d022      	beq.n	8007400 <__cvt+0xac>
 80073ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073be:	eb07 0906 	add.w	r9, r7, r6
 80073c2:	d110      	bne.n	80073e6 <__cvt+0x92>
 80073c4:	783b      	ldrb	r3, [r7, #0]
 80073c6:	2b30      	cmp	r3, #48	; 0x30
 80073c8:	d10a      	bne.n	80073e0 <__cvt+0x8c>
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f9 fb91 	bl	8000af8 <__aeabi_dcmpeq>
 80073d6:	b918      	cbnz	r0, 80073e0 <__cvt+0x8c>
 80073d8:	f1c6 0601 	rsb	r6, r6, #1
 80073dc:	f8ca 6000 	str.w	r6, [sl]
 80073e0:	f8da 3000 	ldr.w	r3, [sl]
 80073e4:	4499      	add	r9, r3
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f9 fb83 	bl	8000af8 <__aeabi_dcmpeq>
 80073f2:	b108      	cbz	r0, 80073f8 <__cvt+0xa4>
 80073f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073f8:	2230      	movs	r2, #48	; 0x30
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	454b      	cmp	r3, r9
 80073fe:	d307      	bcc.n	8007410 <__cvt+0xbc>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007404:	1bdb      	subs	r3, r3, r7
 8007406:	4638      	mov	r0, r7
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	b004      	add	sp, #16
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	1c59      	adds	r1, r3, #1
 8007412:	9103      	str	r1, [sp, #12]
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e7f0      	b.n	80073fa <__cvt+0xa6>

08007418 <__exponent>:
 8007418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800741a:	4603      	mov	r3, r0
 800741c:	2900      	cmp	r1, #0
 800741e:	bfb8      	it	lt
 8007420:	4249      	neglt	r1, r1
 8007422:	f803 2b02 	strb.w	r2, [r3], #2
 8007426:	bfb4      	ite	lt
 8007428:	222d      	movlt	r2, #45	; 0x2d
 800742a:	222b      	movge	r2, #43	; 0x2b
 800742c:	2909      	cmp	r1, #9
 800742e:	7042      	strb	r2, [r0, #1]
 8007430:	dd2a      	ble.n	8007488 <__exponent+0x70>
 8007432:	f10d 0407 	add.w	r4, sp, #7
 8007436:	46a4      	mov	ip, r4
 8007438:	270a      	movs	r7, #10
 800743a:	46a6      	mov	lr, r4
 800743c:	460a      	mov	r2, r1
 800743e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007442:	fb07 1516 	mls	r5, r7, r6, r1
 8007446:	3530      	adds	r5, #48	; 0x30
 8007448:	2a63      	cmp	r2, #99	; 0x63
 800744a:	f104 34ff 	add.w	r4, r4, #4294967295
 800744e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007452:	4631      	mov	r1, r6
 8007454:	dcf1      	bgt.n	800743a <__exponent+0x22>
 8007456:	3130      	adds	r1, #48	; 0x30
 8007458:	f1ae 0502 	sub.w	r5, lr, #2
 800745c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007460:	1c44      	adds	r4, r0, #1
 8007462:	4629      	mov	r1, r5
 8007464:	4561      	cmp	r1, ip
 8007466:	d30a      	bcc.n	800747e <__exponent+0x66>
 8007468:	f10d 0209 	add.w	r2, sp, #9
 800746c:	eba2 020e 	sub.w	r2, r2, lr
 8007470:	4565      	cmp	r5, ip
 8007472:	bf88      	it	hi
 8007474:	2200      	movhi	r2, #0
 8007476:	4413      	add	r3, r2
 8007478:	1a18      	subs	r0, r3, r0
 800747a:	b003      	add	sp, #12
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007482:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007486:	e7ed      	b.n	8007464 <__exponent+0x4c>
 8007488:	2330      	movs	r3, #48	; 0x30
 800748a:	3130      	adds	r1, #48	; 0x30
 800748c:	7083      	strb	r3, [r0, #2]
 800748e:	70c1      	strb	r1, [r0, #3]
 8007490:	1d03      	adds	r3, r0, #4
 8007492:	e7f1      	b.n	8007478 <__exponent+0x60>

08007494 <_printf_float>:
 8007494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	ed2d 8b02 	vpush	{d8}
 800749c:	b08d      	sub	sp, #52	; 0x34
 800749e:	460c      	mov	r4, r1
 80074a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074a4:	4616      	mov	r6, r2
 80074a6:	461f      	mov	r7, r3
 80074a8:	4605      	mov	r5, r0
 80074aa:	f001 fd3d 	bl	8008f28 <_localeconv_r>
 80074ae:	f8d0 a000 	ldr.w	sl, [r0]
 80074b2:	4650      	mov	r0, sl
 80074b4:	f7f8 fea4 	bl	8000200 <strlen>
 80074b8:	2300      	movs	r3, #0
 80074ba:	930a      	str	r3, [sp, #40]	; 0x28
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	f8d8 3000 	ldr.w	r3, [r8]
 80074c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074c8:	3307      	adds	r3, #7
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	f103 0208 	add.w	r2, r3, #8
 80074d2:	f8c8 2000 	str.w	r2, [r8]
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ec:	ee08 0a10 	vmov	s16, r0
 80074f0:	4b9f      	ldr	r3, [pc, #636]	; (8007770 <_printf_float+0x2dc>)
 80074f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f6:	f04f 32ff 	mov.w	r2, #4294967295
 80074fa:	f7f9 fb2f 	bl	8000b5c <__aeabi_dcmpun>
 80074fe:	bb88      	cbnz	r0, 8007564 <_printf_float+0xd0>
 8007500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007504:	4b9a      	ldr	r3, [pc, #616]	; (8007770 <_printf_float+0x2dc>)
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	f7f9 fb09 	bl	8000b20 <__aeabi_dcmple>
 800750e:	bb48      	cbnz	r0, 8007564 <_printf_float+0xd0>
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f9 faf8 	bl	8000b0c <__aeabi_dcmplt>
 800751c:	b110      	cbz	r0, 8007524 <_printf_float+0x90>
 800751e:	232d      	movs	r3, #45	; 0x2d
 8007520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007524:	4b93      	ldr	r3, [pc, #588]	; (8007774 <_printf_float+0x2e0>)
 8007526:	4894      	ldr	r0, [pc, #592]	; (8007778 <_printf_float+0x2e4>)
 8007528:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800752c:	bf94      	ite	ls
 800752e:	4698      	movls	r8, r3
 8007530:	4680      	movhi	r8, r0
 8007532:	2303      	movs	r3, #3
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	9b05      	ldr	r3, [sp, #20]
 8007538:	f023 0204 	bic.w	r2, r3, #4
 800753c:	6022      	str	r2, [r4, #0]
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	9700      	str	r7, [sp, #0]
 8007544:	4633      	mov	r3, r6
 8007546:	aa0b      	add	r2, sp, #44	; 0x2c
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f9d8 	bl	8007900 <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	f040 8090 	bne.w	8007676 <_printf_float+0x1e2>
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	b00d      	add	sp, #52	; 0x34
 800755c:	ecbd 8b02 	vpop	{d8}
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 faf6 	bl	8000b5c <__aeabi_dcmpun>
 8007570:	b140      	cbz	r0, 8007584 <_printf_float+0xf0>
 8007572:	464b      	mov	r3, r9
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfbc      	itt	lt
 8007578:	232d      	movlt	r3, #45	; 0x2d
 800757a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800757e:	487f      	ldr	r0, [pc, #508]	; (800777c <_printf_float+0x2e8>)
 8007580:	4b7f      	ldr	r3, [pc, #508]	; (8007780 <_printf_float+0x2ec>)
 8007582:	e7d1      	b.n	8007528 <_printf_float+0x94>
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800758a:	9206      	str	r2, [sp, #24]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	d13f      	bne.n	8007610 <_printf_float+0x17c>
 8007590:	2306      	movs	r3, #6
 8007592:	6063      	str	r3, [r4, #4]
 8007594:	9b05      	ldr	r3, [sp, #20]
 8007596:	6861      	ldr	r1, [r4, #4]
 8007598:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800759c:	2300      	movs	r3, #0
 800759e:	9303      	str	r3, [sp, #12]
 80075a0:	ab0a      	add	r3, sp, #40	; 0x28
 80075a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075a6:	ab09      	add	r3, sp, #36	; 0x24
 80075a8:	ec49 8b10 	vmov	d0, r8, r9
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075b4:	4628      	mov	r0, r5
 80075b6:	f7ff fecd 	bl	8007354 <__cvt>
 80075ba:	9b06      	ldr	r3, [sp, #24]
 80075bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075be:	2b47      	cmp	r3, #71	; 0x47
 80075c0:	4680      	mov	r8, r0
 80075c2:	d108      	bne.n	80075d6 <_printf_float+0x142>
 80075c4:	1cc8      	adds	r0, r1, #3
 80075c6:	db02      	blt.n	80075ce <_printf_float+0x13a>
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	4299      	cmp	r1, r3
 80075cc:	dd41      	ble.n	8007652 <_printf_float+0x1be>
 80075ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80075d2:	fa5f fb8b 	uxtb.w	fp, fp
 80075d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075da:	d820      	bhi.n	800761e <_printf_float+0x18a>
 80075dc:	3901      	subs	r1, #1
 80075de:	465a      	mov	r2, fp
 80075e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075e4:	9109      	str	r1, [sp, #36]	; 0x24
 80075e6:	f7ff ff17 	bl	8007418 <__exponent>
 80075ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ec:	1813      	adds	r3, r2, r0
 80075ee:	2a01      	cmp	r2, #1
 80075f0:	4681      	mov	r9, r0
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	dc02      	bgt.n	80075fc <_printf_float+0x168>
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	07d2      	lsls	r2, r2, #31
 80075fa:	d501      	bpl.n	8007600 <_printf_float+0x16c>
 80075fc:	3301      	adds	r3, #1
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007604:	2b00      	cmp	r3, #0
 8007606:	d09c      	beq.n	8007542 <_printf_float+0xae>
 8007608:	232d      	movs	r3, #45	; 0x2d
 800760a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800760e:	e798      	b.n	8007542 <_printf_float+0xae>
 8007610:	9a06      	ldr	r2, [sp, #24]
 8007612:	2a47      	cmp	r2, #71	; 0x47
 8007614:	d1be      	bne.n	8007594 <_printf_float+0x100>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1bc      	bne.n	8007594 <_printf_float+0x100>
 800761a:	2301      	movs	r3, #1
 800761c:	e7b9      	b.n	8007592 <_printf_float+0xfe>
 800761e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007622:	d118      	bne.n	8007656 <_printf_float+0x1c2>
 8007624:	2900      	cmp	r1, #0
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	dd0b      	ble.n	8007642 <_printf_float+0x1ae>
 800762a:	6121      	str	r1, [r4, #16]
 800762c:	b913      	cbnz	r3, 8007634 <_printf_float+0x1a0>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	07d0      	lsls	r0, r2, #31
 8007632:	d502      	bpl.n	800763a <_printf_float+0x1a6>
 8007634:	3301      	adds	r3, #1
 8007636:	440b      	add	r3, r1
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	65a1      	str	r1, [r4, #88]	; 0x58
 800763c:	f04f 0900 	mov.w	r9, #0
 8007640:	e7de      	b.n	8007600 <_printf_float+0x16c>
 8007642:	b913      	cbnz	r3, 800764a <_printf_float+0x1b6>
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	07d2      	lsls	r2, r2, #31
 8007648:	d501      	bpl.n	800764e <_printf_float+0x1ba>
 800764a:	3302      	adds	r3, #2
 800764c:	e7f4      	b.n	8007638 <_printf_float+0x1a4>
 800764e:	2301      	movs	r3, #1
 8007650:	e7f2      	b.n	8007638 <_printf_float+0x1a4>
 8007652:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007658:	4299      	cmp	r1, r3
 800765a:	db05      	blt.n	8007668 <_printf_float+0x1d4>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	6121      	str	r1, [r4, #16]
 8007660:	07d8      	lsls	r0, r3, #31
 8007662:	d5ea      	bpl.n	800763a <_printf_float+0x1a6>
 8007664:	1c4b      	adds	r3, r1, #1
 8007666:	e7e7      	b.n	8007638 <_printf_float+0x1a4>
 8007668:	2900      	cmp	r1, #0
 800766a:	bfd4      	ite	le
 800766c:	f1c1 0202 	rsble	r2, r1, #2
 8007670:	2201      	movgt	r2, #1
 8007672:	4413      	add	r3, r2
 8007674:	e7e0      	b.n	8007638 <_printf_float+0x1a4>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	055a      	lsls	r2, r3, #21
 800767a:	d407      	bmi.n	800768c <_printf_float+0x1f8>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	4642      	mov	r2, r8
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	d12c      	bne.n	80076e4 <_printf_float+0x250>
 800768a:	e764      	b.n	8007556 <_printf_float+0xc2>
 800768c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007690:	f240 80e0 	bls.w	8007854 <_printf_float+0x3c0>
 8007694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f9 fa2c 	bl	8000af8 <__aeabi_dcmpeq>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d034      	beq.n	800770e <_printf_float+0x27a>
 80076a4:	4a37      	ldr	r2, [pc, #220]	; (8007784 <_printf_float+0x2f0>)
 80076a6:	2301      	movs	r3, #1
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	f43f af51 	beq.w	8007556 <_printf_float+0xc2>
 80076b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b8:	429a      	cmp	r2, r3
 80076ba:	db02      	blt.n	80076c2 <_printf_float+0x22e>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07d8      	lsls	r0, r3, #31
 80076c0:	d510      	bpl.n	80076e4 <_printf_float+0x250>
 80076c2:	ee18 3a10 	vmov	r3, s16
 80076c6:	4652      	mov	r2, sl
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f af41 	beq.w	8007556 <_printf_float+0xc2>
 80076d4:	f04f 0800 	mov.w	r8, #0
 80076d8:	f104 091a 	add.w	r9, r4, #26
 80076dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076de:	3b01      	subs	r3, #1
 80076e0:	4543      	cmp	r3, r8
 80076e2:	dc09      	bgt.n	80076f8 <_printf_float+0x264>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	079b      	lsls	r3, r3, #30
 80076e8:	f100 8105 	bmi.w	80078f6 <_printf_float+0x462>
 80076ec:	68e0      	ldr	r0, [r4, #12]
 80076ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f0:	4298      	cmp	r0, r3
 80076f2:	bfb8      	it	lt
 80076f4:	4618      	movlt	r0, r3
 80076f6:	e730      	b.n	800755a <_printf_float+0xc6>
 80076f8:	2301      	movs	r3, #1
 80076fa:	464a      	mov	r2, r9
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	f43f af27 	beq.w	8007556 <_printf_float+0xc2>
 8007708:	f108 0801 	add.w	r8, r8, #1
 800770c:	e7e6      	b.n	80076dc <_printf_float+0x248>
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	dc39      	bgt.n	8007788 <_printf_float+0x2f4>
 8007714:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <_printf_float+0x2f0>)
 8007716:	2301      	movs	r3, #1
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f af19 	beq.w	8007556 <_printf_float+0xc2>
 8007724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007728:	4313      	orrs	r3, r2
 800772a:	d102      	bne.n	8007732 <_printf_float+0x29e>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	d5d8      	bpl.n	80076e4 <_printf_float+0x250>
 8007732:	ee18 3a10 	vmov	r3, s16
 8007736:	4652      	mov	r2, sl
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f af09 	beq.w	8007556 <_printf_float+0xc2>
 8007744:	f04f 0900 	mov.w	r9, #0
 8007748:	f104 0a1a 	add.w	sl, r4, #26
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	425b      	negs	r3, r3
 8007750:	454b      	cmp	r3, r9
 8007752:	dc01      	bgt.n	8007758 <_printf_float+0x2c4>
 8007754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007756:	e792      	b.n	800767e <_printf_float+0x1ea>
 8007758:	2301      	movs	r3, #1
 800775a:	4652      	mov	r2, sl
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f aef7 	beq.w	8007556 <_printf_float+0xc2>
 8007768:	f109 0901 	add.w	r9, r9, #1
 800776c:	e7ee      	b.n	800774c <_printf_float+0x2b8>
 800776e:	bf00      	nop
 8007770:	7fefffff 	.word	0x7fefffff
 8007774:	08009f30 	.word	0x08009f30
 8007778:	08009f34 	.word	0x08009f34
 800777c:	08009f3c 	.word	0x08009f3c
 8007780:	08009f38 	.word	0x08009f38
 8007784:	08009f40 	.word	0x08009f40
 8007788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800778a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800778c:	429a      	cmp	r2, r3
 800778e:	bfa8      	it	ge
 8007790:	461a      	movge	r2, r3
 8007792:	2a00      	cmp	r2, #0
 8007794:	4691      	mov	r9, r2
 8007796:	dc37      	bgt.n	8007808 <_printf_float+0x374>
 8007798:	f04f 0b00 	mov.w	fp, #0
 800779c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077a0:	f104 021a 	add.w	r2, r4, #26
 80077a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	eba3 0309 	sub.w	r3, r3, r9
 80077ac:	455b      	cmp	r3, fp
 80077ae:	dc33      	bgt.n	8007818 <_printf_float+0x384>
 80077b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b4:	429a      	cmp	r2, r3
 80077b6:	db3b      	blt.n	8007830 <_printf_float+0x39c>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	07da      	lsls	r2, r3, #31
 80077bc:	d438      	bmi.n	8007830 <_printf_float+0x39c>
 80077be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c0:	9b05      	ldr	r3, [sp, #20]
 80077c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	eba2 0901 	sub.w	r9, r2, r1
 80077ca:	4599      	cmp	r9, r3
 80077cc:	bfa8      	it	ge
 80077ce:	4699      	movge	r9, r3
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	dc35      	bgt.n	8007842 <_printf_float+0x3ae>
 80077d6:	f04f 0800 	mov.w	r8, #0
 80077da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077de:	f104 0a1a 	add.w	sl, r4, #26
 80077e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	eba3 0309 	sub.w	r3, r3, r9
 80077ec:	4543      	cmp	r3, r8
 80077ee:	f77f af79 	ble.w	80076e4 <_printf_float+0x250>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f aeaa 	beq.w	8007556 <_printf_float+0xc2>
 8007802:	f108 0801 	add.w	r8, r8, #1
 8007806:	e7ec      	b.n	80077e2 <_printf_float+0x34e>
 8007808:	4613      	mov	r3, r2
 800780a:	4631      	mov	r1, r6
 800780c:	4642      	mov	r2, r8
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	d1c0      	bne.n	8007798 <_printf_float+0x304>
 8007816:	e69e      	b.n	8007556 <_printf_float+0xc2>
 8007818:	2301      	movs	r3, #1
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	9205      	str	r2, [sp, #20]
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f ae97 	beq.w	8007556 <_printf_float+0xc2>
 8007828:	9a05      	ldr	r2, [sp, #20]
 800782a:	f10b 0b01 	add.w	fp, fp, #1
 800782e:	e7b9      	b.n	80077a4 <_printf_float+0x310>
 8007830:	ee18 3a10 	vmov	r3, s16
 8007834:	4652      	mov	r2, sl
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	d1be      	bne.n	80077be <_printf_float+0x32a>
 8007840:	e689      	b.n	8007556 <_printf_float+0xc2>
 8007842:	9a05      	ldr	r2, [sp, #20]
 8007844:	464b      	mov	r3, r9
 8007846:	4442      	add	r2, r8
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	d1c1      	bne.n	80077d6 <_printf_float+0x342>
 8007852:	e680      	b.n	8007556 <_printf_float+0xc2>
 8007854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007856:	2a01      	cmp	r2, #1
 8007858:	dc01      	bgt.n	800785e <_printf_float+0x3ca>
 800785a:	07db      	lsls	r3, r3, #31
 800785c:	d538      	bpl.n	80078d0 <_printf_float+0x43c>
 800785e:	2301      	movs	r3, #1
 8007860:	4642      	mov	r2, r8
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae74 	beq.w	8007556 <_printf_float+0xc2>
 800786e:	ee18 3a10 	vmov	r3, s16
 8007872:	4652      	mov	r2, sl
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f ae6b 	beq.w	8007556 <_printf_float+0xc2>
 8007880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	f7f9 f936 	bl	8000af8 <__aeabi_dcmpeq>
 800788c:	b9d8      	cbnz	r0, 80078c6 <_printf_float+0x432>
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	f108 0201 	add.w	r2, r8, #1
 8007894:	3b01      	subs	r3, #1
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	d10e      	bne.n	80078be <_printf_float+0x42a>
 80078a0:	e659      	b.n	8007556 <_printf_float+0xc2>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4652      	mov	r2, sl
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae52 	beq.w	8007556 <_printf_float+0xc2>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4543      	cmp	r3, r8
 80078bc:	dcf1      	bgt.n	80078a2 <_printf_float+0x40e>
 80078be:	464b      	mov	r3, r9
 80078c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078c4:	e6dc      	b.n	8007680 <_printf_float+0x1ec>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	f104 0a1a 	add.w	sl, r4, #26
 80078ce:	e7f2      	b.n	80078b6 <_printf_float+0x422>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4642      	mov	r2, r8
 80078d4:	e7df      	b.n	8007896 <_printf_float+0x402>
 80078d6:	2301      	movs	r3, #1
 80078d8:	464a      	mov	r2, r9
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f ae38 	beq.w	8007556 <_printf_float+0xc2>
 80078e6:	f108 0801 	add.w	r8, r8, #1
 80078ea:	68e3      	ldr	r3, [r4, #12]
 80078ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ee:	1a5b      	subs	r3, r3, r1
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dcf0      	bgt.n	80078d6 <_printf_float+0x442>
 80078f4:	e6fa      	b.n	80076ec <_printf_float+0x258>
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	f104 0919 	add.w	r9, r4, #25
 80078fe:	e7f4      	b.n	80078ea <_printf_float+0x456>

08007900 <_printf_common>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	4616      	mov	r6, r2
 8007906:	4699      	mov	r9, r3
 8007908:	688a      	ldr	r2, [r1, #8]
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007910:	4293      	cmp	r3, r2
 8007912:	bfb8      	it	lt
 8007914:	4613      	movlt	r3, r2
 8007916:	6033      	str	r3, [r6, #0]
 8007918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800791c:	4607      	mov	r7, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b10a      	cbz	r2, 8007926 <_printf_common+0x26>
 8007922:	3301      	adds	r3, #1
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0699      	lsls	r1, r3, #26
 800792a:	bf42      	ittt	mi
 800792c:	6833      	ldrmi	r3, [r6, #0]
 800792e:	3302      	addmi	r3, #2
 8007930:	6033      	strmi	r3, [r6, #0]
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	f015 0506 	ands.w	r5, r5, #6
 8007938:	d106      	bne.n	8007948 <_printf_common+0x48>
 800793a:	f104 0a19 	add.w	sl, r4, #25
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc26      	bgt.n	8007996 <_printf_common+0x96>
 8007948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800794c:	1e13      	subs	r3, r2, #0
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	2301      	movne	r3, #1
 8007954:	0692      	lsls	r2, r2, #26
 8007956:	d42b      	bmi.n	80079b0 <_printf_common+0xb0>
 8007958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800795c:	4649      	mov	r1, r9
 800795e:	4638      	mov	r0, r7
 8007960:	47c0      	blx	r8
 8007962:	3001      	adds	r0, #1
 8007964:	d01e      	beq.n	80079a4 <_printf_common+0xa4>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	68e5      	ldr	r5, [r4, #12]
 800796a:	6832      	ldr	r2, [r6, #0]
 800796c:	f003 0306 	and.w	r3, r3, #6
 8007970:	2b04      	cmp	r3, #4
 8007972:	bf08      	it	eq
 8007974:	1aad      	subeq	r5, r5, r2
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	bf0c      	ite	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	2500      	movne	r5, #0
 8007982:	4293      	cmp	r3, r2
 8007984:	bfc4      	itt	gt
 8007986:	1a9b      	subgt	r3, r3, r2
 8007988:	18ed      	addgt	r5, r5, r3
 800798a:	2600      	movs	r6, #0
 800798c:	341a      	adds	r4, #26
 800798e:	42b5      	cmp	r5, r6
 8007990:	d11a      	bne.n	80079c8 <_printf_common+0xc8>
 8007992:	2000      	movs	r0, #0
 8007994:	e008      	b.n	80079a8 <_printf_common+0xa8>
 8007996:	2301      	movs	r3, #1
 8007998:	4652      	mov	r2, sl
 800799a:	4649      	mov	r1, r9
 800799c:	4638      	mov	r0, r7
 800799e:	47c0      	blx	r8
 80079a0:	3001      	adds	r0, #1
 80079a2:	d103      	bne.n	80079ac <_printf_common+0xac>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	3501      	adds	r5, #1
 80079ae:	e7c6      	b.n	800793e <_printf_common+0x3e>
 80079b0:	18e1      	adds	r1, r4, r3
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	2030      	movs	r0, #48	; 0x30
 80079b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ba:	4422      	add	r2, r4
 80079bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c4:	3302      	adds	r3, #2
 80079c6:	e7c7      	b.n	8007958 <_printf_common+0x58>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	4649      	mov	r1, r9
 80079ce:	4638      	mov	r0, r7
 80079d0:	47c0      	blx	r8
 80079d2:	3001      	adds	r0, #1
 80079d4:	d0e6      	beq.n	80079a4 <_printf_common+0xa4>
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7d9      	b.n	800798e <_printf_common+0x8e>
	...

080079dc <_printf_i>:
 80079dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	460c      	mov	r4, r1
 80079e2:	4691      	mov	r9, r2
 80079e4:	7e27      	ldrb	r7, [r4, #24]
 80079e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079e8:	2f78      	cmp	r7, #120	; 0x78
 80079ea:	4680      	mov	r8, r0
 80079ec:	469a      	mov	sl, r3
 80079ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f2:	d807      	bhi.n	8007a04 <_printf_i+0x28>
 80079f4:	2f62      	cmp	r7, #98	; 0x62
 80079f6:	d80a      	bhi.n	8007a0e <_printf_i+0x32>
 80079f8:	2f00      	cmp	r7, #0
 80079fa:	f000 80d8 	beq.w	8007bae <_printf_i+0x1d2>
 80079fe:	2f58      	cmp	r7, #88	; 0x58
 8007a00:	f000 80a3 	beq.w	8007b4a <_printf_i+0x16e>
 8007a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a0c:	e03a      	b.n	8007a84 <_printf_i+0xa8>
 8007a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a12:	2b15      	cmp	r3, #21
 8007a14:	d8f6      	bhi.n	8007a04 <_printf_i+0x28>
 8007a16:	a001      	add	r0, pc, #4	; (adr r0, 8007a1c <_printf_i+0x40>)
 8007a18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007a05 	.word	0x08007a05
 8007a28:	08007a05 	.word	0x08007a05
 8007a2c:	08007a05 	.word	0x08007a05
 8007a30:	08007a05 	.word	0x08007a05
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a05 	.word	0x08007a05
 8007a3c:	08007a05 	.word	0x08007a05
 8007a40:	08007a05 	.word	0x08007a05
 8007a44:	08007a05 	.word	0x08007a05
 8007a48:	08007b95 	.word	0x08007b95
 8007a4c:	08007ab9 	.word	0x08007ab9
 8007a50:	08007b77 	.word	0x08007b77
 8007a54:	08007a05 	.word	0x08007a05
 8007a58:	08007a05 	.word	0x08007a05
 8007a5c:	08007bb7 	.word	0x08007bb7
 8007a60:	08007a05 	.word	0x08007a05
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007a05 	.word	0x08007a05
 8007a6c:	08007a05 	.word	0x08007a05
 8007a70:	08007b7f 	.word	0x08007b7f
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	600a      	str	r2, [r1, #0]
 8007a7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0a3      	b.n	8007bd0 <_printf_i+0x1f4>
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	6808      	ldr	r0, [r1, #0]
 8007a8c:	062e      	lsls	r6, r5, #24
 8007a8e:	f100 0304 	add.w	r3, r0, #4
 8007a92:	d50a      	bpl.n	8007aaa <_printf_i+0xce>
 8007a94:	6805      	ldr	r5, [r0, #0]
 8007a96:	600b      	str	r3, [r1, #0]
 8007a98:	2d00      	cmp	r5, #0
 8007a9a:	da03      	bge.n	8007aa4 <_printf_i+0xc8>
 8007a9c:	232d      	movs	r3, #45	; 0x2d
 8007a9e:	426d      	negs	r5, r5
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	485e      	ldr	r0, [pc, #376]	; (8007c20 <_printf_i+0x244>)
 8007aa6:	230a      	movs	r3, #10
 8007aa8:	e019      	b.n	8007ade <_printf_i+0x102>
 8007aaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007aae:	6805      	ldr	r5, [r0, #0]
 8007ab0:	600b      	str	r3, [r1, #0]
 8007ab2:	bf18      	it	ne
 8007ab4:	b22d      	sxthne	r5, r5
 8007ab6:	e7ef      	b.n	8007a98 <_printf_i+0xbc>
 8007ab8:	680b      	ldr	r3, [r1, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	1d18      	adds	r0, r3, #4
 8007abe:	6008      	str	r0, [r1, #0]
 8007ac0:	0628      	lsls	r0, r5, #24
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_i+0xec>
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <_printf_i+0xf2>
 8007ac8:	0669      	lsls	r1, r5, #25
 8007aca:	d5fb      	bpl.n	8007ac4 <_printf_i+0xe8>
 8007acc:	881d      	ldrh	r5, [r3, #0]
 8007ace:	4854      	ldr	r0, [pc, #336]	; (8007c20 <_printf_i+0x244>)
 8007ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2308      	moveq	r3, #8
 8007ad6:	230a      	movne	r3, #10
 8007ad8:	2100      	movs	r1, #0
 8007ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ade:	6866      	ldr	r6, [r4, #4]
 8007ae0:	60a6      	str	r6, [r4, #8]
 8007ae2:	2e00      	cmp	r6, #0
 8007ae4:	bfa2      	ittt	ge
 8007ae6:	6821      	ldrge	r1, [r4, #0]
 8007ae8:	f021 0104 	bicge.w	r1, r1, #4
 8007aec:	6021      	strge	r1, [r4, #0]
 8007aee:	b90d      	cbnz	r5, 8007af4 <_printf_i+0x118>
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	d04d      	beq.n	8007b90 <_printf_i+0x1b4>
 8007af4:	4616      	mov	r6, r2
 8007af6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007afa:	fb03 5711 	mls	r7, r3, r1, r5
 8007afe:	5dc7      	ldrb	r7, [r0, r7]
 8007b00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b04:	462f      	mov	r7, r5
 8007b06:	42bb      	cmp	r3, r7
 8007b08:	460d      	mov	r5, r1
 8007b0a:	d9f4      	bls.n	8007af6 <_printf_i+0x11a>
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d10b      	bne.n	8007b28 <_printf_i+0x14c>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	07df      	lsls	r7, r3, #31
 8007b14:	d508      	bpl.n	8007b28 <_printf_i+0x14c>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	6861      	ldr	r1, [r4, #4]
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	bfde      	ittt	le
 8007b1e:	2330      	movle	r3, #48	; 0x30
 8007b20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b28:	1b92      	subs	r2, r2, r6
 8007b2a:	6122      	str	r2, [r4, #16]
 8007b2c:	f8cd a000 	str.w	sl, [sp]
 8007b30:	464b      	mov	r3, r9
 8007b32:	aa03      	add	r2, sp, #12
 8007b34:	4621      	mov	r1, r4
 8007b36:	4640      	mov	r0, r8
 8007b38:	f7ff fee2 	bl	8007900 <_printf_common>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d14c      	bne.n	8007bda <_printf_i+0x1fe>
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	b004      	add	sp, #16
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4a:	4835      	ldr	r0, [pc, #212]	; (8007c20 <_printf_i+0x244>)
 8007b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	680e      	ldr	r6, [r1, #0]
 8007b54:	061f      	lsls	r7, r3, #24
 8007b56:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b5a:	600e      	str	r6, [r1, #0]
 8007b5c:	d514      	bpl.n	8007b88 <_printf_i+0x1ac>
 8007b5e:	07d9      	lsls	r1, r3, #31
 8007b60:	bf44      	itt	mi
 8007b62:	f043 0320 	orrmi.w	r3, r3, #32
 8007b66:	6023      	strmi	r3, [r4, #0]
 8007b68:	b91d      	cbnz	r5, 8007b72 <_printf_i+0x196>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f023 0320 	bic.w	r3, r3, #32
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	2310      	movs	r3, #16
 8007b74:	e7b0      	b.n	8007ad8 <_printf_i+0xfc>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	f043 0320 	orr.w	r3, r3, #32
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	2378      	movs	r3, #120	; 0x78
 8007b80:	4828      	ldr	r0, [pc, #160]	; (8007c24 <_printf_i+0x248>)
 8007b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b86:	e7e3      	b.n	8007b50 <_printf_i+0x174>
 8007b88:	065e      	lsls	r6, r3, #25
 8007b8a:	bf48      	it	mi
 8007b8c:	b2ad      	uxthmi	r5, r5
 8007b8e:	e7e6      	b.n	8007b5e <_printf_i+0x182>
 8007b90:	4616      	mov	r6, r2
 8007b92:	e7bb      	b.n	8007b0c <_printf_i+0x130>
 8007b94:	680b      	ldr	r3, [r1, #0]
 8007b96:	6826      	ldr	r6, [r4, #0]
 8007b98:	6960      	ldr	r0, [r4, #20]
 8007b9a:	1d1d      	adds	r5, r3, #4
 8007b9c:	600d      	str	r5, [r1, #0]
 8007b9e:	0635      	lsls	r5, r6, #24
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	d501      	bpl.n	8007ba8 <_printf_i+0x1cc>
 8007ba4:	6018      	str	r0, [r3, #0]
 8007ba6:	e002      	b.n	8007bae <_printf_i+0x1d2>
 8007ba8:	0671      	lsls	r1, r6, #25
 8007baa:	d5fb      	bpl.n	8007ba4 <_printf_i+0x1c8>
 8007bac:	8018      	strh	r0, [r3, #0]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	4616      	mov	r6, r2
 8007bb4:	e7ba      	b.n	8007b2c <_printf_i+0x150>
 8007bb6:	680b      	ldr	r3, [r1, #0]
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	600a      	str	r2, [r1, #0]
 8007bbc:	681e      	ldr	r6, [r3, #0]
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f7f8 fb24 	bl	8000210 <memchr>
 8007bc8:	b108      	cbz	r0, 8007bce <_printf_i+0x1f2>
 8007bca:	1b80      	subs	r0, r0, r6
 8007bcc:	6060      	str	r0, [r4, #4]
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd8:	e7a8      	b.n	8007b2c <_printf_i+0x150>
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4649      	mov	r1, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	47d0      	blx	sl
 8007be4:	3001      	adds	r0, #1
 8007be6:	d0ab      	beq.n	8007b40 <_printf_i+0x164>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	079b      	lsls	r3, r3, #30
 8007bec:	d413      	bmi.n	8007c16 <_printf_i+0x23a>
 8007bee:	68e0      	ldr	r0, [r4, #12]
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	4298      	cmp	r0, r3
 8007bf4:	bfb8      	it	lt
 8007bf6:	4618      	movlt	r0, r3
 8007bf8:	e7a4      	b.n	8007b44 <_printf_i+0x168>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	47d0      	blx	sl
 8007c04:	3001      	adds	r0, #1
 8007c06:	d09b      	beq.n	8007b40 <_printf_i+0x164>
 8007c08:	3501      	adds	r5, #1
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	9903      	ldr	r1, [sp, #12]
 8007c0e:	1a5b      	subs	r3, r3, r1
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dcf2      	bgt.n	8007bfa <_printf_i+0x21e>
 8007c14:	e7eb      	b.n	8007bee <_printf_i+0x212>
 8007c16:	2500      	movs	r5, #0
 8007c18:	f104 0619 	add.w	r6, r4, #25
 8007c1c:	e7f5      	b.n	8007c0a <_printf_i+0x22e>
 8007c1e:	bf00      	nop
 8007c20:	08009f42 	.word	0x08009f42
 8007c24:	08009f53 	.word	0x08009f53

08007c28 <iprintf>:
 8007c28:	b40f      	push	{r0, r1, r2, r3}
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <iprintf+0x2c>)
 8007c2c:	b513      	push	{r0, r1, r4, lr}
 8007c2e:	681c      	ldr	r4, [r3, #0]
 8007c30:	b124      	cbz	r4, 8007c3c <iprintf+0x14>
 8007c32:	69a3      	ldr	r3, [r4, #24]
 8007c34:	b913      	cbnz	r3, 8007c3c <iprintf+0x14>
 8007c36:	4620      	mov	r0, r4
 8007c38:	f001 f8d8 	bl	8008dec <__sinit>
 8007c3c:	ab05      	add	r3, sp, #20
 8007c3e:	9a04      	ldr	r2, [sp, #16]
 8007c40:	68a1      	ldr	r1, [r4, #8]
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fe53 	bl	80098f0 <_vfiprintf_r>
 8007c4a:	b002      	add	sp, #8
 8007c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c50:	b004      	add	sp, #16
 8007c52:	4770      	bx	lr
 8007c54:	20000018 	.word	0x20000018

08007c58 <_puts_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b118      	cbz	r0, 8007c68 <_puts_r+0x10>
 8007c60:	6983      	ldr	r3, [r0, #24]
 8007c62:	b90b      	cbnz	r3, 8007c68 <_puts_r+0x10>
 8007c64:	f001 f8c2 	bl	8008dec <__sinit>
 8007c68:	69ab      	ldr	r3, [r5, #24]
 8007c6a:	68ac      	ldr	r4, [r5, #8]
 8007c6c:	b913      	cbnz	r3, 8007c74 <_puts_r+0x1c>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f001 f8bc 	bl	8008dec <__sinit>
 8007c74:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <_puts_r+0xd0>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d120      	bne.n	8007cbc <_puts_r+0x64>
 8007c7a:	686c      	ldr	r4, [r5, #4]
 8007c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_puts_r+0x36>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	0598      	lsls	r0, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_puts_r+0x36>
 8007c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8a:	f001 f952 	bl	8008f32 <__retarget_lock_acquire_recursive>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0719      	lsls	r1, r3, #28
 8007c92:	d51d      	bpl.n	8007cd0 <_puts_r+0x78>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	b1db      	cbz	r3, 8007cd0 <_puts_r+0x78>
 8007c98:	3e01      	subs	r6, #1
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	bb39      	cbnz	r1, 8007cf6 <_puts_r+0x9e>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da38      	bge.n	8007d1c <_puts_r+0xc4>
 8007caa:	4622      	mov	r2, r4
 8007cac:	210a      	movs	r1, #10
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 f848 	bl	8007d44 <__swbuf_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d011      	beq.n	8007cdc <_puts_r+0x84>
 8007cb8:	250a      	movs	r5, #10
 8007cba:	e011      	b.n	8007ce0 <_puts_r+0x88>
 8007cbc:	4b1b      	ldr	r3, [pc, #108]	; (8007d2c <_puts_r+0xd4>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d101      	bne.n	8007cc6 <_puts_r+0x6e>
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	e7da      	b.n	8007c7c <_puts_r+0x24>
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <_puts_r+0xd8>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	bf08      	it	eq
 8007ccc:	68ec      	ldreq	r4, [r5, #12]
 8007cce:	e7d5      	b.n	8007c7c <_puts_r+0x24>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f888 	bl	8007de8 <__swsetup_r>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0dd      	beq.n	8007c98 <_puts_r+0x40>
 8007cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8007ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <_puts_r+0x9a>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_puts_r+0x9a>
 8007cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cee:	f001 f921 	bl	8008f34 <__retarget_lock_release_recursive>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da04      	bge.n	8007d04 <_puts_r+0xac>
 8007cfa:	69a2      	ldr	r2, [r4, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	dc06      	bgt.n	8007d0e <_puts_r+0xb6>
 8007d00:	290a      	cmp	r1, #10
 8007d02:	d004      	beq.n	8007d0e <_puts_r+0xb6>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	e7c5      	b.n	8007c9a <_puts_r+0x42>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f817 	bl	8007d44 <__swbuf_r>
 8007d16:	3001      	adds	r0, #1
 8007d18:	d1bf      	bne.n	8007c9a <_puts_r+0x42>
 8007d1a:	e7df      	b.n	8007cdc <_puts_r+0x84>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	250a      	movs	r5, #10
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	6022      	str	r2, [r4, #0]
 8007d24:	701d      	strb	r5, [r3, #0]
 8007d26:	e7db      	b.n	8007ce0 <_puts_r+0x88>
 8007d28:	0800a018 	.word	0x0800a018
 8007d2c:	0800a038 	.word	0x0800a038
 8007d30:	08009ff8 	.word	0x08009ff8

08007d34 <puts>:
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <puts+0xc>)
 8007d36:	4601      	mov	r1, r0
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	f7ff bf8d 	b.w	8007c58 <_puts_r>
 8007d3e:	bf00      	nop
 8007d40:	20000018 	.word	0x20000018

08007d44 <__swbuf_r>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	460e      	mov	r6, r1
 8007d48:	4614      	mov	r4, r2
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	b118      	cbz	r0, 8007d56 <__swbuf_r+0x12>
 8007d4e:	6983      	ldr	r3, [r0, #24]
 8007d50:	b90b      	cbnz	r3, 8007d56 <__swbuf_r+0x12>
 8007d52:	f001 f84b 	bl	8008dec <__sinit>
 8007d56:	4b21      	ldr	r3, [pc, #132]	; (8007ddc <__swbuf_r+0x98>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	d12b      	bne.n	8007db4 <__swbuf_r+0x70>
 8007d5c:	686c      	ldr	r4, [r5, #4]
 8007d5e:	69a3      	ldr	r3, [r4, #24]
 8007d60:	60a3      	str	r3, [r4, #8]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	071a      	lsls	r2, r3, #28
 8007d66:	d52f      	bpl.n	8007dc8 <__swbuf_r+0x84>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	b36b      	cbz	r3, 8007dc8 <__swbuf_r+0x84>
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1ac0      	subs	r0, r0, r3
 8007d72:	6963      	ldr	r3, [r4, #20]
 8007d74:	b2f6      	uxtb	r6, r6
 8007d76:	4283      	cmp	r3, r0
 8007d78:	4637      	mov	r7, r6
 8007d7a:	dc04      	bgt.n	8007d86 <__swbuf_r+0x42>
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f000 ffa0 	bl	8008cc4 <_fflush_r>
 8007d84:	bb30      	cbnz	r0, 8007dd4 <__swbuf_r+0x90>
 8007d86:	68a3      	ldr	r3, [r4, #8]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	60a3      	str	r3, [r4, #8]
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	6022      	str	r2, [r4, #0]
 8007d92:	701e      	strb	r6, [r3, #0]
 8007d94:	6963      	ldr	r3, [r4, #20]
 8007d96:	3001      	adds	r0, #1
 8007d98:	4283      	cmp	r3, r0
 8007d9a:	d004      	beq.n	8007da6 <__swbuf_r+0x62>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	07db      	lsls	r3, r3, #31
 8007da0:	d506      	bpl.n	8007db0 <__swbuf_r+0x6c>
 8007da2:	2e0a      	cmp	r6, #10
 8007da4:	d104      	bne.n	8007db0 <__swbuf_r+0x6c>
 8007da6:	4621      	mov	r1, r4
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 ff8b 	bl	8008cc4 <_fflush_r>
 8007dae:	b988      	cbnz	r0, 8007dd4 <__swbuf_r+0x90>
 8007db0:	4638      	mov	r0, r7
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <__swbuf_r+0x9c>)
 8007db6:	429c      	cmp	r4, r3
 8007db8:	d101      	bne.n	8007dbe <__swbuf_r+0x7a>
 8007dba:	68ac      	ldr	r4, [r5, #8]
 8007dbc:	e7cf      	b.n	8007d5e <__swbuf_r+0x1a>
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <__swbuf_r+0xa0>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	bf08      	it	eq
 8007dc4:	68ec      	ldreq	r4, [r5, #12]
 8007dc6:	e7ca      	b.n	8007d5e <__swbuf_r+0x1a>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f80c 	bl	8007de8 <__swsetup_r>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d0cb      	beq.n	8007d6c <__swbuf_r+0x28>
 8007dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8007dd8:	e7ea      	b.n	8007db0 <__swbuf_r+0x6c>
 8007dda:	bf00      	nop
 8007ddc:	0800a018 	.word	0x0800a018
 8007de0:	0800a038 	.word	0x0800a038
 8007de4:	08009ff8 	.word	0x08009ff8

08007de8 <__swsetup_r>:
 8007de8:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <__swsetup_r+0xcc>)
 8007dea:	b570      	push	{r4, r5, r6, lr}
 8007dec:	681d      	ldr	r5, [r3, #0]
 8007dee:	4606      	mov	r6, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	b125      	cbz	r5, 8007dfe <__swsetup_r+0x16>
 8007df4:	69ab      	ldr	r3, [r5, #24]
 8007df6:	b913      	cbnz	r3, 8007dfe <__swsetup_r+0x16>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fff7 	bl	8008dec <__sinit>
 8007dfe:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <__swsetup_r+0xd0>)
 8007e00:	429c      	cmp	r4, r3
 8007e02:	d10f      	bne.n	8007e24 <__swsetup_r+0x3c>
 8007e04:	686c      	ldr	r4, [r5, #4]
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e0c:	0719      	lsls	r1, r3, #28
 8007e0e:	d42c      	bmi.n	8007e6a <__swsetup_r+0x82>
 8007e10:	06dd      	lsls	r5, r3, #27
 8007e12:	d411      	bmi.n	8007e38 <__swsetup_r+0x50>
 8007e14:	2309      	movs	r3, #9
 8007e16:	6033      	str	r3, [r6, #0]
 8007e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	e03e      	b.n	8007ea2 <__swsetup_r+0xba>
 8007e24:	4b25      	ldr	r3, [pc, #148]	; (8007ebc <__swsetup_r+0xd4>)
 8007e26:	429c      	cmp	r4, r3
 8007e28:	d101      	bne.n	8007e2e <__swsetup_r+0x46>
 8007e2a:	68ac      	ldr	r4, [r5, #8]
 8007e2c:	e7eb      	b.n	8007e06 <__swsetup_r+0x1e>
 8007e2e:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <__swsetup_r+0xd8>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	bf08      	it	eq
 8007e34:	68ec      	ldreq	r4, [r5, #12]
 8007e36:	e7e6      	b.n	8007e06 <__swsetup_r+0x1e>
 8007e38:	0758      	lsls	r0, r3, #29
 8007e3a:	d512      	bpl.n	8007e62 <__swsetup_r+0x7a>
 8007e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3e:	b141      	cbz	r1, 8007e52 <__swsetup_r+0x6a>
 8007e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e44:	4299      	cmp	r1, r3
 8007e46:	d002      	beq.n	8007e4e <__swsetup_r+0x66>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f001 fc7d 	bl	8009748 <_free_r>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6363      	str	r3, [r4, #52]	; 0x34
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6063      	str	r3, [r4, #4]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f043 0308 	orr.w	r3, r3, #8
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	b94b      	cbnz	r3, 8007e82 <__swsetup_r+0x9a>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e78:	d003      	beq.n	8007e82 <__swsetup_r+0x9a>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f001 f87f 	bl	8008f80 <__smakebuf_r>
 8007e82:	89a0      	ldrh	r0, [r4, #12]
 8007e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e88:	f010 0301 	ands.w	r3, r0, #1
 8007e8c:	d00a      	beq.n	8007ea4 <__swsetup_r+0xbc>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	6963      	ldr	r3, [r4, #20]
 8007e94:	425b      	negs	r3, r3
 8007e96:	61a3      	str	r3, [r4, #24]
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b943      	cbnz	r3, 8007eae <__swsetup_r+0xc6>
 8007e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ea0:	d1ba      	bne.n	8007e18 <__swsetup_r+0x30>
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
 8007ea4:	0781      	lsls	r1, r0, #30
 8007ea6:	bf58      	it	pl
 8007ea8:	6963      	ldrpl	r3, [r4, #20]
 8007eaa:	60a3      	str	r3, [r4, #8]
 8007eac:	e7f4      	b.n	8007e98 <__swsetup_r+0xb0>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e7f7      	b.n	8007ea2 <__swsetup_r+0xba>
 8007eb2:	bf00      	nop
 8007eb4:	20000018 	.word	0x20000018
 8007eb8:	0800a018 	.word	0x0800a018
 8007ebc:	0800a038 	.word	0x0800a038
 8007ec0:	08009ff8 	.word	0x08009ff8

08007ec4 <quorem>:
 8007ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	6903      	ldr	r3, [r0, #16]
 8007eca:	690c      	ldr	r4, [r1, #16]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f2c0 8081 	blt.w	8007fd6 <quorem+0x112>
 8007ed4:	3c01      	subs	r4, #1
 8007ed6:	f101 0814 	add.w	r8, r1, #20
 8007eda:	f100 0514 	add.w	r5, r0, #20
 8007ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eec:	3301      	adds	r3, #1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007efc:	d331      	bcc.n	8007f62 <quorem+0x9e>
 8007efe:	f04f 0e00 	mov.w	lr, #0
 8007f02:	4640      	mov	r0, r8
 8007f04:	46ac      	mov	ip, r5
 8007f06:	46f2      	mov	sl, lr
 8007f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f0c:	b293      	uxth	r3, r2
 8007f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8007f12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ebaa 0303 	sub.w	r3, sl, r3
 8007f1c:	0c12      	lsrs	r2, r2, #16
 8007f1e:	f8dc a000 	ldr.w	sl, [ip]
 8007f22:	fb06 e202 	mla	r2, r6, r2, lr
 8007f26:	fa13 f38a 	uxtah	r3, r3, sl
 8007f2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f2e:	fa1f fa82 	uxth.w	sl, r2
 8007f32:	f8dc 2000 	ldr.w	r2, [ip]
 8007f36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f44:	4581      	cmp	r9, r0
 8007f46:	f84c 3b04 	str.w	r3, [ip], #4
 8007f4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f4e:	d2db      	bcs.n	8007f08 <quorem+0x44>
 8007f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f54:	b92b      	cbnz	r3, 8007f62 <quorem+0x9e>
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	429d      	cmp	r5, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	d32e      	bcc.n	8007fbe <quorem+0xfa>
 8007f60:	613c      	str	r4, [r7, #16]
 8007f62:	4638      	mov	r0, r7
 8007f64:	f001 fae0 	bl	8009528 <__mcmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	db24      	blt.n	8007fb6 <quorem+0xf2>
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f04f 0c00 	mov.w	ip, #0
 8007f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f78:	f8d0 e000 	ldr.w	lr, [r0]
 8007f7c:	b293      	uxth	r3, r2
 8007f7e:	ebac 0303 	sub.w	r3, ip, r3
 8007f82:	0c12      	lsrs	r2, r2, #16
 8007f84:	fa13 f38e 	uxtah	r3, r3, lr
 8007f88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f96:	45c1      	cmp	r9, r8
 8007f98:	f840 3b04 	str.w	r3, [r0], #4
 8007f9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fa0:	d2e8      	bcs.n	8007f74 <quorem+0xb0>
 8007fa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007faa:	b922      	cbnz	r2, 8007fb6 <quorem+0xf2>
 8007fac:	3b04      	subs	r3, #4
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	d30a      	bcc.n	8007fca <quorem+0x106>
 8007fb4:	613c      	str	r4, [r7, #16]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	b003      	add	sp, #12
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1cc      	bne.n	8007f60 <quorem+0x9c>
 8007fc6:	3c01      	subs	r4, #1
 8007fc8:	e7c7      	b.n	8007f5a <quorem+0x96>
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	3b04      	subs	r3, #4
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d1f0      	bne.n	8007fb4 <quorem+0xf0>
 8007fd2:	3c01      	subs	r4, #1
 8007fd4:	e7eb      	b.n	8007fae <quorem+0xea>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e7ee      	b.n	8007fb8 <quorem+0xf4>
 8007fda:	0000      	movs	r0, r0
 8007fdc:	0000      	movs	r0, r0
	...

08007fe0 <_dtoa_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	ed2d 8b02 	vpush	{d8}
 8007fe8:	ec57 6b10 	vmov	r6, r7, d0
 8007fec:	b095      	sub	sp, #84	; 0x54
 8007fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ff4:	9105      	str	r1, [sp, #20]
 8007ff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008000:	b975      	cbnz	r5, 8008020 <_dtoa_r+0x40>
 8008002:	2010      	movs	r0, #16
 8008004:	f000 fffc 	bl	8009000 <malloc>
 8008008:	4602      	mov	r2, r0
 800800a:	6260      	str	r0, [r4, #36]	; 0x24
 800800c:	b920      	cbnz	r0, 8008018 <_dtoa_r+0x38>
 800800e:	4bb2      	ldr	r3, [pc, #712]	; (80082d8 <_dtoa_r+0x2f8>)
 8008010:	21ea      	movs	r1, #234	; 0xea
 8008012:	48b2      	ldr	r0, [pc, #712]	; (80082dc <_dtoa_r+0x2fc>)
 8008014:	f001 fe02 	bl	8009c1c <__assert_func>
 8008018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800801c:	6005      	str	r5, [r0, #0]
 800801e:	60c5      	str	r5, [r0, #12]
 8008020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	b151      	cbz	r1, 800803c <_dtoa_r+0x5c>
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	604a      	str	r2, [r1, #4]
 800802a:	2301      	movs	r3, #1
 800802c:	4093      	lsls	r3, r2
 800802e:	608b      	str	r3, [r1, #8]
 8008030:	4620      	mov	r0, r4
 8008032:	f001 f83b 	bl	80090ac <_Bfree>
 8008036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	1e3b      	subs	r3, r7, #0
 800803e:	bfb9      	ittee	lt
 8008040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008044:	9303      	strlt	r3, [sp, #12]
 8008046:	2300      	movge	r3, #0
 8008048:	f8c8 3000 	strge.w	r3, [r8]
 800804c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008050:	4ba3      	ldr	r3, [pc, #652]	; (80082e0 <_dtoa_r+0x300>)
 8008052:	bfbc      	itt	lt
 8008054:	2201      	movlt	r2, #1
 8008056:	f8c8 2000 	strlt.w	r2, [r8]
 800805a:	ea33 0309 	bics.w	r3, r3, r9
 800805e:	d11b      	bne.n	8008098 <_dtoa_r+0xb8>
 8008060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008062:	f242 730f 	movw	r3, #9999	; 0x270f
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800806c:	4333      	orrs	r3, r6
 800806e:	f000 857a 	beq.w	8008b66 <_dtoa_r+0xb86>
 8008072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008074:	b963      	cbnz	r3, 8008090 <_dtoa_r+0xb0>
 8008076:	4b9b      	ldr	r3, [pc, #620]	; (80082e4 <_dtoa_r+0x304>)
 8008078:	e024      	b.n	80080c4 <_dtoa_r+0xe4>
 800807a:	4b9b      	ldr	r3, [pc, #620]	; (80082e8 <_dtoa_r+0x308>)
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	9800      	ldr	r0, [sp, #0]
 8008086:	b015      	add	sp, #84	; 0x54
 8008088:	ecbd 8b02 	vpop	{d8}
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	4b94      	ldr	r3, [pc, #592]	; (80082e4 <_dtoa_r+0x304>)
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	3303      	adds	r3, #3
 8008096:	e7f3      	b.n	8008080 <_dtoa_r+0xa0>
 8008098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	ec51 0b17 	vmov	r0, r1, d7
 80080a2:	2300      	movs	r3, #0
 80080a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80080a8:	f7f8 fd26 	bl	8000af8 <__aeabi_dcmpeq>
 80080ac:	4680      	mov	r8, r0
 80080ae:	b158      	cbz	r0, 80080c8 <_dtoa_r+0xe8>
 80080b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080b2:	2301      	movs	r3, #1
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8551 	beq.w	8008b60 <_dtoa_r+0xb80>
 80080be:	488b      	ldr	r0, [pc, #556]	; (80082ec <_dtoa_r+0x30c>)
 80080c0:	6018      	str	r0, [r3, #0]
 80080c2:	1e43      	subs	r3, r0, #1
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	e7dd      	b.n	8008084 <_dtoa_r+0xa4>
 80080c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80080cc:	aa12      	add	r2, sp, #72	; 0x48
 80080ce:	a913      	add	r1, sp, #76	; 0x4c
 80080d0:	4620      	mov	r0, r4
 80080d2:	f001 facd 	bl	8009670 <__d2b>
 80080d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080da:	4683      	mov	fp, r0
 80080dc:	2d00      	cmp	r5, #0
 80080de:	d07c      	beq.n	80081da <_dtoa_r+0x1fa>
 80080e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80080e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80080ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080fa:	4b7d      	ldr	r3, [pc, #500]	; (80082f0 <_dtoa_r+0x310>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	4630      	mov	r0, r6
 8008100:	4639      	mov	r1, r7
 8008102:	f7f8 f8d9 	bl	80002b8 <__aeabi_dsub>
 8008106:	a36e      	add	r3, pc, #440	; (adr r3, 80082c0 <_dtoa_r+0x2e0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 fa8c 	bl	8000628 <__aeabi_dmul>
 8008110:	a36d      	add	r3, pc, #436	; (adr r3, 80082c8 <_dtoa_r+0x2e8>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 f8d1 	bl	80002bc <__adddf3>
 800811a:	4606      	mov	r6, r0
 800811c:	4628      	mov	r0, r5
 800811e:	460f      	mov	r7, r1
 8008120:	f7f8 fa18 	bl	8000554 <__aeabi_i2d>
 8008124:	a36a      	add	r3, pc, #424	; (adr r3, 80082d0 <_dtoa_r+0x2f0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 fa7d 	bl	8000628 <__aeabi_dmul>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4630      	mov	r0, r6
 8008134:	4639      	mov	r1, r7
 8008136:	f7f8 f8c1 	bl	80002bc <__adddf3>
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f7f8 fd23 	bl	8000b88 <__aeabi_d2iz>
 8008142:	2200      	movs	r2, #0
 8008144:	4682      	mov	sl, r0
 8008146:	2300      	movs	r3, #0
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fcde 	bl	8000b0c <__aeabi_dcmplt>
 8008150:	b148      	cbz	r0, 8008166 <_dtoa_r+0x186>
 8008152:	4650      	mov	r0, sl
 8008154:	f7f8 f9fe 	bl	8000554 <__aeabi_i2d>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	f7f8 fccc 	bl	8000af8 <__aeabi_dcmpeq>
 8008160:	b908      	cbnz	r0, 8008166 <_dtoa_r+0x186>
 8008162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008166:	f1ba 0f16 	cmp.w	sl, #22
 800816a:	d854      	bhi.n	8008216 <_dtoa_r+0x236>
 800816c:	4b61      	ldr	r3, [pc, #388]	; (80082f4 <_dtoa_r+0x314>)
 800816e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800817a:	f7f8 fcc7 	bl	8000b0c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	d04b      	beq.n	800821a <_dtoa_r+0x23a>
 8008182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008186:	2300      	movs	r3, #0
 8008188:	930e      	str	r3, [sp, #56]	; 0x38
 800818a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818c:	1b5d      	subs	r5, r3, r5
 800818e:	1e6b      	subs	r3, r5, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	bf43      	ittte	mi
 8008194:	2300      	movmi	r3, #0
 8008196:	f1c5 0801 	rsbmi	r8, r5, #1
 800819a:	9304      	strmi	r3, [sp, #16]
 800819c:	f04f 0800 	movpl.w	r8, #0
 80081a0:	f1ba 0f00 	cmp.w	sl, #0
 80081a4:	db3b      	blt.n	800821e <_dtoa_r+0x23e>
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80081ac:	4453      	add	r3, sl
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	2300      	movs	r3, #0
 80081b2:	9306      	str	r3, [sp, #24]
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	d869      	bhi.n	800828e <_dtoa_r+0x2ae>
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	bfc4      	itt	gt
 80081be:	3b04      	subgt	r3, #4
 80081c0:	9305      	strgt	r3, [sp, #20]
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	f1a3 0302 	sub.w	r3, r3, #2
 80081c8:	bfcc      	ite	gt
 80081ca:	2500      	movgt	r5, #0
 80081cc:	2501      	movle	r5, #1
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d869      	bhi.n	80082a6 <_dtoa_r+0x2c6>
 80081d2:	e8df f003 	tbb	[pc, r3]
 80081d6:	4e2c      	.short	0x4e2c
 80081d8:	5a4c      	.short	0x5a4c
 80081da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80081de:	441d      	add	r5, r3
 80081e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	bfc1      	itttt	gt
 80081e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80081f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081f8:	bfda      	itte	le
 80081fa:	f1c3 0320 	rsble	r3, r3, #32
 80081fe:	fa06 f003 	lslle.w	r0, r6, r3
 8008202:	4318      	orrgt	r0, r3
 8008204:	f7f8 f996 	bl	8000534 <__aeabi_ui2d>
 8008208:	2301      	movs	r3, #1
 800820a:	4606      	mov	r6, r0
 800820c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008210:	3d01      	subs	r5, #1
 8008212:	9310      	str	r3, [sp, #64]	; 0x40
 8008214:	e771      	b.n	80080fa <_dtoa_r+0x11a>
 8008216:	2301      	movs	r3, #1
 8008218:	e7b6      	b.n	8008188 <_dtoa_r+0x1a8>
 800821a:	900e      	str	r0, [sp, #56]	; 0x38
 800821c:	e7b5      	b.n	800818a <_dtoa_r+0x1aa>
 800821e:	f1ca 0300 	rsb	r3, sl, #0
 8008222:	9306      	str	r3, [sp, #24]
 8008224:	2300      	movs	r3, #0
 8008226:	eba8 080a 	sub.w	r8, r8, sl
 800822a:	930d      	str	r3, [sp, #52]	; 0x34
 800822c:	e7c2      	b.n	80081b4 <_dtoa_r+0x1d4>
 800822e:	2300      	movs	r3, #0
 8008230:	9308      	str	r3, [sp, #32]
 8008232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	dc39      	bgt.n	80082ac <_dtoa_r+0x2cc>
 8008238:	f04f 0901 	mov.w	r9, #1
 800823c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008240:	464b      	mov	r3, r9
 8008242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008246:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008248:	2200      	movs	r2, #0
 800824a:	6042      	str	r2, [r0, #4]
 800824c:	2204      	movs	r2, #4
 800824e:	f102 0614 	add.w	r6, r2, #20
 8008252:	429e      	cmp	r6, r3
 8008254:	6841      	ldr	r1, [r0, #4]
 8008256:	d92f      	bls.n	80082b8 <_dtoa_r+0x2d8>
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fee7 	bl	800902c <_Balloc>
 800825e:	9000      	str	r0, [sp, #0]
 8008260:	2800      	cmp	r0, #0
 8008262:	d14b      	bne.n	80082fc <_dtoa_r+0x31c>
 8008264:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <_dtoa_r+0x318>)
 8008266:	4602      	mov	r2, r0
 8008268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800826c:	e6d1      	b.n	8008012 <_dtoa_r+0x32>
 800826e:	2301      	movs	r3, #1
 8008270:	e7de      	b.n	8008230 <_dtoa_r+0x250>
 8008272:	2300      	movs	r3, #0
 8008274:	9308      	str	r3, [sp, #32]
 8008276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008278:	eb0a 0903 	add.w	r9, sl, r3
 800827c:	f109 0301 	add.w	r3, r9, #1
 8008280:	2b01      	cmp	r3, #1
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	bfb8      	it	lt
 8008286:	2301      	movlt	r3, #1
 8008288:	e7dd      	b.n	8008246 <_dtoa_r+0x266>
 800828a:	2301      	movs	r3, #1
 800828c:	e7f2      	b.n	8008274 <_dtoa_r+0x294>
 800828e:	2501      	movs	r5, #1
 8008290:	2300      	movs	r3, #0
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	9508      	str	r5, [sp, #32]
 8008296:	f04f 39ff 	mov.w	r9, #4294967295
 800829a:	2200      	movs	r2, #0
 800829c:	f8cd 9004 	str.w	r9, [sp, #4]
 80082a0:	2312      	movs	r3, #18
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	e7cf      	b.n	8008246 <_dtoa_r+0x266>
 80082a6:	2301      	movs	r3, #1
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	e7f4      	b.n	8008296 <_dtoa_r+0x2b6>
 80082ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80082b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80082b4:	464b      	mov	r3, r9
 80082b6:	e7c6      	b.n	8008246 <_dtoa_r+0x266>
 80082b8:	3101      	adds	r1, #1
 80082ba:	6041      	str	r1, [r0, #4]
 80082bc:	0052      	lsls	r2, r2, #1
 80082be:	e7c6      	b.n	800824e <_dtoa_r+0x26e>
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	08009f71 	.word	0x08009f71
 80082dc:	08009f88 	.word	0x08009f88
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	08009f6d 	.word	0x08009f6d
 80082e8:	08009f64 	.word	0x08009f64
 80082ec:	08009f41 	.word	0x08009f41
 80082f0:	3ff80000 	.word	0x3ff80000
 80082f4:	0800a0e0 	.word	0x0800a0e0
 80082f8:	08009fe7 	.word	0x08009fe7
 80082fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082fe:	9a00      	ldr	r2, [sp, #0]
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	2b0e      	cmp	r3, #14
 8008306:	f200 80ad 	bhi.w	8008464 <_dtoa_r+0x484>
 800830a:	2d00      	cmp	r5, #0
 800830c:	f000 80aa 	beq.w	8008464 <_dtoa_r+0x484>
 8008310:	f1ba 0f00 	cmp.w	sl, #0
 8008314:	dd36      	ble.n	8008384 <_dtoa_r+0x3a4>
 8008316:	4ac3      	ldr	r2, [pc, #780]	; (8008624 <_dtoa_r+0x644>)
 8008318:	f00a 030f 	and.w	r3, sl, #15
 800831c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008320:	ed93 7b00 	vldr	d7, [r3]
 8008324:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008328:	ea4f 172a 	mov.w	r7, sl, asr #4
 800832c:	eeb0 8a47 	vmov.f32	s16, s14
 8008330:	eef0 8a67 	vmov.f32	s17, s15
 8008334:	d016      	beq.n	8008364 <_dtoa_r+0x384>
 8008336:	4bbc      	ldr	r3, [pc, #752]	; (8008628 <_dtoa_r+0x648>)
 8008338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800833c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008340:	f7f8 fa9c 	bl	800087c <__aeabi_ddiv>
 8008344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008348:	f007 070f 	and.w	r7, r7, #15
 800834c:	2503      	movs	r5, #3
 800834e:	4eb6      	ldr	r6, [pc, #728]	; (8008628 <_dtoa_r+0x648>)
 8008350:	b957      	cbnz	r7, 8008368 <_dtoa_r+0x388>
 8008352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008356:	ec53 2b18 	vmov	r2, r3, d8
 800835a:	f7f8 fa8f 	bl	800087c <__aeabi_ddiv>
 800835e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008362:	e029      	b.n	80083b8 <_dtoa_r+0x3d8>
 8008364:	2502      	movs	r5, #2
 8008366:	e7f2      	b.n	800834e <_dtoa_r+0x36e>
 8008368:	07f9      	lsls	r1, r7, #31
 800836a:	d508      	bpl.n	800837e <_dtoa_r+0x39e>
 800836c:	ec51 0b18 	vmov	r0, r1, d8
 8008370:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008374:	f7f8 f958 	bl	8000628 <__aeabi_dmul>
 8008378:	ec41 0b18 	vmov	d8, r0, r1
 800837c:	3501      	adds	r5, #1
 800837e:	107f      	asrs	r7, r7, #1
 8008380:	3608      	adds	r6, #8
 8008382:	e7e5      	b.n	8008350 <_dtoa_r+0x370>
 8008384:	f000 80a6 	beq.w	80084d4 <_dtoa_r+0x4f4>
 8008388:	f1ca 0600 	rsb	r6, sl, #0
 800838c:	4ba5      	ldr	r3, [pc, #660]	; (8008624 <_dtoa_r+0x644>)
 800838e:	4fa6      	ldr	r7, [pc, #664]	; (8008628 <_dtoa_r+0x648>)
 8008390:	f006 020f 	and.w	r2, r6, #15
 8008394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083a0:	f7f8 f942 	bl	8000628 <__aeabi_dmul>
 80083a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a8:	1136      	asrs	r6, r6, #4
 80083aa:	2300      	movs	r3, #0
 80083ac:	2502      	movs	r5, #2
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	f040 8085 	bne.w	80084be <_dtoa_r+0x4de>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1d2      	bne.n	800835e <_dtoa_r+0x37e>
 80083b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 808c 	beq.w	80084d8 <_dtoa_r+0x4f8>
 80083c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083c4:	4b99      	ldr	r3, [pc, #612]	; (800862c <_dtoa_r+0x64c>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	f7f8 fb9e 	bl	8000b0c <__aeabi_dcmplt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f000 8081 	beq.w	80084d8 <_dtoa_r+0x4f8>
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d07d      	beq.n	80084d8 <_dtoa_r+0x4f8>
 80083dc:	f1b9 0f00 	cmp.w	r9, #0
 80083e0:	dd3c      	ble.n	800845c <_dtoa_r+0x47c>
 80083e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	2200      	movs	r2, #0
 80083ea:	4b91      	ldr	r3, [pc, #580]	; (8008630 <_dtoa_r+0x650>)
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f8 f91a 	bl	8000628 <__aeabi_dmul>
 80083f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f8:	3501      	adds	r5, #1
 80083fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80083fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008402:	4628      	mov	r0, r5
 8008404:	f7f8 f8a6 	bl	8000554 <__aeabi_i2d>
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	f7f8 f90c 	bl	8000628 <__aeabi_dmul>
 8008410:	4b88      	ldr	r3, [pc, #544]	; (8008634 <_dtoa_r+0x654>)
 8008412:	2200      	movs	r2, #0
 8008414:	f7f7 ff52 	bl	80002bc <__adddf3>
 8008418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800841c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008424:	2b00      	cmp	r3, #0
 8008426:	d15c      	bne.n	80084e2 <_dtoa_r+0x502>
 8008428:	4b83      	ldr	r3, [pc, #524]	; (8008638 <_dtoa_r+0x658>)
 800842a:	2200      	movs	r2, #0
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f7 ff42 	bl	80002b8 <__aeabi_dsub>
 8008434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008438:	4606      	mov	r6, r0
 800843a:	460f      	mov	r7, r1
 800843c:	f7f8 fb84 	bl	8000b48 <__aeabi_dcmpgt>
 8008440:	2800      	cmp	r0, #0
 8008442:	f040 8296 	bne.w	8008972 <_dtoa_r+0x992>
 8008446:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800844a:	4630      	mov	r0, r6
 800844c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fb5b 	bl	8000b0c <__aeabi_dcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	f040 8288 	bne.w	800896c <_dtoa_r+0x98c>
 800845c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008466:	2b00      	cmp	r3, #0
 8008468:	f2c0 8158 	blt.w	800871c <_dtoa_r+0x73c>
 800846c:	f1ba 0f0e 	cmp.w	sl, #14
 8008470:	f300 8154 	bgt.w	800871c <_dtoa_r+0x73c>
 8008474:	4b6b      	ldr	r3, [pc, #428]	; (8008624 <_dtoa_r+0x644>)
 8008476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800847a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	f280 80e3 	bge.w	800864c <_dtoa_r+0x66c>
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f300 80df 	bgt.w	800864c <_dtoa_r+0x66c>
 800848e:	f040 826d 	bne.w	800896c <_dtoa_r+0x98c>
 8008492:	4b69      	ldr	r3, [pc, #420]	; (8008638 <_dtoa_r+0x658>)
 8008494:	2200      	movs	r2, #0
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f8 f8c5 	bl	8000628 <__aeabi_dmul>
 800849e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a2:	f7f8 fb47 	bl	8000b34 <__aeabi_dcmpge>
 80084a6:	9e01      	ldr	r6, [sp, #4]
 80084a8:	4637      	mov	r7, r6
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f040 8243 	bne.w	8008936 <_dtoa_r+0x956>
 80084b0:	9d00      	ldr	r5, [sp, #0]
 80084b2:	2331      	movs	r3, #49	; 0x31
 80084b4:	f805 3b01 	strb.w	r3, [r5], #1
 80084b8:	f10a 0a01 	add.w	sl, sl, #1
 80084bc:	e23f      	b.n	800893e <_dtoa_r+0x95e>
 80084be:	07f2      	lsls	r2, r6, #31
 80084c0:	d505      	bpl.n	80084ce <_dtoa_r+0x4ee>
 80084c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c6:	f7f8 f8af 	bl	8000628 <__aeabi_dmul>
 80084ca:	3501      	adds	r5, #1
 80084cc:	2301      	movs	r3, #1
 80084ce:	1076      	asrs	r6, r6, #1
 80084d0:	3708      	adds	r7, #8
 80084d2:	e76c      	b.n	80083ae <_dtoa_r+0x3ce>
 80084d4:	2502      	movs	r5, #2
 80084d6:	e76f      	b.n	80083b8 <_dtoa_r+0x3d8>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	f8cd a01c 	str.w	sl, [sp, #28]
 80084de:	930c      	str	r3, [sp, #48]	; 0x30
 80084e0:	e78d      	b.n	80083fe <_dtoa_r+0x41e>
 80084e2:	9900      	ldr	r1, [sp, #0]
 80084e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084e8:	4b4e      	ldr	r3, [pc, #312]	; (8008624 <_dtoa_r+0x644>)
 80084ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ee:	4401      	add	r1, r0
 80084f0:	9102      	str	r1, [sp, #8]
 80084f2:	9908      	ldr	r1, [sp, #32]
 80084f4:	eeb0 8a47 	vmov.f32	s16, s14
 80084f8:	eef0 8a67 	vmov.f32	s17, s15
 80084fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008504:	2900      	cmp	r1, #0
 8008506:	d045      	beq.n	8008594 <_dtoa_r+0x5b4>
 8008508:	494c      	ldr	r1, [pc, #304]	; (800863c <_dtoa_r+0x65c>)
 800850a:	2000      	movs	r0, #0
 800850c:	f7f8 f9b6 	bl	800087c <__aeabi_ddiv>
 8008510:	ec53 2b18 	vmov	r2, r3, d8
 8008514:	f7f7 fed0 	bl	80002b8 <__aeabi_dsub>
 8008518:	9d00      	ldr	r5, [sp, #0]
 800851a:	ec41 0b18 	vmov	d8, r0, r1
 800851e:	4639      	mov	r1, r7
 8008520:	4630      	mov	r0, r6
 8008522:	f7f8 fb31 	bl	8000b88 <__aeabi_d2iz>
 8008526:	900c      	str	r0, [sp, #48]	; 0x30
 8008528:	f7f8 f814 	bl	8000554 <__aeabi_i2d>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 fec0 	bl	80002b8 <__aeabi_dsub>
 8008538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	f805 3b01 	strb.w	r3, [r5], #1
 8008540:	ec53 2b18 	vmov	r2, r3, d8
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	f7f8 fae0 	bl	8000b0c <__aeabi_dcmplt>
 800854c:	2800      	cmp	r0, #0
 800854e:	d165      	bne.n	800861c <_dtoa_r+0x63c>
 8008550:	4632      	mov	r2, r6
 8008552:	463b      	mov	r3, r7
 8008554:	4935      	ldr	r1, [pc, #212]	; (800862c <_dtoa_r+0x64c>)
 8008556:	2000      	movs	r0, #0
 8008558:	f7f7 feae 	bl	80002b8 <__aeabi_dsub>
 800855c:	ec53 2b18 	vmov	r2, r3, d8
 8008560:	f7f8 fad4 	bl	8000b0c <__aeabi_dcmplt>
 8008564:	2800      	cmp	r0, #0
 8008566:	f040 80b9 	bne.w	80086dc <_dtoa_r+0x6fc>
 800856a:	9b02      	ldr	r3, [sp, #8]
 800856c:	429d      	cmp	r5, r3
 800856e:	f43f af75 	beq.w	800845c <_dtoa_r+0x47c>
 8008572:	4b2f      	ldr	r3, [pc, #188]	; (8008630 <_dtoa_r+0x650>)
 8008574:	ec51 0b18 	vmov	r0, r1, d8
 8008578:	2200      	movs	r2, #0
 800857a:	f7f8 f855 	bl	8000628 <__aeabi_dmul>
 800857e:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <_dtoa_r+0x650>)
 8008580:	ec41 0b18 	vmov	d8, r0, r1
 8008584:	2200      	movs	r2, #0
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f8 f84d 	bl	8000628 <__aeabi_dmul>
 800858e:	4606      	mov	r6, r0
 8008590:	460f      	mov	r7, r1
 8008592:	e7c4      	b.n	800851e <_dtoa_r+0x53e>
 8008594:	ec51 0b17 	vmov	r0, r1, d7
 8008598:	f7f8 f846 	bl	8000628 <__aeabi_dmul>
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	9d00      	ldr	r5, [sp, #0]
 80085a0:	930c      	str	r3, [sp, #48]	; 0x30
 80085a2:	ec41 0b18 	vmov	d8, r0, r1
 80085a6:	4639      	mov	r1, r7
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7f8 faed 	bl	8000b88 <__aeabi_d2iz>
 80085ae:	9011      	str	r0, [sp, #68]	; 0x44
 80085b0:	f7f7 ffd0 	bl	8000554 <__aeabi_i2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 fe7c 	bl	80002b8 <__aeabi_dsub>
 80085c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085c2:	3330      	adds	r3, #48	; 0x30
 80085c4:	f805 3b01 	strb.w	r3, [r5], #1
 80085c8:	9b02      	ldr	r3, [sp, #8]
 80085ca:	429d      	cmp	r5, r3
 80085cc:	4606      	mov	r6, r0
 80085ce:	460f      	mov	r7, r1
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	d134      	bne.n	8008640 <_dtoa_r+0x660>
 80085d6:	4b19      	ldr	r3, [pc, #100]	; (800863c <_dtoa_r+0x65c>)
 80085d8:	ec51 0b18 	vmov	r0, r1, d8
 80085dc:	f7f7 fe6e 	bl	80002bc <__adddf3>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f8 faae 	bl	8000b48 <__aeabi_dcmpgt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d175      	bne.n	80086dc <_dtoa_r+0x6fc>
 80085f0:	ec53 2b18 	vmov	r2, r3, d8
 80085f4:	4911      	ldr	r1, [pc, #68]	; (800863c <_dtoa_r+0x65c>)
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7f7 fe5e 	bl	80002b8 <__aeabi_dsub>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f8 fa82 	bl	8000b0c <__aeabi_dcmplt>
 8008608:	2800      	cmp	r0, #0
 800860a:	f43f af27 	beq.w	800845c <_dtoa_r+0x47c>
 800860e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008610:	1e6b      	subs	r3, r5, #1
 8008612:	930c      	str	r3, [sp, #48]	; 0x30
 8008614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	d0f8      	beq.n	800860e <_dtoa_r+0x62e>
 800861c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008620:	e04a      	b.n	80086b8 <_dtoa_r+0x6d8>
 8008622:	bf00      	nop
 8008624:	0800a0e0 	.word	0x0800a0e0
 8008628:	0800a0b8 	.word	0x0800a0b8
 800862c:	3ff00000 	.word	0x3ff00000
 8008630:	40240000 	.word	0x40240000
 8008634:	401c0000 	.word	0x401c0000
 8008638:	40140000 	.word	0x40140000
 800863c:	3fe00000 	.word	0x3fe00000
 8008640:	4baf      	ldr	r3, [pc, #700]	; (8008900 <_dtoa_r+0x920>)
 8008642:	f7f7 fff1 	bl	8000628 <__aeabi_dmul>
 8008646:	4606      	mov	r6, r0
 8008648:	460f      	mov	r7, r1
 800864a:	e7ac      	b.n	80085a6 <_dtoa_r+0x5c6>
 800864c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008650:	9d00      	ldr	r5, [sp, #0]
 8008652:	4642      	mov	r2, r8
 8008654:	464b      	mov	r3, r9
 8008656:	4630      	mov	r0, r6
 8008658:	4639      	mov	r1, r7
 800865a:	f7f8 f90f 	bl	800087c <__aeabi_ddiv>
 800865e:	f7f8 fa93 	bl	8000b88 <__aeabi_d2iz>
 8008662:	9002      	str	r0, [sp, #8]
 8008664:	f7f7 ff76 	bl	8000554 <__aeabi_i2d>
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	f7f7 ffdc 	bl	8000628 <__aeabi_dmul>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4630      	mov	r0, r6
 8008676:	4639      	mov	r1, r7
 8008678:	f7f7 fe1e 	bl	80002b8 <__aeabi_dsub>
 800867c:	9e02      	ldr	r6, [sp, #8]
 800867e:	9f01      	ldr	r7, [sp, #4]
 8008680:	3630      	adds	r6, #48	; 0x30
 8008682:	f805 6b01 	strb.w	r6, [r5], #1
 8008686:	9e00      	ldr	r6, [sp, #0]
 8008688:	1bae      	subs	r6, r5, r6
 800868a:	42b7      	cmp	r7, r6
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	d137      	bne.n	8008702 <_dtoa_r+0x722>
 8008692:	f7f7 fe13 	bl	80002bc <__adddf3>
 8008696:	4642      	mov	r2, r8
 8008698:	464b      	mov	r3, r9
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	f7f8 fa53 	bl	8000b48 <__aeabi_dcmpgt>
 80086a2:	b9c8      	cbnz	r0, 80086d8 <_dtoa_r+0x6f8>
 80086a4:	4642      	mov	r2, r8
 80086a6:	464b      	mov	r3, r9
 80086a8:	4630      	mov	r0, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	f7f8 fa24 	bl	8000af8 <__aeabi_dcmpeq>
 80086b0:	b110      	cbz	r0, 80086b8 <_dtoa_r+0x6d8>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	07d9      	lsls	r1, r3, #31
 80086b6:	d40f      	bmi.n	80086d8 <_dtoa_r+0x6f8>
 80086b8:	4620      	mov	r0, r4
 80086ba:	4659      	mov	r1, fp
 80086bc:	f000 fcf6 	bl	80090ac <_Bfree>
 80086c0:	2300      	movs	r3, #0
 80086c2:	702b      	strb	r3, [r5, #0]
 80086c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c6:	f10a 0001 	add.w	r0, sl, #1
 80086ca:	6018      	str	r0, [r3, #0]
 80086cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f43f acd8 	beq.w	8008084 <_dtoa_r+0xa4>
 80086d4:	601d      	str	r5, [r3, #0]
 80086d6:	e4d5      	b.n	8008084 <_dtoa_r+0xa4>
 80086d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80086dc:	462b      	mov	r3, r5
 80086de:	461d      	mov	r5, r3
 80086e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e4:	2a39      	cmp	r2, #57	; 0x39
 80086e6:	d108      	bne.n	80086fa <_dtoa_r+0x71a>
 80086e8:	9a00      	ldr	r2, [sp, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d1f7      	bne.n	80086de <_dtoa_r+0x6fe>
 80086ee:	9a07      	ldr	r2, [sp, #28]
 80086f0:	9900      	ldr	r1, [sp, #0]
 80086f2:	3201      	adds	r2, #1
 80086f4:	9207      	str	r2, [sp, #28]
 80086f6:	2230      	movs	r2, #48	; 0x30
 80086f8:	700a      	strb	r2, [r1, #0]
 80086fa:	781a      	ldrb	r2, [r3, #0]
 80086fc:	3201      	adds	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e78c      	b.n	800861c <_dtoa_r+0x63c>
 8008702:	4b7f      	ldr	r3, [pc, #508]	; (8008900 <_dtoa_r+0x920>)
 8008704:	2200      	movs	r2, #0
 8008706:	f7f7 ff8f 	bl	8000628 <__aeabi_dmul>
 800870a:	2200      	movs	r2, #0
 800870c:	2300      	movs	r3, #0
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	f7f8 f9f1 	bl	8000af8 <__aeabi_dcmpeq>
 8008716:	2800      	cmp	r0, #0
 8008718:	d09b      	beq.n	8008652 <_dtoa_r+0x672>
 800871a:	e7cd      	b.n	80086b8 <_dtoa_r+0x6d8>
 800871c:	9a08      	ldr	r2, [sp, #32]
 800871e:	2a00      	cmp	r2, #0
 8008720:	f000 80c4 	beq.w	80088ac <_dtoa_r+0x8cc>
 8008724:	9a05      	ldr	r2, [sp, #20]
 8008726:	2a01      	cmp	r2, #1
 8008728:	f300 80a8 	bgt.w	800887c <_dtoa_r+0x89c>
 800872c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800872e:	2a00      	cmp	r2, #0
 8008730:	f000 80a0 	beq.w	8008874 <_dtoa_r+0x894>
 8008734:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008738:	9e06      	ldr	r6, [sp, #24]
 800873a:	4645      	mov	r5, r8
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	2101      	movs	r1, #1
 8008740:	441a      	add	r2, r3
 8008742:	4620      	mov	r0, r4
 8008744:	4498      	add	r8, r3
 8008746:	9204      	str	r2, [sp, #16]
 8008748:	f000 fd6c 	bl	8009224 <__i2b>
 800874c:	4607      	mov	r7, r0
 800874e:	2d00      	cmp	r5, #0
 8008750:	dd0b      	ble.n	800876a <_dtoa_r+0x78a>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd08      	ble.n	800876a <_dtoa_r+0x78a>
 8008758:	42ab      	cmp	r3, r5
 800875a:	9a04      	ldr	r2, [sp, #16]
 800875c:	bfa8      	it	ge
 800875e:	462b      	movge	r3, r5
 8008760:	eba8 0803 	sub.w	r8, r8, r3
 8008764:	1aed      	subs	r5, r5, r3
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	9b06      	ldr	r3, [sp, #24]
 800876c:	b1fb      	cbz	r3, 80087ae <_dtoa_r+0x7ce>
 800876e:	9b08      	ldr	r3, [sp, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 809f 	beq.w	80088b4 <_dtoa_r+0x8d4>
 8008776:	2e00      	cmp	r6, #0
 8008778:	dd11      	ble.n	800879e <_dtoa_r+0x7be>
 800877a:	4639      	mov	r1, r7
 800877c:	4632      	mov	r2, r6
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fe0c 	bl	800939c <__pow5mult>
 8008784:	465a      	mov	r2, fp
 8008786:	4601      	mov	r1, r0
 8008788:	4607      	mov	r7, r0
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fd60 	bl	8009250 <__multiply>
 8008790:	4659      	mov	r1, fp
 8008792:	9007      	str	r0, [sp, #28]
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fc89 	bl	80090ac <_Bfree>
 800879a:	9b07      	ldr	r3, [sp, #28]
 800879c:	469b      	mov	fp, r3
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	1b9a      	subs	r2, r3, r6
 80087a2:	d004      	beq.n	80087ae <_dtoa_r+0x7ce>
 80087a4:	4659      	mov	r1, fp
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fdf8 	bl	800939c <__pow5mult>
 80087ac:	4683      	mov	fp, r0
 80087ae:	2101      	movs	r1, #1
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fd37 	bl	8009224 <__i2b>
 80087b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	4606      	mov	r6, r0
 80087bc:	dd7c      	ble.n	80088b8 <_dtoa_r+0x8d8>
 80087be:	461a      	mov	r2, r3
 80087c0:	4601      	mov	r1, r0
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fdea 	bl	800939c <__pow5mult>
 80087c8:	9b05      	ldr	r3, [sp, #20]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	4606      	mov	r6, r0
 80087ce:	dd76      	ble.n	80088be <_dtoa_r+0x8de>
 80087d0:	2300      	movs	r3, #0
 80087d2:	9306      	str	r3, [sp, #24]
 80087d4:	6933      	ldr	r3, [r6, #16]
 80087d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087da:	6918      	ldr	r0, [r3, #16]
 80087dc:	f000 fcd2 	bl	8009184 <__hi0bits>
 80087e0:	f1c0 0020 	rsb	r0, r0, #32
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	4418      	add	r0, r3
 80087e8:	f010 001f 	ands.w	r0, r0, #31
 80087ec:	f000 8086 	beq.w	80088fc <_dtoa_r+0x91c>
 80087f0:	f1c0 0320 	rsb	r3, r0, #32
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	dd7f      	ble.n	80088f8 <_dtoa_r+0x918>
 80087f8:	f1c0 001c 	rsb	r0, r0, #28
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	4403      	add	r3, r0
 8008800:	4480      	add	r8, r0
 8008802:	4405      	add	r5, r0
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	f1b8 0f00 	cmp.w	r8, #0
 800880a:	dd05      	ble.n	8008818 <_dtoa_r+0x838>
 800880c:	4659      	mov	r1, fp
 800880e:	4642      	mov	r2, r8
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fe1d 	bl	8009450 <__lshift>
 8008816:	4683      	mov	fp, r0
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dd05      	ble.n	800882a <_dtoa_r+0x84a>
 800881e:	4631      	mov	r1, r6
 8008820:	461a      	mov	r2, r3
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fe14 	bl	8009450 <__lshift>
 8008828:	4606      	mov	r6, r0
 800882a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d069      	beq.n	8008904 <_dtoa_r+0x924>
 8008830:	4631      	mov	r1, r6
 8008832:	4658      	mov	r0, fp
 8008834:	f000 fe78 	bl	8009528 <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	da63      	bge.n	8008904 <_dtoa_r+0x924>
 800883c:	2300      	movs	r3, #0
 800883e:	4659      	mov	r1, fp
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fc54 	bl	80090f0 <__multadd>
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800884e:	4683      	mov	fp, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 818f 	beq.w	8008b74 <_dtoa_r+0xb94>
 8008856:	4639      	mov	r1, r7
 8008858:	2300      	movs	r3, #0
 800885a:	220a      	movs	r2, #10
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fc47 	bl	80090f0 <__multadd>
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	4607      	mov	r7, r0
 8008868:	f300 808e 	bgt.w	8008988 <_dtoa_r+0x9a8>
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	2b02      	cmp	r3, #2
 8008870:	dc50      	bgt.n	8008914 <_dtoa_r+0x934>
 8008872:	e089      	b.n	8008988 <_dtoa_r+0x9a8>
 8008874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800887a:	e75d      	b.n	8008738 <_dtoa_r+0x758>
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	1e5e      	subs	r6, r3, #1
 8008880:	9b06      	ldr	r3, [sp, #24]
 8008882:	42b3      	cmp	r3, r6
 8008884:	bfbf      	itttt	lt
 8008886:	9b06      	ldrlt	r3, [sp, #24]
 8008888:	9606      	strlt	r6, [sp, #24]
 800888a:	1af2      	sublt	r2, r6, r3
 800888c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800888e:	bfb6      	itet	lt
 8008890:	189b      	addlt	r3, r3, r2
 8008892:	1b9e      	subge	r6, r3, r6
 8008894:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008896:	9b01      	ldr	r3, [sp, #4]
 8008898:	bfb8      	it	lt
 800889a:	2600      	movlt	r6, #0
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfb5      	itete	lt
 80088a0:	eba8 0503 	sublt.w	r5, r8, r3
 80088a4:	9b01      	ldrge	r3, [sp, #4]
 80088a6:	2300      	movlt	r3, #0
 80088a8:	4645      	movge	r5, r8
 80088aa:	e747      	b.n	800873c <_dtoa_r+0x75c>
 80088ac:	9e06      	ldr	r6, [sp, #24]
 80088ae:	9f08      	ldr	r7, [sp, #32]
 80088b0:	4645      	mov	r5, r8
 80088b2:	e74c      	b.n	800874e <_dtoa_r+0x76e>
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	e775      	b.n	80087a4 <_dtoa_r+0x7c4>
 80088b8:	9b05      	ldr	r3, [sp, #20]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	dc18      	bgt.n	80088f0 <_dtoa_r+0x910>
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	b9b3      	cbnz	r3, 80088f0 <_dtoa_r+0x910>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c8:	b9a3      	cbnz	r3, 80088f4 <_dtoa_r+0x914>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d0:	0d1b      	lsrs	r3, r3, #20
 80088d2:	051b      	lsls	r3, r3, #20
 80088d4:	b12b      	cbz	r3, 80088e2 <_dtoa_r+0x902>
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	f108 0801 	add.w	r8, r8, #1
 80088e0:	2301      	movs	r3, #1
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f47f af74 	bne.w	80087d4 <_dtoa_r+0x7f4>
 80088ec:	2001      	movs	r0, #1
 80088ee:	e779      	b.n	80087e4 <_dtoa_r+0x804>
 80088f0:	2300      	movs	r3, #0
 80088f2:	e7f6      	b.n	80088e2 <_dtoa_r+0x902>
 80088f4:	9b02      	ldr	r3, [sp, #8]
 80088f6:	e7f4      	b.n	80088e2 <_dtoa_r+0x902>
 80088f8:	d085      	beq.n	8008806 <_dtoa_r+0x826>
 80088fa:	4618      	mov	r0, r3
 80088fc:	301c      	adds	r0, #28
 80088fe:	e77d      	b.n	80087fc <_dtoa_r+0x81c>
 8008900:	40240000 	.word	0x40240000
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dc38      	bgt.n	800897c <_dtoa_r+0x99c>
 800890a:	9b05      	ldr	r3, [sp, #20]
 800890c:	2b02      	cmp	r3, #2
 800890e:	dd35      	ble.n	800897c <_dtoa_r+0x99c>
 8008910:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	d10d      	bne.n	8008936 <_dtoa_r+0x956>
 800891a:	4631      	mov	r1, r6
 800891c:	464b      	mov	r3, r9
 800891e:	2205      	movs	r2, #5
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fbe5 	bl	80090f0 <__multadd>
 8008926:	4601      	mov	r1, r0
 8008928:	4606      	mov	r6, r0
 800892a:	4658      	mov	r0, fp
 800892c:	f000 fdfc 	bl	8009528 <__mcmp>
 8008930:	2800      	cmp	r0, #0
 8008932:	f73f adbd 	bgt.w	80084b0 <_dtoa_r+0x4d0>
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	9d00      	ldr	r5, [sp, #0]
 800893a:	ea6f 0a03 	mvn.w	sl, r3
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	4631      	mov	r1, r6
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fbb1 	bl	80090ac <_Bfree>
 800894a:	2f00      	cmp	r7, #0
 800894c:	f43f aeb4 	beq.w	80086b8 <_dtoa_r+0x6d8>
 8008950:	f1b8 0f00 	cmp.w	r8, #0
 8008954:	d005      	beq.n	8008962 <_dtoa_r+0x982>
 8008956:	45b8      	cmp	r8, r7
 8008958:	d003      	beq.n	8008962 <_dtoa_r+0x982>
 800895a:	4641      	mov	r1, r8
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fba5 	bl	80090ac <_Bfree>
 8008962:	4639      	mov	r1, r7
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fba1 	bl	80090ac <_Bfree>
 800896a:	e6a5      	b.n	80086b8 <_dtoa_r+0x6d8>
 800896c:	2600      	movs	r6, #0
 800896e:	4637      	mov	r7, r6
 8008970:	e7e1      	b.n	8008936 <_dtoa_r+0x956>
 8008972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008978:	4637      	mov	r7, r6
 800897a:	e599      	b.n	80084b0 <_dtoa_r+0x4d0>
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80fd 	beq.w	8008b82 <_dtoa_r+0xba2>
 8008988:	2d00      	cmp	r5, #0
 800898a:	dd05      	ble.n	8008998 <_dtoa_r+0x9b8>
 800898c:	4639      	mov	r1, r7
 800898e:	462a      	mov	r2, r5
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fd5d 	bl	8009450 <__lshift>
 8008996:	4607      	mov	r7, r0
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d05c      	beq.n	8008a58 <_dtoa_r+0xa78>
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fb43 	bl	800902c <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b928      	cbnz	r0, 80089b6 <_dtoa_r+0x9d6>
 80089aa:	4b80      	ldr	r3, [pc, #512]	; (8008bac <_dtoa_r+0xbcc>)
 80089ac:	4602      	mov	r2, r0
 80089ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089b2:	f7ff bb2e 	b.w	8008012 <_dtoa_r+0x32>
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	3202      	adds	r2, #2
 80089ba:	0092      	lsls	r2, r2, #2
 80089bc:	f107 010c 	add.w	r1, r7, #12
 80089c0:	300c      	adds	r0, #12
 80089c2:	f000 fb25 	bl	8009010 <memcpy>
 80089c6:	2201      	movs	r2, #1
 80089c8:	4629      	mov	r1, r5
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fd40 	bl	8009450 <__lshift>
 80089d0:	9b00      	ldr	r3, [sp, #0]
 80089d2:	3301      	adds	r3, #1
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	444b      	add	r3, r9
 80089da:	9307      	str	r3, [sp, #28]
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	46b8      	mov	r8, r7
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	4607      	mov	r7, r0
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	4631      	mov	r1, r6
 80089ec:	3b01      	subs	r3, #1
 80089ee:	4658      	mov	r0, fp
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	f7ff fa67 	bl	8007ec4 <quorem>
 80089f6:	4603      	mov	r3, r0
 80089f8:	3330      	adds	r3, #48	; 0x30
 80089fa:	9004      	str	r0, [sp, #16]
 80089fc:	4641      	mov	r1, r8
 80089fe:	4658      	mov	r0, fp
 8008a00:	9308      	str	r3, [sp, #32]
 8008a02:	f000 fd91 	bl	8009528 <__mcmp>
 8008a06:	463a      	mov	r2, r7
 8008a08:	4681      	mov	r9, r0
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 fda7 	bl	8009560 <__mdiff>
 8008a12:	68c2      	ldr	r2, [r0, #12]
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	4605      	mov	r5, r0
 8008a18:	bb02      	cbnz	r2, 8008a5c <_dtoa_r+0xa7c>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4658      	mov	r0, fp
 8008a1e:	f000 fd83 	bl	8009528 <__mcmp>
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	4602      	mov	r2, r0
 8008a26:	4629      	mov	r1, r5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008a2e:	f000 fb3d 	bl	80090ac <_Bfree>
 8008a32:	9b05      	ldr	r3, [sp, #20]
 8008a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a36:	9d01      	ldr	r5, [sp, #4]
 8008a38:	ea43 0102 	orr.w	r1, r3, r2
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	d10d      	bne.n	8008a60 <_dtoa_r+0xa80>
 8008a44:	2b39      	cmp	r3, #57	; 0x39
 8008a46:	d029      	beq.n	8008a9c <_dtoa_r+0xabc>
 8008a48:	f1b9 0f00 	cmp.w	r9, #0
 8008a4c:	dd01      	ble.n	8008a52 <_dtoa_r+0xa72>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	3331      	adds	r3, #49	; 0x31
 8008a52:	9a02      	ldr	r2, [sp, #8]
 8008a54:	7013      	strb	r3, [r2, #0]
 8008a56:	e774      	b.n	8008942 <_dtoa_r+0x962>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	e7b9      	b.n	80089d0 <_dtoa_r+0x9f0>
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	e7e2      	b.n	8008a26 <_dtoa_r+0xa46>
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	db06      	blt.n	8008a74 <_dtoa_r+0xa94>
 8008a66:	9905      	ldr	r1, [sp, #20]
 8008a68:	ea41 0909 	orr.w	r9, r1, r9
 8008a6c:	9906      	ldr	r1, [sp, #24]
 8008a6e:	ea59 0101 	orrs.w	r1, r9, r1
 8008a72:	d120      	bne.n	8008ab6 <_dtoa_r+0xad6>
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	ddec      	ble.n	8008a52 <_dtoa_r+0xa72>
 8008a78:	4659      	mov	r1, fp
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	f000 fce6 	bl	8009450 <__lshift>
 8008a84:	4631      	mov	r1, r6
 8008a86:	4683      	mov	fp, r0
 8008a88:	f000 fd4e 	bl	8009528 <__mcmp>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	dc02      	bgt.n	8008a98 <_dtoa_r+0xab8>
 8008a92:	d1de      	bne.n	8008a52 <_dtoa_r+0xa72>
 8008a94:	07da      	lsls	r2, r3, #31
 8008a96:	d5dc      	bpl.n	8008a52 <_dtoa_r+0xa72>
 8008a98:	2b39      	cmp	r3, #57	; 0x39
 8008a9a:	d1d8      	bne.n	8008a4e <_dtoa_r+0xa6e>
 8008a9c:	9a02      	ldr	r2, [sp, #8]
 8008a9e:	2339      	movs	r3, #57	; 0x39
 8008aa0:	7013      	strb	r3, [r2, #0]
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	461d      	mov	r5, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008aac:	2a39      	cmp	r2, #57	; 0x39
 8008aae:	d050      	beq.n	8008b52 <_dtoa_r+0xb72>
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	e745      	b.n	8008942 <_dtoa_r+0x962>
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	dd03      	ble.n	8008ac2 <_dtoa_r+0xae2>
 8008aba:	2b39      	cmp	r3, #57	; 0x39
 8008abc:	d0ee      	beq.n	8008a9c <_dtoa_r+0xabc>
 8008abe:	3301      	adds	r3, #1
 8008ac0:	e7c7      	b.n	8008a52 <_dtoa_r+0xa72>
 8008ac2:	9a01      	ldr	r2, [sp, #4]
 8008ac4:	9907      	ldr	r1, [sp, #28]
 8008ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008aca:	428a      	cmp	r2, r1
 8008acc:	d02a      	beq.n	8008b24 <_dtoa_r+0xb44>
 8008ace:	4659      	mov	r1, fp
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fb0b 	bl	80090f0 <__multadd>
 8008ada:	45b8      	cmp	r8, r7
 8008adc:	4683      	mov	fp, r0
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	f04f 020a 	mov.w	r2, #10
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	4620      	mov	r0, r4
 8008aea:	d107      	bne.n	8008afc <_dtoa_r+0xb1c>
 8008aec:	f000 fb00 	bl	80090f0 <__multadd>
 8008af0:	4680      	mov	r8, r0
 8008af2:	4607      	mov	r7, r0
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	e775      	b.n	80089e8 <_dtoa_r+0xa08>
 8008afc:	f000 faf8 	bl	80090f0 <__multadd>
 8008b00:	4639      	mov	r1, r7
 8008b02:	4680      	mov	r8, r0
 8008b04:	2300      	movs	r3, #0
 8008b06:	220a      	movs	r2, #10
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 faf1 	bl	80090f0 <__multadd>
 8008b0e:	4607      	mov	r7, r0
 8008b10:	e7f0      	b.n	8008af4 <_dtoa_r+0xb14>
 8008b12:	f1b9 0f00 	cmp.w	r9, #0
 8008b16:	9a00      	ldr	r2, [sp, #0]
 8008b18:	bfcc      	ite	gt
 8008b1a:	464d      	movgt	r5, r9
 8008b1c:	2501      	movle	r5, #1
 8008b1e:	4415      	add	r5, r2
 8008b20:	f04f 0800 	mov.w	r8, #0
 8008b24:	4659      	mov	r1, fp
 8008b26:	2201      	movs	r2, #1
 8008b28:	4620      	mov	r0, r4
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f000 fc90 	bl	8009450 <__lshift>
 8008b30:	4631      	mov	r1, r6
 8008b32:	4683      	mov	fp, r0
 8008b34:	f000 fcf8 	bl	8009528 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	dcb2      	bgt.n	8008aa2 <_dtoa_r+0xac2>
 8008b3c:	d102      	bne.n	8008b44 <_dtoa_r+0xb64>
 8008b3e:	9b01      	ldr	r3, [sp, #4]
 8008b40:	07db      	lsls	r3, r3, #31
 8008b42:	d4ae      	bmi.n	8008aa2 <_dtoa_r+0xac2>
 8008b44:	462b      	mov	r3, r5
 8008b46:	461d      	mov	r5, r3
 8008b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b4c:	2a30      	cmp	r2, #48	; 0x30
 8008b4e:	d0fa      	beq.n	8008b46 <_dtoa_r+0xb66>
 8008b50:	e6f7      	b.n	8008942 <_dtoa_r+0x962>
 8008b52:	9a00      	ldr	r2, [sp, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d1a5      	bne.n	8008aa4 <_dtoa_r+0xac4>
 8008b58:	f10a 0a01 	add.w	sl, sl, #1
 8008b5c:	2331      	movs	r3, #49	; 0x31
 8008b5e:	e779      	b.n	8008a54 <_dtoa_r+0xa74>
 8008b60:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <_dtoa_r+0xbd0>)
 8008b62:	f7ff baaf 	b.w	80080c4 <_dtoa_r+0xe4>
 8008b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f aa86 	bne.w	800807a <_dtoa_r+0x9a>
 8008b6e:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <_dtoa_r+0xbd4>)
 8008b70:	f7ff baa8 	b.w	80080c4 <_dtoa_r+0xe4>
 8008b74:	f1b9 0f00 	cmp.w	r9, #0
 8008b78:	dc03      	bgt.n	8008b82 <_dtoa_r+0xba2>
 8008b7a:	9b05      	ldr	r3, [sp, #20]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	f73f aec9 	bgt.w	8008914 <_dtoa_r+0x934>
 8008b82:	9d00      	ldr	r5, [sp, #0]
 8008b84:	4631      	mov	r1, r6
 8008b86:	4658      	mov	r0, fp
 8008b88:	f7ff f99c 	bl	8007ec4 <quorem>
 8008b8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b90:	f805 3b01 	strb.w	r3, [r5], #1
 8008b94:	9a00      	ldr	r2, [sp, #0]
 8008b96:	1aaa      	subs	r2, r5, r2
 8008b98:	4591      	cmp	r9, r2
 8008b9a:	ddba      	ble.n	8008b12 <_dtoa_r+0xb32>
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	220a      	movs	r2, #10
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 faa4 	bl	80090f0 <__multadd>
 8008ba8:	4683      	mov	fp, r0
 8008baa:	e7eb      	b.n	8008b84 <_dtoa_r+0xba4>
 8008bac:	08009fe7 	.word	0x08009fe7
 8008bb0:	08009f40 	.word	0x08009f40
 8008bb4:	08009f64 	.word	0x08009f64

08008bb8 <__sflush_r>:
 8008bb8:	898a      	ldrh	r2, [r1, #12]
 8008bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	0710      	lsls	r0, r2, #28
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	d458      	bmi.n	8008c78 <__sflush_r+0xc0>
 8008bc6:	684b      	ldr	r3, [r1, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc05      	bgt.n	8008bd8 <__sflush_r+0x20>
 8008bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc02      	bgt.n	8008bd8 <__sflush_r+0x20>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d0f9      	beq.n	8008bd2 <__sflush_r+0x1a>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008be4:	682f      	ldr	r7, [r5, #0]
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	d032      	beq.n	8008c50 <__sflush_r+0x98>
 8008bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	075a      	lsls	r2, r3, #29
 8008bf0:	d505      	bpl.n	8008bfe <__sflush_r+0x46>
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	1ac0      	subs	r0, r0, r3
 8008bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf8:	b10b      	cbz	r3, 8008bfe <__sflush_r+0x46>
 8008bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bfc:	1ac0      	subs	r0, r0, r3
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4602      	mov	r2, r0
 8008c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b0      	blx	r6
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	d106      	bne.n	8008c1e <__sflush_r+0x66>
 8008c10:	6829      	ldr	r1, [r5, #0]
 8008c12:	291d      	cmp	r1, #29
 8008c14:	d82c      	bhi.n	8008c70 <__sflush_r+0xb8>
 8008c16:	4a2a      	ldr	r2, [pc, #168]	; (8008cc0 <__sflush_r+0x108>)
 8008c18:	40ca      	lsrs	r2, r1
 8008c1a:	07d6      	lsls	r6, r2, #31
 8008c1c:	d528      	bpl.n	8008c70 <__sflush_r+0xb8>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	6062      	str	r2, [r4, #4]
 8008c22:	04d9      	lsls	r1, r3, #19
 8008c24:	6922      	ldr	r2, [r4, #16]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	d504      	bpl.n	8008c34 <__sflush_r+0x7c>
 8008c2a:	1c42      	adds	r2, r0, #1
 8008c2c:	d101      	bne.n	8008c32 <__sflush_r+0x7a>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	b903      	cbnz	r3, 8008c34 <__sflush_r+0x7c>
 8008c32:	6560      	str	r0, [r4, #84]	; 0x54
 8008c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c36:	602f      	str	r7, [r5, #0]
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d0ca      	beq.n	8008bd2 <__sflush_r+0x1a>
 8008c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d002      	beq.n	8008c4a <__sflush_r+0x92>
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 fd7f 	bl	8009748 <_free_r>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c4e:	e7c1      	b.n	8008bd4 <__sflush_r+0x1c>
 8008c50:	6a21      	ldr	r1, [r4, #32]
 8008c52:	2301      	movs	r3, #1
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b0      	blx	r6
 8008c58:	1c41      	adds	r1, r0, #1
 8008c5a:	d1c7      	bne.n	8008bec <__sflush_r+0x34>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0c4      	beq.n	8008bec <__sflush_r+0x34>
 8008c62:	2b1d      	cmp	r3, #29
 8008c64:	d001      	beq.n	8008c6a <__sflush_r+0xb2>
 8008c66:	2b16      	cmp	r3, #22
 8008c68:	d101      	bne.n	8008c6e <__sflush_r+0xb6>
 8008c6a:	602f      	str	r7, [r5, #0]
 8008c6c:	e7b1      	b.n	8008bd2 <__sflush_r+0x1a>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	e7ad      	b.n	8008bd4 <__sflush_r+0x1c>
 8008c78:	690f      	ldr	r7, [r1, #16]
 8008c7a:	2f00      	cmp	r7, #0
 8008c7c:	d0a9      	beq.n	8008bd2 <__sflush_r+0x1a>
 8008c7e:	0793      	lsls	r3, r2, #30
 8008c80:	680e      	ldr	r6, [r1, #0]
 8008c82:	bf08      	it	eq
 8008c84:	694b      	ldreq	r3, [r1, #20]
 8008c86:	600f      	str	r7, [r1, #0]
 8008c88:	bf18      	it	ne
 8008c8a:	2300      	movne	r3, #0
 8008c8c:	eba6 0807 	sub.w	r8, r6, r7
 8008c90:	608b      	str	r3, [r1, #8]
 8008c92:	f1b8 0f00 	cmp.w	r8, #0
 8008c96:	dd9c      	ble.n	8008bd2 <__sflush_r+0x1a>
 8008c98:	6a21      	ldr	r1, [r4, #32]
 8008c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c9c:	4643      	mov	r3, r8
 8008c9e:	463a      	mov	r2, r7
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b0      	blx	r6
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dc06      	bgt.n	8008cb6 <__sflush_r+0xfe>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e78e      	b.n	8008bd4 <__sflush_r+0x1c>
 8008cb6:	4407      	add	r7, r0
 8008cb8:	eba8 0800 	sub.w	r8, r8, r0
 8008cbc:	e7e9      	b.n	8008c92 <__sflush_r+0xda>
 8008cbe:	bf00      	nop
 8008cc0:	20400001 	.word	0x20400001

08008cc4 <_fflush_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b913      	cbnz	r3, 8008cd4 <_fflush_r+0x10>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	b118      	cbz	r0, 8008cde <_fflush_r+0x1a>
 8008cd6:	6983      	ldr	r3, [r0, #24]
 8008cd8:	b90b      	cbnz	r3, 8008cde <_fflush_r+0x1a>
 8008cda:	f000 f887 	bl	8008dec <__sinit>
 8008cde:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <_fflush_r+0x6c>)
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	d11b      	bne.n	8008d1c <_fflush_r+0x58>
 8008ce4:	686c      	ldr	r4, [r5, #4]
 8008ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0ef      	beq.n	8008cce <_fflush_r+0xa>
 8008cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf0:	07d0      	lsls	r0, r2, #31
 8008cf2:	d404      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf4:	0599      	lsls	r1, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfa:	f000 f91a 	bl	8008f32 <__retarget_lock_acquire_recursive>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7ff ff59 	bl	8008bb8 <__sflush_r>
 8008d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d08:	07da      	lsls	r2, r3, #31
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	d4e0      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	059b      	lsls	r3, r3, #22
 8008d12:	d4dd      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f000 f90d 	bl	8008f34 <__retarget_lock_release_recursive>
 8008d1a:	e7d9      	b.n	8008cd0 <_fflush_r+0xc>
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <_fflush_r+0x70>)
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d101      	bne.n	8008d26 <_fflush_r+0x62>
 8008d22:	68ac      	ldr	r4, [r5, #8]
 8008d24:	e7df      	b.n	8008ce6 <_fflush_r+0x22>
 8008d26:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <_fflush_r+0x74>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	68ec      	ldreq	r4, [r5, #12]
 8008d2e:	e7da      	b.n	8008ce6 <_fflush_r+0x22>
 8008d30:	0800a018 	.word	0x0800a018
 8008d34:	0800a038 	.word	0x0800a038
 8008d38:	08009ff8 	.word	0x08009ff8

08008d3c <std>:
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	4604      	mov	r4, r0
 8008d42:	e9c0 3300 	strd	r3, r3, [r0]
 8008d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d4a:	6083      	str	r3, [r0, #8]
 8008d4c:	8181      	strh	r1, [r0, #12]
 8008d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d50:	81c2      	strh	r2, [r0, #14]
 8008d52:	6183      	str	r3, [r0, #24]
 8008d54:	4619      	mov	r1, r3
 8008d56:	2208      	movs	r2, #8
 8008d58:	305c      	adds	r0, #92	; 0x5c
 8008d5a:	f7fe faf3 	bl	8007344 <memset>
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <std+0x38>)
 8008d60:	6263      	str	r3, [r4, #36]	; 0x24
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <std+0x3c>)
 8008d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <std+0x40>)
 8008d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x44>)
 8008d6c:	6224      	str	r4, [r4, #32]
 8008d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08009b71 	.word	0x08009b71
 8008d78:	08009b93 	.word	0x08009b93
 8008d7c:	08009bcb 	.word	0x08009bcb
 8008d80:	08009bef 	.word	0x08009bef

08008d84 <_cleanup_r>:
 8008d84:	4901      	ldr	r1, [pc, #4]	; (8008d8c <_cleanup_r+0x8>)
 8008d86:	f000 b8af 	b.w	8008ee8 <_fwalk_reent>
 8008d8a:	bf00      	nop
 8008d8c:	08008cc5 	.word	0x08008cc5

08008d90 <__sfmoreglue>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	1e4a      	subs	r2, r1, #1
 8008d94:	2568      	movs	r5, #104	; 0x68
 8008d96:	4355      	muls	r5, r2
 8008d98:	460e      	mov	r6, r1
 8008d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d9e:	f000 fd23 	bl	80097e8 <_malloc_r>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b140      	cbz	r0, 8008db8 <__sfmoreglue+0x28>
 8008da6:	2100      	movs	r1, #0
 8008da8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dac:	300c      	adds	r0, #12
 8008dae:	60a0      	str	r0, [r4, #8]
 8008db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008db4:	f7fe fac6 	bl	8007344 <memset>
 8008db8:	4620      	mov	r0, r4
 8008dba:	bd70      	pop	{r4, r5, r6, pc}

08008dbc <__sfp_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__sfp_lock_acquire+0x8>)
 8008dbe:	f000 b8b8 	b.w	8008f32 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000478 	.word	0x20000478

08008dc8 <__sfp_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__sfp_lock_release+0x8>)
 8008dca:	f000 b8b3 	b.w	8008f34 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20000478 	.word	0x20000478

08008dd4 <__sinit_lock_acquire>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__sinit_lock_acquire+0x8>)
 8008dd6:	f000 b8ac 	b.w	8008f32 <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20000473 	.word	0x20000473

08008de0 <__sinit_lock_release>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__sinit_lock_release+0x8>)
 8008de2:	f000 b8a7 	b.w	8008f34 <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000473 	.word	0x20000473

08008dec <__sinit>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	f7ff fff0 	bl	8008dd4 <__sinit_lock_acquire>
 8008df4:	69a3      	ldr	r3, [r4, #24]
 8008df6:	b11b      	cbz	r3, 8008e00 <__sinit+0x14>
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	f7ff bff0 	b.w	8008de0 <__sinit_lock_release>
 8008e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e04:	6523      	str	r3, [r4, #80]	; 0x50
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <__sinit+0x68>)
 8008e08:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <__sinit+0x6c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	bf04      	itt	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	61a3      	streq	r3, [r4, #24]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f820 	bl	8008e5c <__sfp>
 8008e1c:	6060      	str	r0, [r4, #4]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f81c 	bl	8008e5c <__sfp>
 8008e24:	60a0      	str	r0, [r4, #8]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f818 	bl	8008e5c <__sfp>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	60e0      	str	r0, [r4, #12]
 8008e30:	2104      	movs	r1, #4
 8008e32:	6860      	ldr	r0, [r4, #4]
 8008e34:	f7ff ff82 	bl	8008d3c <std>
 8008e38:	68a0      	ldr	r0, [r4, #8]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2109      	movs	r1, #9
 8008e3e:	f7ff ff7d 	bl	8008d3c <std>
 8008e42:	68e0      	ldr	r0, [r4, #12]
 8008e44:	2202      	movs	r2, #2
 8008e46:	2112      	movs	r1, #18
 8008e48:	f7ff ff78 	bl	8008d3c <std>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	61a3      	str	r3, [r4, #24]
 8008e50:	e7d2      	b.n	8008df8 <__sinit+0xc>
 8008e52:	bf00      	nop
 8008e54:	08009f2c 	.word	0x08009f2c
 8008e58:	08008d85 	.word	0x08008d85

08008e5c <__sfp>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4607      	mov	r7, r0
 8008e60:	f7ff ffac 	bl	8008dbc <__sfp_lock_acquire>
 8008e64:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <__sfp+0x84>)
 8008e66:	681e      	ldr	r6, [r3, #0]
 8008e68:	69b3      	ldr	r3, [r6, #24]
 8008e6a:	b913      	cbnz	r3, 8008e72 <__sfp+0x16>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffbd 	bl	8008dec <__sinit>
 8008e72:	3648      	adds	r6, #72	; 0x48
 8008e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	d503      	bpl.n	8008e84 <__sfp+0x28>
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	b30b      	cbz	r3, 8008ec4 <__sfp+0x68>
 8008e80:	6836      	ldr	r6, [r6, #0]
 8008e82:	e7f7      	b.n	8008e74 <__sfp+0x18>
 8008e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e88:	b9d5      	cbnz	r5, 8008ec0 <__sfp+0x64>
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <__sfp+0x88>)
 8008e8c:	60e3      	str	r3, [r4, #12]
 8008e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e92:	6665      	str	r5, [r4, #100]	; 0x64
 8008e94:	f000 f84c 	bl	8008f30 <__retarget_lock_init_recursive>
 8008e98:	f7ff ff96 	bl	8008dc8 <__sfp_lock_release>
 8008e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ea4:	6025      	str	r5, [r4, #0]
 8008ea6:	61a5      	str	r5, [r4, #24]
 8008ea8:	2208      	movs	r2, #8
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb0:	f7fe fa48 	bl	8007344 <memset>
 8008eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	3468      	adds	r4, #104	; 0x68
 8008ec2:	e7d9      	b.n	8008e78 <__sfp+0x1c>
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7ff ff62 	bl	8008d90 <__sfmoreglue>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	6030      	str	r0, [r6, #0]
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1d5      	bne.n	8008e80 <__sfp+0x24>
 8008ed4:	f7ff ff78 	bl	8008dc8 <__sfp_lock_release>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	e7ee      	b.n	8008ebc <__sfp+0x60>
 8008ede:	bf00      	nop
 8008ee0:	08009f2c 	.word	0x08009f2c
 8008ee4:	ffff0001 	.word	0xffff0001

08008ee8 <_fwalk_reent>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4606      	mov	r6, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ef4:	2700      	movs	r7, #0
 8008ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008efa:	f1b9 0901 	subs.w	r9, r9, #1
 8008efe:	d505      	bpl.n	8008f0c <_fwalk_reent+0x24>
 8008f00:	6824      	ldr	r4, [r4, #0]
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1f7      	bne.n	8008ef6 <_fwalk_reent+0xe>
 8008f06:	4638      	mov	r0, r7
 8008f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d907      	bls.n	8008f22 <_fwalk_reent+0x3a>
 8008f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f16:	3301      	adds	r3, #1
 8008f18:	d003      	beq.n	8008f22 <_fwalk_reent+0x3a>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	47c0      	blx	r8
 8008f20:	4307      	orrs	r7, r0
 8008f22:	3568      	adds	r5, #104	; 0x68
 8008f24:	e7e9      	b.n	8008efa <_fwalk_reent+0x12>
	...

08008f28 <_localeconv_r>:
 8008f28:	4800      	ldr	r0, [pc, #0]	; (8008f2c <_localeconv_r+0x4>)
 8008f2a:	4770      	bx	lr
 8008f2c:	2000016c 	.word	0x2000016c

08008f30 <__retarget_lock_init_recursive>:
 8008f30:	4770      	bx	lr

08008f32 <__retarget_lock_acquire_recursive>:
 8008f32:	4770      	bx	lr

08008f34 <__retarget_lock_release_recursive>:
 8008f34:	4770      	bx	lr

08008f36 <__swhatbuf_r>:
 8008f36:	b570      	push	{r4, r5, r6, lr}
 8008f38:	460e      	mov	r6, r1
 8008f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	b096      	sub	sp, #88	; 0x58
 8008f42:	4614      	mov	r4, r2
 8008f44:	461d      	mov	r5, r3
 8008f46:	da07      	bge.n	8008f58 <__swhatbuf_r+0x22>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	89b3      	ldrh	r3, [r6, #12]
 8008f4e:	061a      	lsls	r2, r3, #24
 8008f50:	d410      	bmi.n	8008f74 <__swhatbuf_r+0x3e>
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	e00e      	b.n	8008f76 <__swhatbuf_r+0x40>
 8008f58:	466a      	mov	r2, sp
 8008f5a:	f000 fe9f 	bl	8009c9c <_fstat_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	dbf2      	blt.n	8008f48 <__swhatbuf_r+0x12>
 8008f62:	9a01      	ldr	r2, [sp, #4]
 8008f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f6c:	425a      	negs	r2, r3
 8008f6e:	415a      	adcs	r2, r3
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	e7ee      	b.n	8008f52 <__swhatbuf_r+0x1c>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	2000      	movs	r0, #0
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	b016      	add	sp, #88	; 0x58
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f80 <__smakebuf_r>:
 8008f80:	898b      	ldrh	r3, [r1, #12]
 8008f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f84:	079d      	lsls	r5, r3, #30
 8008f86:	4606      	mov	r6, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	d507      	bpl.n	8008f9c <__smakebuf_r+0x1c>
 8008f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	2301      	movs	r3, #1
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	b002      	add	sp, #8
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	ab01      	add	r3, sp, #4
 8008f9e:	466a      	mov	r2, sp
 8008fa0:	f7ff ffc9 	bl	8008f36 <__swhatbuf_r>
 8008fa4:	9900      	ldr	r1, [sp, #0]
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 fc1d 	bl	80097e8 <_malloc_r>
 8008fae:	b948      	cbnz	r0, 8008fc4 <__smakebuf_r+0x44>
 8008fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d4ef      	bmi.n	8008f98 <__smakebuf_r+0x18>
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7e3      	b.n	8008f8c <__smakebuf_r+0xc>
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <__smakebuf_r+0x7c>)
 8008fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6163      	str	r3, [r4, #20]
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	6120      	str	r0, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x74>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 fe6d 	bl	8009cc0 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x74>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a0      	ldrh	r0, [r4, #12]
 8008ff6:	4305      	orrs	r5, r0
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cd      	b.n	8008f98 <__smakebuf_r+0x18>
 8008ffc:	08008d85 	.word	0x08008d85

08009000 <malloc>:
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <malloc+0xc>)
 8009002:	4601      	mov	r1, r0
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f000 bbef 	b.w	80097e8 <_malloc_r>
 800900a:	bf00      	nop
 800900c:	20000018 	.word	0x20000018

08009010 <memcpy>:
 8009010:	440a      	add	r2, r1
 8009012:	4291      	cmp	r1, r2
 8009014:	f100 33ff 	add.w	r3, r0, #4294967295
 8009018:	d100      	bne.n	800901c <memcpy+0xc>
 800901a:	4770      	bx	lr
 800901c:	b510      	push	{r4, lr}
 800901e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009026:	4291      	cmp	r1, r2
 8009028:	d1f9      	bne.n	800901e <memcpy+0xe>
 800902a:	bd10      	pop	{r4, pc}

0800902c <_Balloc>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	b976      	cbnz	r6, 8009054 <_Balloc+0x28>
 8009036:	2010      	movs	r0, #16
 8009038:	f7ff ffe2 	bl	8009000 <malloc>
 800903c:	4602      	mov	r2, r0
 800903e:	6260      	str	r0, [r4, #36]	; 0x24
 8009040:	b920      	cbnz	r0, 800904c <_Balloc+0x20>
 8009042:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <_Balloc+0x78>)
 8009044:	4818      	ldr	r0, [pc, #96]	; (80090a8 <_Balloc+0x7c>)
 8009046:	2166      	movs	r1, #102	; 0x66
 8009048:	f000 fde8 	bl	8009c1c <__assert_func>
 800904c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009050:	6006      	str	r6, [r0, #0]
 8009052:	60c6      	str	r6, [r0, #12]
 8009054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009056:	68f3      	ldr	r3, [r6, #12]
 8009058:	b183      	cbz	r3, 800907c <_Balloc+0x50>
 800905a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009062:	b9b8      	cbnz	r0, 8009094 <_Balloc+0x68>
 8009064:	2101      	movs	r1, #1
 8009066:	fa01 f605 	lsl.w	r6, r1, r5
 800906a:	1d72      	adds	r2, r6, #5
 800906c:	0092      	lsls	r2, r2, #2
 800906e:	4620      	mov	r0, r4
 8009070:	f000 fb5a 	bl	8009728 <_calloc_r>
 8009074:	b160      	cbz	r0, 8009090 <_Balloc+0x64>
 8009076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800907a:	e00e      	b.n	800909a <_Balloc+0x6e>
 800907c:	2221      	movs	r2, #33	; 0x21
 800907e:	2104      	movs	r1, #4
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fb51 	bl	8009728 <_calloc_r>
 8009086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009088:	60f0      	str	r0, [r6, #12]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e4      	bne.n	800905a <_Balloc+0x2e>
 8009090:	2000      	movs	r0, #0
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	6802      	ldr	r2, [r0, #0]
 8009096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800909a:	2300      	movs	r3, #0
 800909c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090a0:	e7f7      	b.n	8009092 <_Balloc+0x66>
 80090a2:	bf00      	nop
 80090a4:	08009f71 	.word	0x08009f71
 80090a8:	0800a058 	.word	0x0800a058

080090ac <_Bfree>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090b0:	4605      	mov	r5, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	b976      	cbnz	r6, 80090d4 <_Bfree+0x28>
 80090b6:	2010      	movs	r0, #16
 80090b8:	f7ff ffa2 	bl	8009000 <malloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	6268      	str	r0, [r5, #36]	; 0x24
 80090c0:	b920      	cbnz	r0, 80090cc <_Bfree+0x20>
 80090c2:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <_Bfree+0x3c>)
 80090c4:	4809      	ldr	r0, [pc, #36]	; (80090ec <_Bfree+0x40>)
 80090c6:	218a      	movs	r1, #138	; 0x8a
 80090c8:	f000 fda8 	bl	8009c1c <__assert_func>
 80090cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d0:	6006      	str	r6, [r0, #0]
 80090d2:	60c6      	str	r6, [r0, #12]
 80090d4:	b13c      	cbz	r4, 80090e6 <_Bfree+0x3a>
 80090d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090d8:	6862      	ldr	r2, [r4, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090e0:	6021      	str	r1, [r4, #0]
 80090e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	08009f71 	.word	0x08009f71
 80090ec:	0800a058 	.word	0x0800a058

080090f0 <__multadd>:
 80090f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f4:	690e      	ldr	r6, [r1, #16]
 80090f6:	4607      	mov	r7, r0
 80090f8:	4698      	mov	r8, r3
 80090fa:	460c      	mov	r4, r1
 80090fc:	f101 0014 	add.w	r0, r1, #20
 8009100:	2300      	movs	r3, #0
 8009102:	6805      	ldr	r5, [r0, #0]
 8009104:	b2a9      	uxth	r1, r5
 8009106:	fb02 8101 	mla	r1, r2, r1, r8
 800910a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800910e:	0c2d      	lsrs	r5, r5, #16
 8009110:	fb02 c505 	mla	r5, r2, r5, ip
 8009114:	b289      	uxth	r1, r1
 8009116:	3301      	adds	r3, #1
 8009118:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800911c:	429e      	cmp	r6, r3
 800911e:	f840 1b04 	str.w	r1, [r0], #4
 8009122:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009126:	dcec      	bgt.n	8009102 <__multadd+0x12>
 8009128:	f1b8 0f00 	cmp.w	r8, #0
 800912c:	d022      	beq.n	8009174 <__multadd+0x84>
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	42b3      	cmp	r3, r6
 8009132:	dc19      	bgt.n	8009168 <__multadd+0x78>
 8009134:	6861      	ldr	r1, [r4, #4]
 8009136:	4638      	mov	r0, r7
 8009138:	3101      	adds	r1, #1
 800913a:	f7ff ff77 	bl	800902c <_Balloc>
 800913e:	4605      	mov	r5, r0
 8009140:	b928      	cbnz	r0, 800914e <__multadd+0x5e>
 8009142:	4602      	mov	r2, r0
 8009144:	4b0d      	ldr	r3, [pc, #52]	; (800917c <__multadd+0x8c>)
 8009146:	480e      	ldr	r0, [pc, #56]	; (8009180 <__multadd+0x90>)
 8009148:	21b5      	movs	r1, #181	; 0xb5
 800914a:	f000 fd67 	bl	8009c1c <__assert_func>
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	3202      	adds	r2, #2
 8009152:	f104 010c 	add.w	r1, r4, #12
 8009156:	0092      	lsls	r2, r2, #2
 8009158:	300c      	adds	r0, #12
 800915a:	f7ff ff59 	bl	8009010 <memcpy>
 800915e:	4621      	mov	r1, r4
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff ffa3 	bl	80090ac <_Bfree>
 8009166:	462c      	mov	r4, r5
 8009168:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800916c:	3601      	adds	r6, #1
 800916e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009172:	6126      	str	r6, [r4, #16]
 8009174:	4620      	mov	r0, r4
 8009176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917a:	bf00      	nop
 800917c:	08009fe7 	.word	0x08009fe7
 8009180:	0800a058 	.word	0x0800a058

08009184 <__hi0bits>:
 8009184:	0c03      	lsrs	r3, r0, #16
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	b9d3      	cbnz	r3, 80091c0 <__hi0bits+0x3c>
 800918a:	0400      	lsls	r0, r0, #16
 800918c:	2310      	movs	r3, #16
 800918e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009192:	bf04      	itt	eq
 8009194:	0200      	lsleq	r0, r0, #8
 8009196:	3308      	addeq	r3, #8
 8009198:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800919c:	bf04      	itt	eq
 800919e:	0100      	lsleq	r0, r0, #4
 80091a0:	3304      	addeq	r3, #4
 80091a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091a6:	bf04      	itt	eq
 80091a8:	0080      	lsleq	r0, r0, #2
 80091aa:	3302      	addeq	r3, #2
 80091ac:	2800      	cmp	r0, #0
 80091ae:	db05      	blt.n	80091bc <__hi0bits+0x38>
 80091b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091b4:	f103 0301 	add.w	r3, r3, #1
 80091b8:	bf08      	it	eq
 80091ba:	2320      	moveq	r3, #32
 80091bc:	4618      	mov	r0, r3
 80091be:	4770      	bx	lr
 80091c0:	2300      	movs	r3, #0
 80091c2:	e7e4      	b.n	800918e <__hi0bits+0xa>

080091c4 <__lo0bits>:
 80091c4:	6803      	ldr	r3, [r0, #0]
 80091c6:	f013 0207 	ands.w	r2, r3, #7
 80091ca:	4601      	mov	r1, r0
 80091cc:	d00b      	beq.n	80091e6 <__lo0bits+0x22>
 80091ce:	07da      	lsls	r2, r3, #31
 80091d0:	d424      	bmi.n	800921c <__lo0bits+0x58>
 80091d2:	0798      	lsls	r0, r3, #30
 80091d4:	bf49      	itett	mi
 80091d6:	085b      	lsrmi	r3, r3, #1
 80091d8:	089b      	lsrpl	r3, r3, #2
 80091da:	2001      	movmi	r0, #1
 80091dc:	600b      	strmi	r3, [r1, #0]
 80091de:	bf5c      	itt	pl
 80091e0:	600b      	strpl	r3, [r1, #0]
 80091e2:	2002      	movpl	r0, #2
 80091e4:	4770      	bx	lr
 80091e6:	b298      	uxth	r0, r3
 80091e8:	b9b0      	cbnz	r0, 8009218 <__lo0bits+0x54>
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	2010      	movs	r0, #16
 80091ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091f2:	bf04      	itt	eq
 80091f4:	0a1b      	lsreq	r3, r3, #8
 80091f6:	3008      	addeq	r0, #8
 80091f8:	071a      	lsls	r2, r3, #28
 80091fa:	bf04      	itt	eq
 80091fc:	091b      	lsreq	r3, r3, #4
 80091fe:	3004      	addeq	r0, #4
 8009200:	079a      	lsls	r2, r3, #30
 8009202:	bf04      	itt	eq
 8009204:	089b      	lsreq	r3, r3, #2
 8009206:	3002      	addeq	r0, #2
 8009208:	07da      	lsls	r2, r3, #31
 800920a:	d403      	bmi.n	8009214 <__lo0bits+0x50>
 800920c:	085b      	lsrs	r3, r3, #1
 800920e:	f100 0001 	add.w	r0, r0, #1
 8009212:	d005      	beq.n	8009220 <__lo0bits+0x5c>
 8009214:	600b      	str	r3, [r1, #0]
 8009216:	4770      	bx	lr
 8009218:	4610      	mov	r0, r2
 800921a:	e7e8      	b.n	80091ee <__lo0bits+0x2a>
 800921c:	2000      	movs	r0, #0
 800921e:	4770      	bx	lr
 8009220:	2020      	movs	r0, #32
 8009222:	4770      	bx	lr

08009224 <__i2b>:
 8009224:	b510      	push	{r4, lr}
 8009226:	460c      	mov	r4, r1
 8009228:	2101      	movs	r1, #1
 800922a:	f7ff feff 	bl	800902c <_Balloc>
 800922e:	4602      	mov	r2, r0
 8009230:	b928      	cbnz	r0, 800923e <__i2b+0x1a>
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <__i2b+0x24>)
 8009234:	4805      	ldr	r0, [pc, #20]	; (800924c <__i2b+0x28>)
 8009236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800923a:	f000 fcef 	bl	8009c1c <__assert_func>
 800923e:	2301      	movs	r3, #1
 8009240:	6144      	str	r4, [r0, #20]
 8009242:	6103      	str	r3, [r0, #16]
 8009244:	bd10      	pop	{r4, pc}
 8009246:	bf00      	nop
 8009248:	08009fe7 	.word	0x08009fe7
 800924c:	0800a058 	.word	0x0800a058

08009250 <__multiply>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4614      	mov	r4, r2
 8009256:	690a      	ldr	r2, [r1, #16]
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	bfb8      	it	lt
 800925e:	460b      	movlt	r3, r1
 8009260:	460d      	mov	r5, r1
 8009262:	bfbc      	itt	lt
 8009264:	4625      	movlt	r5, r4
 8009266:	461c      	movlt	r4, r3
 8009268:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800926c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009270:	68ab      	ldr	r3, [r5, #8]
 8009272:	6869      	ldr	r1, [r5, #4]
 8009274:	eb0a 0709 	add.w	r7, sl, r9
 8009278:	42bb      	cmp	r3, r7
 800927a:	b085      	sub	sp, #20
 800927c:	bfb8      	it	lt
 800927e:	3101      	addlt	r1, #1
 8009280:	f7ff fed4 	bl	800902c <_Balloc>
 8009284:	b930      	cbnz	r0, 8009294 <__multiply+0x44>
 8009286:	4602      	mov	r2, r0
 8009288:	4b42      	ldr	r3, [pc, #264]	; (8009394 <__multiply+0x144>)
 800928a:	4843      	ldr	r0, [pc, #268]	; (8009398 <__multiply+0x148>)
 800928c:	f240 115d 	movw	r1, #349	; 0x15d
 8009290:	f000 fcc4 	bl	8009c1c <__assert_func>
 8009294:	f100 0614 	add.w	r6, r0, #20
 8009298:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800929c:	4633      	mov	r3, r6
 800929e:	2200      	movs	r2, #0
 80092a0:	4543      	cmp	r3, r8
 80092a2:	d31e      	bcc.n	80092e2 <__multiply+0x92>
 80092a4:	f105 0c14 	add.w	ip, r5, #20
 80092a8:	f104 0314 	add.w	r3, r4, #20
 80092ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80092b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80092b4:	9202      	str	r2, [sp, #8]
 80092b6:	ebac 0205 	sub.w	r2, ip, r5
 80092ba:	3a15      	subs	r2, #21
 80092bc:	f022 0203 	bic.w	r2, r2, #3
 80092c0:	3204      	adds	r2, #4
 80092c2:	f105 0115 	add.w	r1, r5, #21
 80092c6:	458c      	cmp	ip, r1
 80092c8:	bf38      	it	cc
 80092ca:	2204      	movcc	r2, #4
 80092cc:	9201      	str	r2, [sp, #4]
 80092ce:	9a02      	ldr	r2, [sp, #8]
 80092d0:	9303      	str	r3, [sp, #12]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d808      	bhi.n	80092e8 <__multiply+0x98>
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	dc55      	bgt.n	8009386 <__multiply+0x136>
 80092da:	6107      	str	r7, [r0, #16]
 80092dc:	b005      	add	sp, #20
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	f843 2b04 	str.w	r2, [r3], #4
 80092e6:	e7db      	b.n	80092a0 <__multiply+0x50>
 80092e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80092ec:	f1ba 0f00 	cmp.w	sl, #0
 80092f0:	d020      	beq.n	8009334 <__multiply+0xe4>
 80092f2:	f105 0e14 	add.w	lr, r5, #20
 80092f6:	46b1      	mov	r9, r6
 80092f8:	2200      	movs	r2, #0
 80092fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80092fe:	f8d9 b000 	ldr.w	fp, [r9]
 8009302:	b2a1      	uxth	r1, r4
 8009304:	fa1f fb8b 	uxth.w	fp, fp
 8009308:	fb0a b101 	mla	r1, sl, r1, fp
 800930c:	4411      	add	r1, r2
 800930e:	f8d9 2000 	ldr.w	r2, [r9]
 8009312:	0c24      	lsrs	r4, r4, #16
 8009314:	0c12      	lsrs	r2, r2, #16
 8009316:	fb0a 2404 	mla	r4, sl, r4, r2
 800931a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800931e:	b289      	uxth	r1, r1
 8009320:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009324:	45f4      	cmp	ip, lr
 8009326:	f849 1b04 	str.w	r1, [r9], #4
 800932a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800932e:	d8e4      	bhi.n	80092fa <__multiply+0xaa>
 8009330:	9901      	ldr	r1, [sp, #4]
 8009332:	5072      	str	r2, [r6, r1]
 8009334:	9a03      	ldr	r2, [sp, #12]
 8009336:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800933a:	3304      	adds	r3, #4
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	d01f      	beq.n	8009382 <__multiply+0x132>
 8009342:	6834      	ldr	r4, [r6, #0]
 8009344:	f105 0114 	add.w	r1, r5, #20
 8009348:	46b6      	mov	lr, r6
 800934a:	f04f 0a00 	mov.w	sl, #0
 800934e:	880a      	ldrh	r2, [r1, #0]
 8009350:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009354:	fb09 b202 	mla	r2, r9, r2, fp
 8009358:	4492      	add	sl, r2
 800935a:	b2a4      	uxth	r4, r4
 800935c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009360:	f84e 4b04 	str.w	r4, [lr], #4
 8009364:	f851 4b04 	ldr.w	r4, [r1], #4
 8009368:	f8be 2000 	ldrh.w	r2, [lr]
 800936c:	0c24      	lsrs	r4, r4, #16
 800936e:	fb09 2404 	mla	r4, r9, r4, r2
 8009372:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009376:	458c      	cmp	ip, r1
 8009378:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800937c:	d8e7      	bhi.n	800934e <__multiply+0xfe>
 800937e:	9a01      	ldr	r2, [sp, #4]
 8009380:	50b4      	str	r4, [r6, r2]
 8009382:	3604      	adds	r6, #4
 8009384:	e7a3      	b.n	80092ce <__multiply+0x7e>
 8009386:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1a5      	bne.n	80092da <__multiply+0x8a>
 800938e:	3f01      	subs	r7, #1
 8009390:	e7a1      	b.n	80092d6 <__multiply+0x86>
 8009392:	bf00      	nop
 8009394:	08009fe7 	.word	0x08009fe7
 8009398:	0800a058 	.word	0x0800a058

0800939c <__pow5mult>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	4615      	mov	r5, r2
 80093a2:	f012 0203 	ands.w	r2, r2, #3
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	d007      	beq.n	80093bc <__pow5mult+0x20>
 80093ac:	4c25      	ldr	r4, [pc, #148]	; (8009444 <__pow5mult+0xa8>)
 80093ae:	3a01      	subs	r2, #1
 80093b0:	2300      	movs	r3, #0
 80093b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093b6:	f7ff fe9b 	bl	80090f0 <__multadd>
 80093ba:	4607      	mov	r7, r0
 80093bc:	10ad      	asrs	r5, r5, #2
 80093be:	d03d      	beq.n	800943c <__pow5mult+0xa0>
 80093c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093c2:	b97c      	cbnz	r4, 80093e4 <__pow5mult+0x48>
 80093c4:	2010      	movs	r0, #16
 80093c6:	f7ff fe1b 	bl	8009000 <malloc>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6270      	str	r0, [r6, #36]	; 0x24
 80093ce:	b928      	cbnz	r0, 80093dc <__pow5mult+0x40>
 80093d0:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <__pow5mult+0xac>)
 80093d2:	481e      	ldr	r0, [pc, #120]	; (800944c <__pow5mult+0xb0>)
 80093d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093d8:	f000 fc20 	bl	8009c1c <__assert_func>
 80093dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093e0:	6004      	str	r4, [r0, #0]
 80093e2:	60c4      	str	r4, [r0, #12]
 80093e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093ec:	b94c      	cbnz	r4, 8009402 <__pow5mult+0x66>
 80093ee:	f240 2171 	movw	r1, #625	; 0x271
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7ff ff16 	bl	8009224 <__i2b>
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80093fe:	4604      	mov	r4, r0
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	f04f 0900 	mov.w	r9, #0
 8009406:	07eb      	lsls	r3, r5, #31
 8009408:	d50a      	bpl.n	8009420 <__pow5mult+0x84>
 800940a:	4639      	mov	r1, r7
 800940c:	4622      	mov	r2, r4
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ff1e 	bl	8009250 <__multiply>
 8009414:	4639      	mov	r1, r7
 8009416:	4680      	mov	r8, r0
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff fe47 	bl	80090ac <_Bfree>
 800941e:	4647      	mov	r7, r8
 8009420:	106d      	asrs	r5, r5, #1
 8009422:	d00b      	beq.n	800943c <__pow5mult+0xa0>
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	b938      	cbnz	r0, 8009438 <__pow5mult+0x9c>
 8009428:	4622      	mov	r2, r4
 800942a:	4621      	mov	r1, r4
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff ff0f 	bl	8009250 <__multiply>
 8009432:	6020      	str	r0, [r4, #0]
 8009434:	f8c0 9000 	str.w	r9, [r0]
 8009438:	4604      	mov	r4, r0
 800943a:	e7e4      	b.n	8009406 <__pow5mult+0x6a>
 800943c:	4638      	mov	r0, r7
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	bf00      	nop
 8009444:	0800a1a8 	.word	0x0800a1a8
 8009448:	08009f71 	.word	0x08009f71
 800944c:	0800a058 	.word	0x0800a058

08009450 <__lshift>:
 8009450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	6849      	ldr	r1, [r1, #4]
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	4607      	mov	r7, r0
 8009462:	4691      	mov	r9, r2
 8009464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009468:	f108 0601 	add.w	r6, r8, #1
 800946c:	42b3      	cmp	r3, r6
 800946e:	db0b      	blt.n	8009488 <__lshift+0x38>
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff fddb 	bl	800902c <_Balloc>
 8009476:	4605      	mov	r5, r0
 8009478:	b948      	cbnz	r0, 800948e <__lshift+0x3e>
 800947a:	4602      	mov	r2, r0
 800947c:	4b28      	ldr	r3, [pc, #160]	; (8009520 <__lshift+0xd0>)
 800947e:	4829      	ldr	r0, [pc, #164]	; (8009524 <__lshift+0xd4>)
 8009480:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009484:	f000 fbca 	bl	8009c1c <__assert_func>
 8009488:	3101      	adds	r1, #1
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	e7ee      	b.n	800946c <__lshift+0x1c>
 800948e:	2300      	movs	r3, #0
 8009490:	f100 0114 	add.w	r1, r0, #20
 8009494:	f100 0210 	add.w	r2, r0, #16
 8009498:	4618      	mov	r0, r3
 800949a:	4553      	cmp	r3, sl
 800949c:	db33      	blt.n	8009506 <__lshift+0xb6>
 800949e:	6920      	ldr	r0, [r4, #16]
 80094a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094a4:	f104 0314 	add.w	r3, r4, #20
 80094a8:	f019 091f 	ands.w	r9, r9, #31
 80094ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094b4:	d02b      	beq.n	800950e <__lshift+0xbe>
 80094b6:	f1c9 0e20 	rsb	lr, r9, #32
 80094ba:	468a      	mov	sl, r1
 80094bc:	2200      	movs	r2, #0
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	fa00 f009 	lsl.w	r0, r0, r9
 80094c4:	4302      	orrs	r2, r0
 80094c6:	f84a 2b04 	str.w	r2, [sl], #4
 80094ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ce:	459c      	cmp	ip, r3
 80094d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80094d4:	d8f3      	bhi.n	80094be <__lshift+0x6e>
 80094d6:	ebac 0304 	sub.w	r3, ip, r4
 80094da:	3b15      	subs	r3, #21
 80094dc:	f023 0303 	bic.w	r3, r3, #3
 80094e0:	3304      	adds	r3, #4
 80094e2:	f104 0015 	add.w	r0, r4, #21
 80094e6:	4584      	cmp	ip, r0
 80094e8:	bf38      	it	cc
 80094ea:	2304      	movcc	r3, #4
 80094ec:	50ca      	str	r2, [r1, r3]
 80094ee:	b10a      	cbz	r2, 80094f4 <__lshift+0xa4>
 80094f0:	f108 0602 	add.w	r6, r8, #2
 80094f4:	3e01      	subs	r6, #1
 80094f6:	4638      	mov	r0, r7
 80094f8:	612e      	str	r6, [r5, #16]
 80094fa:	4621      	mov	r1, r4
 80094fc:	f7ff fdd6 	bl	80090ac <_Bfree>
 8009500:	4628      	mov	r0, r5
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	f842 0f04 	str.w	r0, [r2, #4]!
 800950a:	3301      	adds	r3, #1
 800950c:	e7c5      	b.n	800949a <__lshift+0x4a>
 800950e:	3904      	subs	r1, #4
 8009510:	f853 2b04 	ldr.w	r2, [r3], #4
 8009514:	f841 2f04 	str.w	r2, [r1, #4]!
 8009518:	459c      	cmp	ip, r3
 800951a:	d8f9      	bhi.n	8009510 <__lshift+0xc0>
 800951c:	e7ea      	b.n	80094f4 <__lshift+0xa4>
 800951e:	bf00      	nop
 8009520:	08009fe7 	.word	0x08009fe7
 8009524:	0800a058 	.word	0x0800a058

08009528 <__mcmp>:
 8009528:	b530      	push	{r4, r5, lr}
 800952a:	6902      	ldr	r2, [r0, #16]
 800952c:	690c      	ldr	r4, [r1, #16]
 800952e:	1b12      	subs	r2, r2, r4
 8009530:	d10e      	bne.n	8009550 <__mcmp+0x28>
 8009532:	f100 0314 	add.w	r3, r0, #20
 8009536:	3114      	adds	r1, #20
 8009538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800953c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009548:	42a5      	cmp	r5, r4
 800954a:	d003      	beq.n	8009554 <__mcmp+0x2c>
 800954c:	d305      	bcc.n	800955a <__mcmp+0x32>
 800954e:	2201      	movs	r2, #1
 8009550:	4610      	mov	r0, r2
 8009552:	bd30      	pop	{r4, r5, pc}
 8009554:	4283      	cmp	r3, r0
 8009556:	d3f3      	bcc.n	8009540 <__mcmp+0x18>
 8009558:	e7fa      	b.n	8009550 <__mcmp+0x28>
 800955a:	f04f 32ff 	mov.w	r2, #4294967295
 800955e:	e7f7      	b.n	8009550 <__mcmp+0x28>

08009560 <__mdiff>:
 8009560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	4606      	mov	r6, r0
 8009568:	4611      	mov	r1, r2
 800956a:	4620      	mov	r0, r4
 800956c:	4617      	mov	r7, r2
 800956e:	f7ff ffdb 	bl	8009528 <__mcmp>
 8009572:	1e05      	subs	r5, r0, #0
 8009574:	d110      	bne.n	8009598 <__mdiff+0x38>
 8009576:	4629      	mov	r1, r5
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff fd57 	bl	800902c <_Balloc>
 800957e:	b930      	cbnz	r0, 800958e <__mdiff+0x2e>
 8009580:	4b39      	ldr	r3, [pc, #228]	; (8009668 <__mdiff+0x108>)
 8009582:	4602      	mov	r2, r0
 8009584:	f240 2132 	movw	r1, #562	; 0x232
 8009588:	4838      	ldr	r0, [pc, #224]	; (800966c <__mdiff+0x10c>)
 800958a:	f000 fb47 	bl	8009c1c <__assert_func>
 800958e:	2301      	movs	r3, #1
 8009590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	bfa4      	itt	ge
 800959a:	463b      	movge	r3, r7
 800959c:	4627      	movge	r7, r4
 800959e:	4630      	mov	r0, r6
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	bfa6      	itte	ge
 80095a4:	461c      	movge	r4, r3
 80095a6:	2500      	movge	r5, #0
 80095a8:	2501      	movlt	r5, #1
 80095aa:	f7ff fd3f 	bl	800902c <_Balloc>
 80095ae:	b920      	cbnz	r0, 80095ba <__mdiff+0x5a>
 80095b0:	4b2d      	ldr	r3, [pc, #180]	; (8009668 <__mdiff+0x108>)
 80095b2:	4602      	mov	r2, r0
 80095b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095b8:	e7e6      	b.n	8009588 <__mdiff+0x28>
 80095ba:	693e      	ldr	r6, [r7, #16]
 80095bc:	60c5      	str	r5, [r0, #12]
 80095be:	6925      	ldr	r5, [r4, #16]
 80095c0:	f107 0114 	add.w	r1, r7, #20
 80095c4:	f104 0914 	add.w	r9, r4, #20
 80095c8:	f100 0e14 	add.w	lr, r0, #20
 80095cc:	f107 0210 	add.w	r2, r7, #16
 80095d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80095d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80095d8:	46f2      	mov	sl, lr
 80095da:	2700      	movs	r7, #0
 80095dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80095e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095e4:	fa1f f883 	uxth.w	r8, r3
 80095e8:	fa17 f78b 	uxtah	r7, r7, fp
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	eba7 0808 	sub.w	r8, r7, r8
 80095f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095fa:	fa1f f888 	uxth.w	r8, r8
 80095fe:	141f      	asrs	r7, r3, #16
 8009600:	454d      	cmp	r5, r9
 8009602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009606:	f84a 3b04 	str.w	r3, [sl], #4
 800960a:	d8e7      	bhi.n	80095dc <__mdiff+0x7c>
 800960c:	1b2b      	subs	r3, r5, r4
 800960e:	3b15      	subs	r3, #21
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	3415      	adds	r4, #21
 8009618:	42a5      	cmp	r5, r4
 800961a:	bf38      	it	cc
 800961c:	2304      	movcc	r3, #4
 800961e:	4419      	add	r1, r3
 8009620:	4473      	add	r3, lr
 8009622:	469e      	mov	lr, r3
 8009624:	460d      	mov	r5, r1
 8009626:	4565      	cmp	r5, ip
 8009628:	d30e      	bcc.n	8009648 <__mdiff+0xe8>
 800962a:	f10c 0203 	add.w	r2, ip, #3
 800962e:	1a52      	subs	r2, r2, r1
 8009630:	f022 0203 	bic.w	r2, r2, #3
 8009634:	3903      	subs	r1, #3
 8009636:	458c      	cmp	ip, r1
 8009638:	bf38      	it	cc
 800963a:	2200      	movcc	r2, #0
 800963c:	441a      	add	r2, r3
 800963e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009642:	b17b      	cbz	r3, 8009664 <__mdiff+0x104>
 8009644:	6106      	str	r6, [r0, #16]
 8009646:	e7a5      	b.n	8009594 <__mdiff+0x34>
 8009648:	f855 8b04 	ldr.w	r8, [r5], #4
 800964c:	fa17 f488 	uxtah	r4, r7, r8
 8009650:	1422      	asrs	r2, r4, #16
 8009652:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009656:	b2a4      	uxth	r4, r4
 8009658:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800965c:	f84e 4b04 	str.w	r4, [lr], #4
 8009660:	1417      	asrs	r7, r2, #16
 8009662:	e7e0      	b.n	8009626 <__mdiff+0xc6>
 8009664:	3e01      	subs	r6, #1
 8009666:	e7ea      	b.n	800963e <__mdiff+0xde>
 8009668:	08009fe7 	.word	0x08009fe7
 800966c:	0800a058 	.word	0x0800a058

08009670 <__d2b>:
 8009670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009674:	4689      	mov	r9, r1
 8009676:	2101      	movs	r1, #1
 8009678:	ec57 6b10 	vmov	r6, r7, d0
 800967c:	4690      	mov	r8, r2
 800967e:	f7ff fcd5 	bl	800902c <_Balloc>
 8009682:	4604      	mov	r4, r0
 8009684:	b930      	cbnz	r0, 8009694 <__d2b+0x24>
 8009686:	4602      	mov	r2, r0
 8009688:	4b25      	ldr	r3, [pc, #148]	; (8009720 <__d2b+0xb0>)
 800968a:	4826      	ldr	r0, [pc, #152]	; (8009724 <__d2b+0xb4>)
 800968c:	f240 310a 	movw	r1, #778	; 0x30a
 8009690:	f000 fac4 	bl	8009c1c <__assert_func>
 8009694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800969c:	bb35      	cbnz	r5, 80096ec <__d2b+0x7c>
 800969e:	2e00      	cmp	r6, #0
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	d028      	beq.n	80096f6 <__d2b+0x86>
 80096a4:	4668      	mov	r0, sp
 80096a6:	9600      	str	r6, [sp, #0]
 80096a8:	f7ff fd8c 	bl	80091c4 <__lo0bits>
 80096ac:	9900      	ldr	r1, [sp, #0]
 80096ae:	b300      	cbz	r0, 80096f2 <__d2b+0x82>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	f1c0 0320 	rsb	r3, r0, #32
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	430b      	orrs	r3, r1
 80096bc:	40c2      	lsrs	r2, r0
 80096be:	6163      	str	r3, [r4, #20]
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	9b01      	ldr	r3, [sp, #4]
 80096c4:	61a3      	str	r3, [r4, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf14      	ite	ne
 80096ca:	2202      	movne	r2, #2
 80096cc:	2201      	moveq	r2, #1
 80096ce:	6122      	str	r2, [r4, #16]
 80096d0:	b1d5      	cbz	r5, 8009708 <__d2b+0x98>
 80096d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096d6:	4405      	add	r5, r0
 80096d8:	f8c9 5000 	str.w	r5, [r9]
 80096dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096e0:	f8c8 0000 	str.w	r0, [r8]
 80096e4:	4620      	mov	r0, r4
 80096e6:	b003      	add	sp, #12
 80096e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f0:	e7d5      	b.n	800969e <__d2b+0x2e>
 80096f2:	6161      	str	r1, [r4, #20]
 80096f4:	e7e5      	b.n	80096c2 <__d2b+0x52>
 80096f6:	a801      	add	r0, sp, #4
 80096f8:	f7ff fd64 	bl	80091c4 <__lo0bits>
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	6163      	str	r3, [r4, #20]
 8009700:	2201      	movs	r2, #1
 8009702:	6122      	str	r2, [r4, #16]
 8009704:	3020      	adds	r0, #32
 8009706:	e7e3      	b.n	80096d0 <__d2b+0x60>
 8009708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800970c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009710:	f8c9 0000 	str.w	r0, [r9]
 8009714:	6918      	ldr	r0, [r3, #16]
 8009716:	f7ff fd35 	bl	8009184 <__hi0bits>
 800971a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800971e:	e7df      	b.n	80096e0 <__d2b+0x70>
 8009720:	08009fe7 	.word	0x08009fe7
 8009724:	0800a058 	.word	0x0800a058

08009728 <_calloc_r>:
 8009728:	b513      	push	{r0, r1, r4, lr}
 800972a:	434a      	muls	r2, r1
 800972c:	4611      	mov	r1, r2
 800972e:	9201      	str	r2, [sp, #4]
 8009730:	f000 f85a 	bl	80097e8 <_malloc_r>
 8009734:	4604      	mov	r4, r0
 8009736:	b118      	cbz	r0, 8009740 <_calloc_r+0x18>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	2100      	movs	r1, #0
 800973c:	f7fd fe02 	bl	8007344 <memset>
 8009740:	4620      	mov	r0, r4
 8009742:	b002      	add	sp, #8
 8009744:	bd10      	pop	{r4, pc}
	...

08009748 <_free_r>:
 8009748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800974a:	2900      	cmp	r1, #0
 800974c:	d048      	beq.n	80097e0 <_free_r+0x98>
 800974e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009752:	9001      	str	r0, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f1a1 0404 	sub.w	r4, r1, #4
 800975a:	bfb8      	it	lt
 800975c:	18e4      	addlt	r4, r4, r3
 800975e:	f000 fae3 	bl	8009d28 <__malloc_lock>
 8009762:	4a20      	ldr	r2, [pc, #128]	; (80097e4 <_free_r+0x9c>)
 8009764:	9801      	ldr	r0, [sp, #4]
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	4615      	mov	r5, r2
 800976a:	b933      	cbnz	r3, 800977a <_free_r+0x32>
 800976c:	6063      	str	r3, [r4, #4]
 800976e:	6014      	str	r4, [r2, #0]
 8009770:	b003      	add	sp, #12
 8009772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009776:	f000 badd 	b.w	8009d34 <__malloc_unlock>
 800977a:	42a3      	cmp	r3, r4
 800977c:	d90b      	bls.n	8009796 <_free_r+0x4e>
 800977e:	6821      	ldr	r1, [r4, #0]
 8009780:	1862      	adds	r2, r4, r1
 8009782:	4293      	cmp	r3, r2
 8009784:	bf04      	itt	eq
 8009786:	681a      	ldreq	r2, [r3, #0]
 8009788:	685b      	ldreq	r3, [r3, #4]
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	bf04      	itt	eq
 800978e:	1852      	addeq	r2, r2, r1
 8009790:	6022      	streq	r2, [r4, #0]
 8009792:	602c      	str	r4, [r5, #0]
 8009794:	e7ec      	b.n	8009770 <_free_r+0x28>
 8009796:	461a      	mov	r2, r3
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b10b      	cbz	r3, 80097a0 <_free_r+0x58>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d9fa      	bls.n	8009796 <_free_r+0x4e>
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	1855      	adds	r5, r2, r1
 80097a4:	42a5      	cmp	r5, r4
 80097a6:	d10b      	bne.n	80097c0 <_free_r+0x78>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	4421      	add	r1, r4
 80097ac:	1854      	adds	r4, r2, r1
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6011      	str	r1, [r2, #0]
 80097b2:	d1dd      	bne.n	8009770 <_free_r+0x28>
 80097b4:	681c      	ldr	r4, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	6053      	str	r3, [r2, #4]
 80097ba:	4421      	add	r1, r4
 80097bc:	6011      	str	r1, [r2, #0]
 80097be:	e7d7      	b.n	8009770 <_free_r+0x28>
 80097c0:	d902      	bls.n	80097c8 <_free_r+0x80>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	e7d3      	b.n	8009770 <_free_r+0x28>
 80097c8:	6825      	ldr	r5, [r4, #0]
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf04      	itt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	bf04      	itt	eq
 80097d8:	1949      	addeq	r1, r1, r5
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	6054      	str	r4, [r2, #4]
 80097de:	e7c7      	b.n	8009770 <_free_r+0x28>
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	20000210 	.word	0x20000210

080097e8 <_malloc_r>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	1ccd      	adds	r5, r1, #3
 80097ec:	f025 0503 	bic.w	r5, r5, #3
 80097f0:	3508      	adds	r5, #8
 80097f2:	2d0c      	cmp	r5, #12
 80097f4:	bf38      	it	cc
 80097f6:	250c      	movcc	r5, #12
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	4606      	mov	r6, r0
 80097fc:	db01      	blt.n	8009802 <_malloc_r+0x1a>
 80097fe:	42a9      	cmp	r1, r5
 8009800:	d903      	bls.n	800980a <_malloc_r+0x22>
 8009802:	230c      	movs	r3, #12
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	2000      	movs	r0, #0
 8009808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980a:	f000 fa8d 	bl	8009d28 <__malloc_lock>
 800980e:	4921      	ldr	r1, [pc, #132]	; (8009894 <_malloc_r+0xac>)
 8009810:	680a      	ldr	r2, [r1, #0]
 8009812:	4614      	mov	r4, r2
 8009814:	b99c      	cbnz	r4, 800983e <_malloc_r+0x56>
 8009816:	4f20      	ldr	r7, [pc, #128]	; (8009898 <_malloc_r+0xb0>)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	b923      	cbnz	r3, 8009826 <_malloc_r+0x3e>
 800981c:	4621      	mov	r1, r4
 800981e:	4630      	mov	r0, r6
 8009820:	f000 f996 	bl	8009b50 <_sbrk_r>
 8009824:	6038      	str	r0, [r7, #0]
 8009826:	4629      	mov	r1, r5
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f991 	bl	8009b50 <_sbrk_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d123      	bne.n	800987a <_malloc_r+0x92>
 8009832:	230c      	movs	r3, #12
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	4630      	mov	r0, r6
 8009838:	f000 fa7c 	bl	8009d34 <__malloc_unlock>
 800983c:	e7e3      	b.n	8009806 <_malloc_r+0x1e>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	1b5b      	subs	r3, r3, r5
 8009842:	d417      	bmi.n	8009874 <_malloc_r+0x8c>
 8009844:	2b0b      	cmp	r3, #11
 8009846:	d903      	bls.n	8009850 <_malloc_r+0x68>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	441c      	add	r4, r3
 800984c:	6025      	str	r5, [r4, #0]
 800984e:	e004      	b.n	800985a <_malloc_r+0x72>
 8009850:	6863      	ldr	r3, [r4, #4]
 8009852:	42a2      	cmp	r2, r4
 8009854:	bf0c      	ite	eq
 8009856:	600b      	streq	r3, [r1, #0]
 8009858:	6053      	strne	r3, [r2, #4]
 800985a:	4630      	mov	r0, r6
 800985c:	f000 fa6a 	bl	8009d34 <__malloc_unlock>
 8009860:	f104 000b 	add.w	r0, r4, #11
 8009864:	1d23      	adds	r3, r4, #4
 8009866:	f020 0007 	bic.w	r0, r0, #7
 800986a:	1ac2      	subs	r2, r0, r3
 800986c:	d0cc      	beq.n	8009808 <_malloc_r+0x20>
 800986e:	1a1b      	subs	r3, r3, r0
 8009870:	50a3      	str	r3, [r4, r2]
 8009872:	e7c9      	b.n	8009808 <_malloc_r+0x20>
 8009874:	4622      	mov	r2, r4
 8009876:	6864      	ldr	r4, [r4, #4]
 8009878:	e7cc      	b.n	8009814 <_malloc_r+0x2c>
 800987a:	1cc4      	adds	r4, r0, #3
 800987c:	f024 0403 	bic.w	r4, r4, #3
 8009880:	42a0      	cmp	r0, r4
 8009882:	d0e3      	beq.n	800984c <_malloc_r+0x64>
 8009884:	1a21      	subs	r1, r4, r0
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f962 	bl	8009b50 <_sbrk_r>
 800988c:	3001      	adds	r0, #1
 800988e:	d1dd      	bne.n	800984c <_malloc_r+0x64>
 8009890:	e7cf      	b.n	8009832 <_malloc_r+0x4a>
 8009892:	bf00      	nop
 8009894:	20000210 	.word	0x20000210
 8009898:	20000214 	.word	0x20000214

0800989c <__sfputc_r>:
 800989c:	6893      	ldr	r3, [r2, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	b410      	push	{r4}
 80098a4:	6093      	str	r3, [r2, #8]
 80098a6:	da08      	bge.n	80098ba <__sfputc_r+0x1e>
 80098a8:	6994      	ldr	r4, [r2, #24]
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	db01      	blt.n	80098b2 <__sfputc_r+0x16>
 80098ae:	290a      	cmp	r1, #10
 80098b0:	d103      	bne.n	80098ba <__sfputc_r+0x1e>
 80098b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b6:	f7fe ba45 	b.w	8007d44 <__swbuf_r>
 80098ba:	6813      	ldr	r3, [r2, #0]
 80098bc:	1c58      	adds	r0, r3, #1
 80098be:	6010      	str	r0, [r2, #0]
 80098c0:	7019      	strb	r1, [r3, #0]
 80098c2:	4608      	mov	r0, r1
 80098c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <__sfputs_r>:
 80098ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098cc:	4606      	mov	r6, r0
 80098ce:	460f      	mov	r7, r1
 80098d0:	4614      	mov	r4, r2
 80098d2:	18d5      	adds	r5, r2, r3
 80098d4:	42ac      	cmp	r4, r5
 80098d6:	d101      	bne.n	80098dc <__sfputs_r+0x12>
 80098d8:	2000      	movs	r0, #0
 80098da:	e007      	b.n	80098ec <__sfputs_r+0x22>
 80098dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e0:	463a      	mov	r2, r7
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff ffda 	bl	800989c <__sfputc_r>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d1f3      	bne.n	80098d4 <__sfputs_r+0xa>
 80098ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098f0 <_vfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	460d      	mov	r5, r1
 80098f6:	b09d      	sub	sp, #116	; 0x74
 80098f8:	4614      	mov	r4, r2
 80098fa:	4698      	mov	r8, r3
 80098fc:	4606      	mov	r6, r0
 80098fe:	b118      	cbz	r0, 8009908 <_vfiprintf_r+0x18>
 8009900:	6983      	ldr	r3, [r0, #24]
 8009902:	b90b      	cbnz	r3, 8009908 <_vfiprintf_r+0x18>
 8009904:	f7ff fa72 	bl	8008dec <__sinit>
 8009908:	4b89      	ldr	r3, [pc, #548]	; (8009b30 <_vfiprintf_r+0x240>)
 800990a:	429d      	cmp	r5, r3
 800990c:	d11b      	bne.n	8009946 <_vfiprintf_r+0x56>
 800990e:	6875      	ldr	r5, [r6, #4]
 8009910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009912:	07d9      	lsls	r1, r3, #31
 8009914:	d405      	bmi.n	8009922 <_vfiprintf_r+0x32>
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	059a      	lsls	r2, r3, #22
 800991a:	d402      	bmi.n	8009922 <_vfiprintf_r+0x32>
 800991c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800991e:	f7ff fb08 	bl	8008f32 <__retarget_lock_acquire_recursive>
 8009922:	89ab      	ldrh	r3, [r5, #12]
 8009924:	071b      	lsls	r3, r3, #28
 8009926:	d501      	bpl.n	800992c <_vfiprintf_r+0x3c>
 8009928:	692b      	ldr	r3, [r5, #16]
 800992a:	b9eb      	cbnz	r3, 8009968 <_vfiprintf_r+0x78>
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f7fe fa5a 	bl	8007de8 <__swsetup_r>
 8009934:	b1c0      	cbz	r0, 8009968 <_vfiprintf_r+0x78>
 8009936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009938:	07dc      	lsls	r4, r3, #31
 800993a:	d50e      	bpl.n	800995a <_vfiprintf_r+0x6a>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b01d      	add	sp, #116	; 0x74
 8009942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009946:	4b7b      	ldr	r3, [pc, #492]	; (8009b34 <_vfiprintf_r+0x244>)
 8009948:	429d      	cmp	r5, r3
 800994a:	d101      	bne.n	8009950 <_vfiprintf_r+0x60>
 800994c:	68b5      	ldr	r5, [r6, #8]
 800994e:	e7df      	b.n	8009910 <_vfiprintf_r+0x20>
 8009950:	4b79      	ldr	r3, [pc, #484]	; (8009b38 <_vfiprintf_r+0x248>)
 8009952:	429d      	cmp	r5, r3
 8009954:	bf08      	it	eq
 8009956:	68f5      	ldreq	r5, [r6, #12]
 8009958:	e7da      	b.n	8009910 <_vfiprintf_r+0x20>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	0598      	lsls	r0, r3, #22
 800995e:	d4ed      	bmi.n	800993c <_vfiprintf_r+0x4c>
 8009960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009962:	f7ff fae7 	bl	8008f34 <__retarget_lock_release_recursive>
 8009966:	e7e9      	b.n	800993c <_vfiprintf_r+0x4c>
 8009968:	2300      	movs	r3, #0
 800996a:	9309      	str	r3, [sp, #36]	; 0x24
 800996c:	2320      	movs	r3, #32
 800996e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009972:	f8cd 800c 	str.w	r8, [sp, #12]
 8009976:	2330      	movs	r3, #48	; 0x30
 8009978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b3c <_vfiprintf_r+0x24c>
 800997c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009980:	f04f 0901 	mov.w	r9, #1
 8009984:	4623      	mov	r3, r4
 8009986:	469a      	mov	sl, r3
 8009988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800998c:	b10a      	cbz	r2, 8009992 <_vfiprintf_r+0xa2>
 800998e:	2a25      	cmp	r2, #37	; 0x25
 8009990:	d1f9      	bne.n	8009986 <_vfiprintf_r+0x96>
 8009992:	ebba 0b04 	subs.w	fp, sl, r4
 8009996:	d00b      	beq.n	80099b0 <_vfiprintf_r+0xc0>
 8009998:	465b      	mov	r3, fp
 800999a:	4622      	mov	r2, r4
 800999c:	4629      	mov	r1, r5
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ff93 	bl	80098ca <__sfputs_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	f000 80aa 	beq.w	8009afe <_vfiprintf_r+0x20e>
 80099aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ac:	445a      	add	r2, fp
 80099ae:	9209      	str	r2, [sp, #36]	; 0x24
 80099b0:	f89a 3000 	ldrb.w	r3, [sl]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80a2 	beq.w	8009afe <_vfiprintf_r+0x20e>
 80099ba:	2300      	movs	r3, #0
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c4:	f10a 0a01 	add.w	sl, sl, #1
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	9307      	str	r3, [sp, #28]
 80099cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d0:	931a      	str	r3, [sp, #104]	; 0x68
 80099d2:	4654      	mov	r4, sl
 80099d4:	2205      	movs	r2, #5
 80099d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099da:	4858      	ldr	r0, [pc, #352]	; (8009b3c <_vfiprintf_r+0x24c>)
 80099dc:	f7f6 fc18 	bl	8000210 <memchr>
 80099e0:	9a04      	ldr	r2, [sp, #16]
 80099e2:	b9d8      	cbnz	r0, 8009a1c <_vfiprintf_r+0x12c>
 80099e4:	06d1      	lsls	r1, r2, #27
 80099e6:	bf44      	itt	mi
 80099e8:	2320      	movmi	r3, #32
 80099ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ee:	0713      	lsls	r3, r2, #28
 80099f0:	bf44      	itt	mi
 80099f2:	232b      	movmi	r3, #43	; 0x2b
 80099f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099f8:	f89a 3000 	ldrb.w	r3, [sl]
 80099fc:	2b2a      	cmp	r3, #42	; 0x2a
 80099fe:	d015      	beq.n	8009a2c <_vfiprintf_r+0x13c>
 8009a00:	9a07      	ldr	r2, [sp, #28]
 8009a02:	4654      	mov	r4, sl
 8009a04:	2000      	movs	r0, #0
 8009a06:	f04f 0c0a 	mov.w	ip, #10
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a10:	3b30      	subs	r3, #48	; 0x30
 8009a12:	2b09      	cmp	r3, #9
 8009a14:	d94e      	bls.n	8009ab4 <_vfiprintf_r+0x1c4>
 8009a16:	b1b0      	cbz	r0, 8009a46 <_vfiprintf_r+0x156>
 8009a18:	9207      	str	r2, [sp, #28]
 8009a1a:	e014      	b.n	8009a46 <_vfiprintf_r+0x156>
 8009a1c:	eba0 0308 	sub.w	r3, r0, r8
 8009a20:	fa09 f303 	lsl.w	r3, r9, r3
 8009a24:	4313      	orrs	r3, r2
 8009a26:	9304      	str	r3, [sp, #16]
 8009a28:	46a2      	mov	sl, r4
 8009a2a:	e7d2      	b.n	80099d2 <_vfiprintf_r+0xe2>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1d19      	adds	r1, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9103      	str	r1, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bfbb      	ittet	lt
 8009a38:	425b      	neglt	r3, r3
 8009a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a3e:	9307      	strge	r3, [sp, #28]
 8009a40:	9307      	strlt	r3, [sp, #28]
 8009a42:	bfb8      	it	lt
 8009a44:	9204      	strlt	r2, [sp, #16]
 8009a46:	7823      	ldrb	r3, [r4, #0]
 8009a48:	2b2e      	cmp	r3, #46	; 0x2e
 8009a4a:	d10c      	bne.n	8009a66 <_vfiprintf_r+0x176>
 8009a4c:	7863      	ldrb	r3, [r4, #1]
 8009a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a50:	d135      	bne.n	8009abe <_vfiprintf_r+0x1ce>
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	1d1a      	adds	r2, r3, #4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	9203      	str	r2, [sp, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bfb8      	it	lt
 8009a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a62:	3402      	adds	r4, #2
 8009a64:	9305      	str	r3, [sp, #20]
 8009a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b4c <_vfiprintf_r+0x25c>
 8009a6a:	7821      	ldrb	r1, [r4, #0]
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	4650      	mov	r0, sl
 8009a70:	f7f6 fbce 	bl	8000210 <memchr>
 8009a74:	b140      	cbz	r0, 8009a88 <_vfiprintf_r+0x198>
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	eba0 000a 	sub.w	r0, r0, sl
 8009a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a80:	9b04      	ldr	r3, [sp, #16]
 8009a82:	4303      	orrs	r3, r0
 8009a84:	3401      	adds	r4, #1
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8c:	482c      	ldr	r0, [pc, #176]	; (8009b40 <_vfiprintf_r+0x250>)
 8009a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a92:	2206      	movs	r2, #6
 8009a94:	f7f6 fbbc 	bl	8000210 <memchr>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d03f      	beq.n	8009b1c <_vfiprintf_r+0x22c>
 8009a9c:	4b29      	ldr	r3, [pc, #164]	; (8009b44 <_vfiprintf_r+0x254>)
 8009a9e:	bb1b      	cbnz	r3, 8009ae8 <_vfiprintf_r+0x1f8>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	3307      	adds	r3, #7
 8009aa4:	f023 0307 	bic.w	r3, r3, #7
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	9303      	str	r3, [sp, #12]
 8009aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aae:	443b      	add	r3, r7
 8009ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab2:	e767      	b.n	8009984 <_vfiprintf_r+0x94>
 8009ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ab8:	460c      	mov	r4, r1
 8009aba:	2001      	movs	r0, #1
 8009abc:	e7a5      	b.n	8009a0a <_vfiprintf_r+0x11a>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	9305      	str	r3, [sp, #20]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f04f 0c0a 	mov.w	ip, #10
 8009aca:	4620      	mov	r0, r4
 8009acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad0:	3a30      	subs	r2, #48	; 0x30
 8009ad2:	2a09      	cmp	r2, #9
 8009ad4:	d903      	bls.n	8009ade <_vfiprintf_r+0x1ee>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0c5      	beq.n	8009a66 <_vfiprintf_r+0x176>
 8009ada:	9105      	str	r1, [sp, #20]
 8009adc:	e7c3      	b.n	8009a66 <_vfiprintf_r+0x176>
 8009ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e7f0      	b.n	8009aca <_vfiprintf_r+0x1da>
 8009ae8:	ab03      	add	r3, sp, #12
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	462a      	mov	r2, r5
 8009aee:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <_vfiprintf_r+0x258>)
 8009af0:	a904      	add	r1, sp, #16
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7fd fcce 	bl	8007494 <_printf_float>
 8009af8:	4607      	mov	r7, r0
 8009afa:	1c78      	adds	r0, r7, #1
 8009afc:	d1d6      	bne.n	8009aac <_vfiprintf_r+0x1bc>
 8009afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b00:	07d9      	lsls	r1, r3, #31
 8009b02:	d405      	bmi.n	8009b10 <_vfiprintf_r+0x220>
 8009b04:	89ab      	ldrh	r3, [r5, #12]
 8009b06:	059a      	lsls	r2, r3, #22
 8009b08:	d402      	bmi.n	8009b10 <_vfiprintf_r+0x220>
 8009b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b0c:	f7ff fa12 	bl	8008f34 <__retarget_lock_release_recursive>
 8009b10:	89ab      	ldrh	r3, [r5, #12]
 8009b12:	065b      	lsls	r3, r3, #25
 8009b14:	f53f af12 	bmi.w	800993c <_vfiprintf_r+0x4c>
 8009b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1a:	e711      	b.n	8009940 <_vfiprintf_r+0x50>
 8009b1c:	ab03      	add	r3, sp, #12
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	462a      	mov	r2, r5
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <_vfiprintf_r+0x258>)
 8009b24:	a904      	add	r1, sp, #16
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7fd ff58 	bl	80079dc <_printf_i>
 8009b2c:	e7e4      	b.n	8009af8 <_vfiprintf_r+0x208>
 8009b2e:	bf00      	nop
 8009b30:	0800a018 	.word	0x0800a018
 8009b34:	0800a038 	.word	0x0800a038
 8009b38:	08009ff8 	.word	0x08009ff8
 8009b3c:	0800a1b4 	.word	0x0800a1b4
 8009b40:	0800a1be 	.word	0x0800a1be
 8009b44:	08007495 	.word	0x08007495
 8009b48:	080098cb 	.word	0x080098cb
 8009b4c:	0800a1ba 	.word	0x0800a1ba

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f7 fe2c 	bl	80017b8 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	2000047c 	.word	0x2000047c

08009b70 <__sread>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	460c      	mov	r4, r1
 8009b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b78:	f000 f8e2 	bl	8009d40 <_read_r>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	bfab      	itete	ge
 8009b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b82:	89a3      	ldrhlt	r3, [r4, #12]
 8009b84:	181b      	addge	r3, r3, r0
 8009b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b8a:	bfac      	ite	ge
 8009b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b8e:	81a3      	strhlt	r3, [r4, #12]
 8009b90:	bd10      	pop	{r4, pc}

08009b92 <__swrite>:
 8009b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b96:	461f      	mov	r7, r3
 8009b98:	898b      	ldrh	r3, [r1, #12]
 8009b9a:	05db      	lsls	r3, r3, #23
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	4616      	mov	r6, r2
 8009ba2:	d505      	bpl.n	8009bb0 <__swrite+0x1e>
 8009ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba8:	2302      	movs	r3, #2
 8009baa:	2200      	movs	r2, #0
 8009bac:	f000 f898 	bl	8009ce0 <_lseek_r>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bba:	81a3      	strh	r3, [r4, #12]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	463b      	mov	r3, r7
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	f000 b817 	b.w	8009bf8 <_write_r>

08009bca <__sseek>:
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd2:	f000 f885 	bl	8009ce0 <_lseek_r>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	bf15      	itete	ne
 8009bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009be6:	81a3      	strheq	r3, [r4, #12]
 8009be8:	bf18      	it	ne
 8009bea:	81a3      	strhne	r3, [r4, #12]
 8009bec:	bd10      	pop	{r4, pc}

08009bee <__sclose>:
 8009bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf2:	f000 b831 	b.w	8009c58 <_close_r>
	...

08009bf8 <_write_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d07      	ldr	r5, [pc, #28]	; (8009c18 <_write_r+0x20>)
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4608      	mov	r0, r1
 8009c00:	4611      	mov	r1, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	602a      	str	r2, [r5, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f7f7 fd85 	bl	8001716 <_write>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_write_r+0x1e>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_write_r+0x1e>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	2000047c 	.word	0x2000047c

08009c1c <__assert_func>:
 8009c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1e:	4614      	mov	r4, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <__assert_func+0x2c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4605      	mov	r5, r0
 8009c28:	68d8      	ldr	r0, [r3, #12]
 8009c2a:	b14c      	cbz	r4, 8009c40 <__assert_func+0x24>
 8009c2c:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <__assert_func+0x30>)
 8009c2e:	9100      	str	r1, [sp, #0]
 8009c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c34:	4906      	ldr	r1, [pc, #24]	; (8009c50 <__assert_func+0x34>)
 8009c36:	462b      	mov	r3, r5
 8009c38:	f000 f81e 	bl	8009c78 <fiprintf>
 8009c3c:	f000 f89f 	bl	8009d7e <abort>
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <__assert_func+0x38>)
 8009c42:	461c      	mov	r4, r3
 8009c44:	e7f3      	b.n	8009c2e <__assert_func+0x12>
 8009c46:	bf00      	nop
 8009c48:	20000018 	.word	0x20000018
 8009c4c:	0800a1c5 	.word	0x0800a1c5
 8009c50:	0800a1d2 	.word	0x0800a1d2
 8009c54:	0800a200 	.word	0x0800a200

08009c58 <_close_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d06      	ldr	r5, [pc, #24]	; (8009c74 <_close_r+0x1c>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	f7f7 fd73 	bl	800174e <_close>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <_close_r+0x1a>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	b103      	cbz	r3, 8009c72 <_close_r+0x1a>
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	2000047c 	.word	0x2000047c

08009c78 <fiprintf>:
 8009c78:	b40e      	push	{r1, r2, r3}
 8009c7a:	b503      	push	{r0, r1, lr}
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	ab03      	add	r3, sp, #12
 8009c80:	4805      	ldr	r0, [pc, #20]	; (8009c98 <fiprintf+0x20>)
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	6800      	ldr	r0, [r0, #0]
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	f7ff fe31 	bl	80098f0 <_vfiprintf_r>
 8009c8e:	b002      	add	sp, #8
 8009c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c94:	b003      	add	sp, #12
 8009c96:	4770      	bx	lr
 8009c98:	20000018 	.word	0x20000018

08009c9c <_fstat_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	; (8009cbc <_fstat_r+0x20>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	f7f7 fd5c 	bl	8001766 <_fstat>
 8009cae:	1c43      	adds	r3, r0, #1
 8009cb0:	d102      	bne.n	8009cb8 <_fstat_r+0x1c>
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	b103      	cbz	r3, 8009cb8 <_fstat_r+0x1c>
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	bd38      	pop	{r3, r4, r5, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000047c 	.word	0x2000047c

08009cc0 <_isatty_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d06      	ldr	r5, [pc, #24]	; (8009cdc <_isatty_r+0x1c>)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4608      	mov	r0, r1
 8009cca:	602b      	str	r3, [r5, #0]
 8009ccc:	f7f7 fd5b 	bl	8001786 <_isatty>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_isatty_r+0x1a>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_isatty_r+0x1a>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	2000047c 	.word	0x2000047c

08009ce0 <_lseek_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	; (8009d00 <_lseek_r+0x20>)
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7f7 fd54 	bl	800179c <_lseek>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_lseek_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_lseek_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	2000047c 	.word	0x2000047c

08009d04 <__ascii_mbtowc>:
 8009d04:	b082      	sub	sp, #8
 8009d06:	b901      	cbnz	r1, 8009d0a <__ascii_mbtowc+0x6>
 8009d08:	a901      	add	r1, sp, #4
 8009d0a:	b142      	cbz	r2, 8009d1e <__ascii_mbtowc+0x1a>
 8009d0c:	b14b      	cbz	r3, 8009d22 <__ascii_mbtowc+0x1e>
 8009d0e:	7813      	ldrb	r3, [r2, #0]
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	1e10      	subs	r0, r2, #0
 8009d16:	bf18      	it	ne
 8009d18:	2001      	movne	r0, #1
 8009d1a:	b002      	add	sp, #8
 8009d1c:	4770      	bx	lr
 8009d1e:	4610      	mov	r0, r2
 8009d20:	e7fb      	b.n	8009d1a <__ascii_mbtowc+0x16>
 8009d22:	f06f 0001 	mvn.w	r0, #1
 8009d26:	e7f8      	b.n	8009d1a <__ascii_mbtowc+0x16>

08009d28 <__malloc_lock>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__malloc_lock+0x8>)
 8009d2a:	f7ff b902 	b.w	8008f32 <__retarget_lock_acquire_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20000474 	.word	0x20000474

08009d34 <__malloc_unlock>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__malloc_unlock+0x8>)
 8009d36:	f7ff b8fd 	b.w	8008f34 <__retarget_lock_release_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20000474 	.word	0x20000474

08009d40 <_read_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d07      	ldr	r5, [pc, #28]	; (8009d60 <_read_r+0x20>)
 8009d44:	4604      	mov	r4, r0
 8009d46:	4608      	mov	r0, r1
 8009d48:	4611      	mov	r1, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f7f7 fcc4 	bl	80016dc <_read>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_read_r+0x1e>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_read_r+0x1e>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	2000047c 	.word	0x2000047c

08009d64 <__ascii_wctomb>:
 8009d64:	b149      	cbz	r1, 8009d7a <__ascii_wctomb+0x16>
 8009d66:	2aff      	cmp	r2, #255	; 0xff
 8009d68:	bf85      	ittet	hi
 8009d6a:	238a      	movhi	r3, #138	; 0x8a
 8009d6c:	6003      	strhi	r3, [r0, #0]
 8009d6e:	700a      	strbls	r2, [r1, #0]
 8009d70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d74:	bf98      	it	ls
 8009d76:	2001      	movls	r0, #1
 8009d78:	4770      	bx	lr
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4770      	bx	lr

08009d7e <abort>:
 8009d7e:	b508      	push	{r3, lr}
 8009d80:	2006      	movs	r0, #6
 8009d82:	f000 f82b 	bl	8009ddc <raise>
 8009d86:	2001      	movs	r0, #1
 8009d88:	f7f7 fc9e 	bl	80016c8 <_exit>

08009d8c <_raise_r>:
 8009d8c:	291f      	cmp	r1, #31
 8009d8e:	b538      	push	{r3, r4, r5, lr}
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	d904      	bls.n	8009da0 <_raise_r+0x14>
 8009d96:	2316      	movs	r3, #22
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009da2:	b112      	cbz	r2, 8009daa <_raise_r+0x1e>
 8009da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da8:	b94b      	cbnz	r3, 8009dbe <_raise_r+0x32>
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 f830 	bl	8009e10 <_getpid_r>
 8009db0:	462a      	mov	r2, r5
 8009db2:	4601      	mov	r1, r0
 8009db4:	4620      	mov	r0, r4
 8009db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dba:	f000 b817 	b.w	8009dec <_kill_r>
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d00a      	beq.n	8009dd8 <_raise_r+0x4c>
 8009dc2:	1c59      	adds	r1, r3, #1
 8009dc4:	d103      	bne.n	8009dce <_raise_r+0x42>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	2001      	movs	r0, #1
 8009dcc:	e7e7      	b.n	8009d9e <_raise_r+0x12>
 8009dce:	2400      	movs	r4, #0
 8009dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	4798      	blx	r3
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e7e0      	b.n	8009d9e <_raise_r+0x12>

08009ddc <raise>:
 8009ddc:	4b02      	ldr	r3, [pc, #8]	; (8009de8 <raise+0xc>)
 8009dde:	4601      	mov	r1, r0
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f7ff bfd3 	b.w	8009d8c <_raise_r>
 8009de6:	bf00      	nop
 8009de8:	20000018 	.word	0x20000018

08009dec <_kill_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_kill_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 fc55 	bl	80016a8 <_kill>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_kill_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_kill_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	2000047c 	.word	0x2000047c

08009e10 <_getpid_r>:
 8009e10:	f7f7 bc42 	b.w	8001698 <_getpid>

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
